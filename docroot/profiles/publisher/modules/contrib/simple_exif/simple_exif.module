<?php


use PHPExif\Exif;

/**
 * Implements hook_menu()
 *
 * @return $items
 * A menu array
 */
function simple_exif_menu(){

  $items['admin/config/media/simple-exif'] = array(
    'title' => 'Simple EXIF/IPTC Mappings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_exif_mappings'),
    'access arguments' => array(
      'administer files'
    ),
    'description' => t('Customize mappings of EXIF/IPTC data'),
    'access callback' => 'user_access',
    'file' => 'simple_exif.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Simple Exif Library Loader.
 */
function _simple_exif_load_lib() {
  if (($library = libraries_load('php-exif')) && !empty($library['loaded'])) {
    $adapter = new SimpleExifAdapter();
    $adapter->setToolPath(variable_get('simple_exif_exiftool_path', ''));
    $reader = new PHPExif\Reader($adapter);
    return $reader;
  }

  throw new Exception('PHPExif could not be loaded!');
}

/**
 * Implements hook_libraries_info().
 */
function simple_exif_libraries_info() {
  return array(
    'php-exif' => array(
      'name' => 'PHP Exif',
      'vendor url' => 'https://github.com/Miljar/php-exif',
      'download url' => 'https://github.com/Miljar/php-exif',
      'version' => '0.x',
      'xautoload' => function($adapter) {
        /**
         * @var \Drupal\xautoload\Adapter\LocalDirectoryAdapter $adapter
         *   An adapter object that can register stuff into the class loader.
         */
        $adapter->composerJson('composer.json');
      },
      // This should be autoloaded, but libraries was reporting that the library
      // was not loaded unless I added this. I suspect that libraries doesn't
      // know about the concept of a library with no explicitly loaded files,
      // but that's about as much care as I gave it.
      'files' => array(
        'php' => array(
          'lib/PHPExif/Reader.php',
        ),
      ),
    ),
  );
}

/**
 * EFIX/IPTC Mapping.
 */
function _simple_exif_fields() {

  $mappings = array(
    'getAuthor' => array(
      'title' => t('Author'),
    ),
    'getHeadline' => array(
      'title' => t('Headline'),
    ),
    'getCredit' => array(
      'title' => t('Credit'),
    ),
    'getSource' => array(
      'title' => t('Source'),
    ),
    'getJobtitle' => array(
      'title' => t('Job Title'),
    ),
    'getTitle' => array(
      'title' => t('Title'),
      'example' => 'Morning Glory Pool',
    ),
    'getKeywords' => array(
      'title' => t('Keywords'),
      'example' => 'Tag 1, Tag 2, Tag 3',
    ),
    'getCopyright' => array(
      'title' => t('Copyright'),
      'example' => 'getCopyright',
    ),
    'getCaption' => array(
      'title' => t('Caption'),
      'example' => 'Caption',
    ),
    'getCreationDate' => array(
      'title' => t('Creation Date'),
      'example' => '2013-06-13 20:01:50',
    ),
    'getWidth' => array(
      'title' => t('Width'),
      'example' => '4288',
    ),
    'getHeight' => array(
      'title' => t('Height'),
      'example' => '2848',
    ),
    'getHorizontalResolution' => array(
      'title' => t('Horizontal Resolution'),
      'example' => '240',
    ),
    'getVerticalResolution' => array(
      'title' => t('Vertical Resolution'),
      'example' => '240',
    ),
    'getFocalLength' => array(
      'title' => t('Focal Length'),
      'example' => '18',
    ),
    'getCamera' => array(
      'title' => t('Camera'),
      'example' => 'NIKON D90',
    ),
    'getSoftware' => array(
      'title' => t('Software'),
      'example' => 'Adobe Photoshop Lightroom',
    ),
    'getAperture' => array(
      'title' => t('Aperture'),
      'example' => 'Aperture',
    ),
    'getExposureMilliseconds' => array(
      'title' => t('Exposure Milliseconds'),
      'example' => 'Exposure Milliseconds',
    ),
    'getFocusDistance' => array(
      'title' => t('Focus Distance'),
      'example' => '7.94m',
    ),
    'getExposure' => array(
      'title' => t('Exposure Time'),
      'example' => '1/320',
    ),
    'getIso' => array(
      'title' => t('Iso'),
      'example' => '200',
    ),
  );

  return $mappings;
}

/**
 * Actually read the EXIF/IPTC data from a File Entity.
 */
function _simple_exif_read_exif_data($FileEntity) {
  if (!empty($FileEntity->uri)) {
    $path = drupal_realpath($FileEntity->uri);
    $reader = _simple_exif_load_lib();
    try {
      $exif = $reader->getExifFromFile($path);
      return $exif;
    }
    catch (Exception $e) {
      return FALSE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function simple_exif_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'file_entity_add_upload' && isset($form['#step']) && $form['#step'] == 4) {
    simple_exif_populate_form_data($form);
  }
  if (preg_match('/^media_edit_(\d+)/', $form_id)) {
    simple_exif_populate_form_data($form);
  }
  if ($form_id === 'file_entity_edit') {
    simple_exif_populate_form_data($form);
  }
}

/**
 * Populate exif data where we can.
 */
function simple_exif_populate_form_data(&$form) {
  // If we don't have an entity to work with, we can't really do anything.
  if (!isset($form['#entity'])) {
    return;
  }

  $entity = $form['#entity'];
  $exif = _simple_exif_read_exif_data($entity);

  if ($exif === FALSE) {
    return;
  }

  $field_mapping = variable_get('simple_exif_mappings', array());
  foreach ($field_mapping as $key => $value) {
    if ($value == '_none') {
      continue;
    }
    if (isset($form[$key])) {
      if (array_key_exists('#default_value', $form[$key][LANGUAGE_NONE])) {
        $form[$key][LANGUAGE_NONE]['#default_value'] = _simple_exif_get_value(call_user_func(array($exif, $value)), $form[$key][LANGUAGE_NONE]['#default_value']);
        continue;
      }
      if (array_key_exists('value', $form[$key][LANGUAGE_NONE][0])) {
        $form[$key][LANGUAGE_NONE][0]['value']['#default_value'] = _simple_exif_get_value(call_user_func(array($exif, $value)), $form[$key][LANGUAGE_NONE][0]['value']['#default_value']);
        continue;
      }

      $form[$key][LANGUAGE_NONE][0]['#default_value'] = _simple_exif_get_value(call_user_func(array($exif, $value)), $form[$key][LANGUAGE_NONE][0]['#default_value']);
    }
  }
}

/**
 * Ajax callback to update the field values on the fly.
 *
 * @todo Reduce code duplication between this function and simple_exif_populate_form_data().
 */
function simple_exif_reapply_exif_metadata(&$form, &$form_state) {
  $commands = array();

  // If we don't have an entity to work with, we can't really do anything.
  if (!isset($form['#entity'])) {
    return;
  }

  $entity = $form['#entity'];
  $exif = _simple_exif_read_exif_data($entity);

  if ($exif === FALSE) {
    return;
  }

  $field_mapping = variable_get('simple_exif_mappings', array());
  foreach ($field_mapping as $key => $value) {
    if ($value == '_none') {
      continue;
    }
    if (isset($form[$key])) {
      $old_value = $form_state['values'][$key][LANGUAGE_NONE][0]['value'];
      // @todo Should this behavior be changed to always use the new value?
      if ($old_value !== '') {
        continue;
      }

      $class_selector = '.';
      foreach ($form[$key]['#attributes']['class'] as $class) {
        if (preg_match('/^field-name/', $class)) {
          $class_selector .= $class;
        }
      }

      if (array_key_exists('#default_value', $form[$key][LANGUAGE_NONE])) {
        $new_value = _simple_exif_get_value(call_user_func(array($exif, $value)), $form[$key][LANGUAGE_NONE]['#default_value'], TRUE);
        if ($old_value != $new_value) {
          $form[$key][LANGUAGE_NONE]['#default_value'] = $new_value;
          $form[$key][LANGUAGE_NONE]['#value'] = $new_value;
          $commands[] = ajax_command_replace($class_selector, drupal_render($form[$key]));
        }
      }
      elseif (array_key_exists('value', $form[$key][LANGUAGE_NONE][0])) {
        $new_value = _simple_exif_get_value(call_user_func(array($exif, $value)), $form[$key][LANGUAGE_NONE][0]['value']['#default_value'], TRUE);
        if ($old_value != $new_value) {
          $form[$key][LANGUAGE_NONE][0]['value']['#default_value'] = $new_value;
          $form[$key][LANGUAGE_NONE][0]['value']['#value'] = $new_value;
          $commands[] = ajax_command_replace($class_selector, drupal_render($form[$key]));
        }
      }
      else {
        $new_value = _simple_exif_get_value(call_user_func(array($exif, $value)), $form[$key][LANGUAGE_NONE][0]['#default_value'], TRUE);
        if ($old_value != $new_value) {
          $form[$key][LANGUAGE_NONE][0]['#default_value'] = $new_value;
          $form[$key][LANGUAGE_NONE][0]['#value'] = $new_value;
          $commands[] = ajax_command_replace($class_selector, drupal_render($form[$key]));
        }
      }
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Get a formatted form value.
 *
 * @param $value
 */
function _simple_exif_get_value($value, $old_value = NULL, $force = FALSE) {
  if (is_array($value)) {
    $value = implode(', ', $value);
  }
  else {
    if (is_string($value) && !mb_check_encoding($value, 'UTF-8')) {
      $value = utf8_encode($value);
    }
  }

  // If we don't have anything for the old value, we should use the exif data.
  // @todo Should this behavior be changed to always use the new value if $force == TRUE?
  if ($old_value === '' || is_null($old_value)) {
    return $value;
  }
  return $old_value;
}
