<?php

/**
 * @file
 * Installation functions for the Publisher SSO module.
 */

/**
 * Implements hook_requirements().
 */
function pub_sso_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  $requirements['pub_sso'] = array(
    'title' => $t('Pub SSO Requirements Check'),
  );

  if (!function_exists('pub_sso_get_cert_directory')) {
    include_once 'pub_sso.module';
  }

  if (!pub_sso_get_cert_directory()) {
    $requirements['pub_sso']['description'] = $t('The Private File System Path must be configured to use SSO. ');
    $requirements['pub_sso']['description'] .= $t('Configure at <a href="!link">admin/config/media/file-system</a>.',
      array(
        '!link' => url('admin/config/media/file-system'),
      )
    );
    $requirements['pub_sso']['severity'] = REQUIREMENT_ERROR;
    $requirements['pub_sso']['value'] = 'Failed';
    // During install 'value' should only be set if it is a version number.
    if ($phase === 'install') {
      unset($requirements['pub_sso']['value']);
    }
  }
  else {
    $requirements['pub_sso']['description'] = $t('Private File System Path is configured properly. We have a directory we can save the certificate to.');
    $requirements['pub_sso']['severity'] = REQUIREMENT_OK;
    $requirements['pub_sso']['value'] = 'Passed';
  }

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function pub_sso_uninstall() {
  variable_del('pub_sso_roles_that_authenticate');
  variable_del('pub_sso_server');
}

/**
 * Implements hook_install().
 */
function pub_sso_install() {
  $cert_directory = pub_sso_get_cert_directory();
  if ($cert_directory != FALSE && !file_exists($cert_directory)) {
    drupal_mkdir($cert_directory, NULL, TRUE);
  }

  // Ensure user does not get locked out when this module is enabled.
  pub_sso_update_7002();

  // Make the federated login path as "sso".
  pub_sso_update_7004();
}

/**
 * Migrates variable from using role name to role id.
 */
function pub_sso_update_7001() {
  $old_sso_roles = variable_get('pub_sso_roles_that_authenticate', array());
  $user_roles = user_roles(TRUE);
  $new_sso_roles = array();
  foreach ($old_sso_roles as $role) {
    if (!is_numeric($role)) {
      // Map role name to role id.
      $role_id = array_search($role, $user_roles);
      if ($role_id !== FALSE) {
        $new_sso_roles[$role_id] = $role_id;
      }
    }
    else {
      // No need to map as this is already role id.
      $new_sso_roles[$role] = $role;
    }
  }
  variable_set('pub_sso_roles_that_authenticate', $new_sso_roles);
}

/**
 * Ensure user does not get locked out when Pub SSO module is enabled.
 */
function pub_sso_update_7002() {
  variable_set('simplesamlphp_auth_allowdefaultlogin', 1);
  variable_set('simplesamlphp_auth_allowdefaultloginusers', "");
  variable_set('simplesamlphp_auth_allowdefaultloginroles', array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID));
  variable_set('simplesamlphp_auth_registerusers', 0);

}

/**
 * Prevent SSO users from being forced to change password in Drupal.
 */
function pub_sso_update_7003() {
  $sso_roles = variable_get('pub_sso_roles_that_authenticate', array());
  if (!empty($sso_roles) && module_exists('password_policy')) {
    $users = db_select('users_roles', 'r')
      ->fields('r', array('uid'))
      ->condition('r.rid', array_keys($sso_roles), 'IN');
    db_update('password_policy_force_change')
      ->fields(array(
        'force_change' => 0,
      ))
      ->condition('uid', $users, 'IN')
      ->execute();
  }
}

/**
 * Make the federated login path as "sso".
 */
function pub_sso_update_7004() {
  variable_set('simplesamlphp_auth_login_path', 'sso');
}
