<?php
/**
 * @file
 * Code for the Publisher WYSIWYG feature.
 */

include_once 'pub_wysiwyg.features.inc';

/**
 * @file
 * Define the WYSIWYG browser plugin.
 */

/**
 * Implements WYSIWYG's hook_wysiwyg_plugin().
 */
function pub_wysiwyg_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      $plugins = array();
      if ($version > 3) {
        $plugins['youtube'] = array(
          'url' => 'http://github.com/NBCUOTS/Publisher7',
          'path' => drupal_get_path('module', 'pub_wysiwyg') . '/plugins/youtube',
          'filename' => 'plugin.js',
          'buttons' => array(
            'Youtube' => t('Youtube'),
          ),
          'load' => TRUE,
          'internal' => FALSE,
        );
      }
      if ($version > 4 && module_exists('pub_mpx')) {
        $plugins['mpx'] = array(
          'url' => 'http://github.com/NBCUOTS/Publisher7',
          'path' => drupal_get_path('module', 'pub_wysiwyg') . '/plugins/mpx',
          'filename' => 'plugin.js',
          'buttons' => array(
            'MPX' => t('MPX'),
          ),
          'load' => TRUE,
          'internal' => FALSE,
        );
      }
      return $plugins;
  }
}

/**
 * Implements hook_filter_info().
 */
function pub_wysiwyg_filter_info() {
  $filters = array();

  $filters['pub_wysiwyg_youtube'] = array(
    'title' => t('Publisher youtube formatter'),
    'description' => t("Allows <youtube> tag to indicate youtube embed video."),
    'process callback' => '_pub_wysiwyg_youtube_filter_process',
    'tips callback' => 'pub_wysiwyg_filter_tips',
    'cache' => FALSE,
  );
  if (module_exists('pub_mpx')) {
    $filters['pub_wysiwyg_mpx'] = array(
      'title' => t('Publisher mpx video formatter'),
      'description' => t('Allows embedding mpx videos via <mpx> tags.'),
      'process callback' => '_pub_wysiwyg_mpx_filter_process',
      'tips callback' => 'pub_wysiwyg_filter_tips',
      'cache' => FALSE,
    );
  }

  return $filters;
}

/**
 * Process callback for pub_wysiwyg_youtube.
 *
 * Turns a <youtube> tag into an iframe embed.
 *
 * @param string $text
 *   Text to be filtered.
 * @param object $filter
 *   Filter object.
 *
 * @return string
 *   Returns the filtered text.
 *
 * @see pub_wysiwyg_filter_info
 */
function _pub_wysiwyg_youtube_filter_process($text, $filter) {
  $html_dom = filter_dom_load($text);
  $videos = $html_dom->getElementsByTagName('youtube');

  // Modifications to the DOM document resets the iteration, so we avoid
  // that by looping from last to first.
  $last_index = $videos->length - 1;

  while ($last_index >= 0) {
    $video = $videos->item($last_index);
    // Extract the video id from the URL.
    // @author: Stephan Schmitz <eyecatchup@gmail.com>
    // @url: http://stackoverflow.com/a/10315969/624466
    $video_id_match = NULL;
    preg_match('/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/', $video->getAttribute('src'), $video_id_match);
    if (empty($video_id_match[1])) {
      // If we cannot determine video id, remove the <youtube> tag.
      $video->parentNode->removeChild($video);
    }
    else {
      // Replace <youtube> tag with <div><iframe> tags.
      $url = "//youtube.com/embed/" . $video_id_match[1];
      $width = $video->getAttribute('width') ?: 640;
      $height = $video->getAttribute('height') ?: 360;

      $iframe = $html_dom->createElement('iframe');
      $iframe->setAttribute('width', $width);
      $iframe->setAttribute('height', $height);
      $iframe->setAttribute('src', $url);
      $iframe->setAttribute('class', 'google-youtube-iframe');

      $wrapper_div = $html_dom->createElement('div');
      $wrapper_div->setAttribute('class', 'google-youtube-wrapper');
      $wrapper_div->appendChild($iframe);

      $video->parentNode->replaceChild($wrapper_div, $video);
    }
    $last_index--;
  }

  $text = filter_dom_serialize($html_dom);

  return $text;
}

/**
 * Process callback for pub_wysiwyg_mpx.
 *
 * Turns an <mpx> tag into an iframe embed.
 *
 * @param string $text
 *   Text to be filtered.
 * @param object $filter
 *   Filter object.
 *
 * @return string
 *   Returns the filtered text.
 *
 * @see pub_wysiwyg_filter_info
 */
function _pub_wysiwyg_mpx_filter_process($text, $filter) {
  $html_dom = filter_dom_load($text);
  $videos = $html_dom->getElementsByTagName('mpx');

  // Modifications to the DOM document resets the iteration, so we avoid
  // that by looping from last to first.
  $last_index = $videos->length - 1;

  while ($last_index >= 0) {
    $video = $videos->item($last_index);
    if (empty($video->getAttribute('url'))) {
      // If we cannot determine video url, remove the <mpx> tag.
      $video->parentNode->removeChild($video);
    }
    else {
      // Replace <mpx> tag with <iframe> tag.
      $url    = $video->getAttribute('url');
      $width  = $video->getAttribute('width') ?: 640;
      $height = $video->getAttribute('height') ?: 360;
      $iframe_src = _pub_mpx_file_url_to_iframe_url($url);

      $iframe = $html_dom->createElement('iframe');
      $iframe->setAttribute('width', $width);
      $iframe->setAttribute('height', $height);
      $iframe->setAttribute('src', $iframe_src);
      $iframe->setAttribute('class', 'mpx-video-iframe');

      $video->parentNode->replaceChild($iframe, $video);
    }
    $last_index--;
  }

  $text = filter_dom_serialize($html_dom);

  return $text;

}

/**
 * Implements hook_form_wysiwyg_profile_form_alter().
 */
function pub_wysiwyg_form_wysiwyg_profile_form_alter($form, $form_state) {
  if (isset($form['format']['#value']) && $form['format']['#value'] == 'publisher'
      && isset($form['editor']['#value']) && $form['editor']['#value'] == 'ckeditor'
      && !module_exists('pub_mpx')) {
    $message = t('If you would like to embed mpx videos via wysiwyg editor, enable the "Pub MPX" module.  Then go to the !publisher_text_format_link and enable "Publisher mpx video formatter" and add "!tag" to the "Allowed HTML tags" field.',
      array(
        '!publisher_text_format_link' => l(t('Publisher text format edit page'), 'admin/config/content/formats/publisher'),
        '!tag' => '<mpx>',
      ));
    drupal_set_message($message, 'warning');
  }
}

/**
 * Implements hook_form_media_wysiwyg_format_form_alter().
 */
function pub_wysiwyg_form_media_wysiwyg_format_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'pub_wysiwyg') . '/js/pub_wysiwyg.file_view_mode_autosubmit.js';
}
