<?php

/**
 * Implements hook_entity_info_alter().
 */
function xmlsitemap_file_entity_entity_info_alter(array &$entity_info) {
  $entity_info['file']['xmlsitemap'] = array(
    'process callback' => 'xmlsitemap_file_entity_xmlsitemap_process_file_links',
  );
}

/**
 * Implements hook_cron().
 *
 * Process old files not found in the {xmlsitemap} table.
 */
function xmlsitemap_file_entity_cron() {
  xmlsitemap_file_entity_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function xmlsitemap_file_entity_xmlsitemap_index_links($limit) {
  if ($types = xmlsitemap_get_link_type_enabled_bundles('file')) {
    $fids = db_query_range("SELECT f.fid FROM {file_managed} f LEFT JOIN {xmlsitemap} x ON x.type = 'file' AND f.fid = x.id WHERE x.id IS NULL AND f.type IN (:types) ORDER BY f.fid DESC", 0, $limit, array(':types' => $types))->fetchCol();
    xmlsitemap_file_entity_xmlsitemap_process_file_links($fids);
  }
}

/**
 * Process file sitemap links.
 *
 * @param $fids
 *   An array of file IDs.
 */
function xmlsitemap_file_entity_xmlsitemap_process_file_links(array $fids) {
  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.generate');
  $files = file_load_multiple($fids);
  foreach ($files as $file) {
    $link = xmlsitemap_file_entity_create_link($file);
    $remove_element = FALSE;
    if ($file->type == 'mpx_video_1' || $file->type == 'mpx_video_2') {
      $analized_element = array(
        'link' => $link,
        'type' => 'video',
      );
      drupal_alter('nbcu_seo_xmlsitemap_remove_element', $analized_element, $remove_element);
    }
    if ($remove_element === FALSE) {
      xmlsitemap_link_save($link);
    }
  }

  if (count($fids) != count($files)) {
    // add links even if file is not availables
    $types = db_query("SELECT f.fid, f.type FROM {file_managed} f WHERE f.fid IN (:fids)", array(':fids' => $fids))->fetchAllKeyed();
    foreach ($fids as $fid) {
      if (empty($files[$fid])) {
        $link = array(
          'type' => 'file',
          'id' => $fid,
          'subtype' => $types[$fid],
          'status' => 0,
          'status_default' => 0,
          'status_override' => 0,
          'priority' => 0,
          'priority_default' => 0,
          'priority_override' => 0,
        );
        xmlsitemap_link_save($link);
      }
    }
  }
}

/**
 * Helper function for saving correct value
 */
function xmlsitemap_file_entity_process_link_options($file) {
  if (isset($file->xmlsitemap)) {
    $xml_link = $file->xmlsitemap;
    $fields = array(
      'status' => XMLSITEMAP_STATUS_DEFAULT,
      'priority' => XMLSITEMAP_PRIORITY_DEFAULT
    );

    foreach ($fields as $field => $default) {
      if ($xml_link[$field] === 'default') {
        $xml_link[$field] = isset($xml_link[$field . '_default']) ? $xml_link[$field . '_default'] : $default;
        $xml_link[$field . '_override'] = 0;
      }
      else {
        $xml_link[$field . '_override'] = 1;
      }
    }
    $file->xmlsitemap = $xml_link;
  }
}

/**
 * Implements hook_file_entity_insert().
 */
function xmlsitemap_file_entity_file_insert(stdClass $file) {
  xmlsitemap_file_entity_file_update($file);
}

/**
 * Implements hook_file_entity_update().
 */
function xmlsitemap_file_entity_file_update(stdClass $file) {
  xmlsitemap_file_entity_process_link_options($file);
  $link = xmlsitemap_file_entity_create_link($file);
  xmlsitemap_link_save($link);
}

/**
 * Implements hook_file_delete().
 */
function xmlsitemap_file_entity_file_delete(stdClass $file) {
  xmlsitemap_link_delete('file', $file->fid);
}

/**
 * Implements hook_comment_update().
 */
function xmlsitemap_file_entity_comment_update(stdClass $comment) {
  if ($file = file_load($comment->fid, NULL, TRUE)) {
    xmlsitemap_file_entity_file_update($file);
  }
}

/**
 * Implements hook_comment_publish().
 */
function xmlsitemap_file_entity_comment_publish(stdClass $comment) {
  xmlsitemap_file_entity_comment_update($comment);
}

/**
 * Implements hook_comment_unpublish().
 */
function xmlsitemap_file_entity_comment_unpublish(stdClass $comment) {
  xmlsitemap_file_entity_comment_update($comment);
}

/**
 * Implements hook_comment_delete().
 */
function xmlsitemap_file_entity_comment_delete(stdClass $comment) {
  xmlsitemap_file_entity_comment_update($comment);
}

/**
 * Implements hook_field_extra_fields().
 */
function xmlsitemap_file_entity_field_extra_fields() {
  $extras = array();
  foreach (file_type_load_all() as $type => $name) {
    $extras['file'][$type]['form']['xmlsitemap'] = array(
      'label' => t('XML sitemap'),
      'description' => t('XML sitemap module element'),
      'weight' => 30,
    );
  }
  return $extras;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see file_entity_file_type_form()
 * @see xmlsitemap_add_link_bundle_settings()
 */
function xmlsitemap_file_entity_form_file_entity_file_type_form_alter(array &$form, array $form_state) {
  $file_type = isset($form['#file_type']->type) ? $form['#file_type']->type : '';
  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
  xmlsitemap_add_link_bundle_settings($form, $form_state, 'file', $file_type);
}

/**
 * Implements hook_form_alter().
 *
 * Add the XML sitemap individual link options for a file.
 *
 * @see xmlsitemap_add_form_link_options()
 */
function xmlsitemap_file_entity_form_file_entity_edit_alter(array &$form, array &$form_state) {
  // Add the link options.
  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
  xmlsitemap_add_form_link_options($form, 'file', $form['type']['#value'], $form['fid']['#value']);
  $form['xmlsitemap']['#weight'] = 30;
}

/**
 * Fetch all the timestamps for when a file was changed.
 *
 * @param $file
 *   A file object.
 * @return
 *   An array of UNIX timestamp integers.
 */
function xmlsitemap_file_entity_get_timestamps(stdClass $file) {
  static $timestamps = array();

  if (!isset($timestamps[$file->fid])) {
    $timestamps[$file->fid] = db_query("SELECT f.timestamp FROM {file_managed} f WHERE f.fid = :fid", array(':fid' => $file->fid))->fetchCol();
  }

  return $timestamps[$file->fid];
}

/**
 * Create a sitemap link from a file.
 *
 * The link will be saved as $file->xmlsitemap.
 *
 * @param $file
 *   A file object.
 */
function xmlsitemap_file_entity_create_link(stdClass $file) {
  if (!isset($file->xmlsitemap) || !is_array($file->xmlsitemap)) {
    $file->xmlsitemap = array();
    if ($file->fid && $link = xmlsitemap_link_load('file', $file->fid)) {
      $file->xmlsitemap = $link;
    }
  }

  $settings = xmlsitemap_link_bundle_load('file', $file->type);
  $uri = entity_uri('file', $file);

  $file->xmlsitemap += array(
    'type' => 'file',
    'id' => $file->fid,
    'subtype' => $file->type,
    'status' => $settings['status'],
    'status_default' => $settings['status'],
    'status_override' => 0,
    'priority' => $settings['priority'],
    'priority_default' => $settings['priority'],
    'priority_override' => 0,
  );

  // Always recalculate changefreq and changecount.
  $timestamps = xmlsitemap_file_entity_get_timestamps($file);
  $file->xmlsitemap['changefreq'] = $file->fid ? xmlsitemap_calculate_changefreq($timestamps) : 0;
  $file->xmlsitemap['changecount'] = $file->fid ? count($timestamps) - 1 : 0;

  // The following values must always be checked because they are volatile.
  $file->xmlsitemap['loc'] = $uri['path'];
  $file->xmlsitemap['lastmod'] = count($timestamps) ? max($timestamps) : 0;
  $file->xmlsitemap['access'] = $file->fid ? file_entity_access('view', $file, drupal_anonymous_user()) : 1;
  $file->xmlsitemap['language'] = isset($file->language) ? $file->language : LANGUAGE_NONE;

  return $file->xmlsitemap;
}
