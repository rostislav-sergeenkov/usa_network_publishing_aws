<?php

/**
 * @file
 * Code for the Post feature.
 */
include_once 'usanetwork_consumptionator_post.features.inc';

define('USANETWORK_CONSUMPTIONATOR_POST_AMOUNT_OF_POSTS', 10);
define('USANETWORK_CONSUMPTIONATOR_POST_DESCRIPTION_LENGTH', 390);


/**
 * Implements hook_theme().
 */
function usanetwork_consumptionator_post_theme() {

  return array(

    'usanetwork_cons_post_main' => array(
      'variables' => array(
        'rendered_quiz' => NULL,
        'rendered_carousel' => NULL,
      ),
      'template' => 'templates/usanetwork-cons-post-main',
    ),
    'usanetwork_cons_post_carousel' => array(
      'variables' => array(
        'quizes' => array(),
      ),
      'template' => 'templates/usanetwork-cons-post-carousel',
    ),
    'usanetwork_cons_post_carousel_item' => array(
      'variables' => array(
        'url' => NULL,
        'title' => NULL,
        'active' => NULL,
      ),
      'template' => 'templates/usanetwork-cons-post-carousel-item',
    ),
    'usanetwork_cons_post_gallery_rec' => array(
      'variables' => array(
        'gallery_html' => NULL,
        'block_title' =>NULL,
      ),
      'template' => 'templates/usanetwork-cons-post-gallery-rec',
    ),
    'usanetwork_blog_landing_posts_list_item' => array(
      'variables' => array(
        'blog_url' => NULL,
        'desktop_image_url' => NULL,
        'title' => NULL,
        'description' => NULL,
        'post_date' => NULL,
      ),
      'template' => 'templates/usanetwork-blog-landing-posts-list-item',
    ),
    'usanetwork_blog_landing_posts' => array(
      'variables' => array(
        'items' => array(),
        'ad' => NULL,
        'title' => NULL,
        'show_nid' => NULL,
      ),
      'template' => 'templates/usanetwork-blog-landing-posts',
    ),
  );
}

/**
 *  Implements hook_menu().
 */
function usanetwork_consumptionator_post_menu() {
  $items = array();

  $items['node/%node/blog'] = array(
    'title' => 'Blog',
    'page arguments' => array(1),
    'page callback' => 'usanetwork_consumptionator_post_blank_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/blog/%'] = array(
    'title' => 'Blog',
    'page arguments' => array(1),
    'page callback' => 'usanetwork_consumptionator_post_blank_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/tag/%'] = array(
    'title' => 'Blog',
    'page arguments' => array(1),
    'page callback' => 'usanetwork_consumptionator_post_blank_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ajax/usanetwork-blog-posts/get-related/%node/%'] = array(
    'title' => 'Related content',
    'page callback' => 'usanetwork_consumptionator_post_blog_get_posts_ajax',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/usanetwork-blog-posts/get-related-tag/%node/%/%'] = array(
    'title' => 'Related content',
    'page callback' => 'usanetwork_consumptionator_post_blog_get_posts_ajax',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/usanetwork-blog-posts/get-related/news/%'] = array(
    'title' => 'Related content',
    'page callback' => 'usanetwork_consumptionator_post_blog_get_posts_ajax',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/consumptionator_blog/autocomplete'] = array(
    'title' => 'Select content',
    'page callback' => 'usanetwork_consumptionator_post_blogs_autocomplete',
    'access arguments' => array('administer nodes'),
    'delivery callback' => 'drupal_deliver_html_page',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function usanetwork_consumptionator_post_block_info() {

  $blocks['usanetwork_cons_post_related'] = array(
    'info' => t('Blog Consumptionator: Related Content'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['usanetwork_cons_post_main'] = array(
    'info' => t('Blog Consumptionator: Main Block'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['usa_landing_blog_post_list_block'] = array(
    'info' => t('Usanetwork blog: List'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_node_view().
 */
function usanetwork_consumptionator_post_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'consumpt_post') {
    $node->content['#attached']['js'][] = drupal_get_path('theme', 'aurora_usa') . '/javascripts/consumptionator-right-rail.js';
    $node->content['#attached']['js'][] = drupal_get_path('theme', 'aurora_usa') . '/javascripts/consumptionator-sticky-share.js';
  }
}

/**
 * Implements hook_block_view().
 */
function usanetwork_consumptionator_post_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'usanetwork_cons_post_related':
      $block['subject'] = '';
      $block['content'] = _usanetwork_consumptionator_post_related_content_block();
      break;
    case 'usanetwork_cons_post_main':
      $block['subject'] = '';
      $block['content'] = _usanetwork_consumptionator_post_main_block();
      break;
    case 'usa_landing_blog_post_list_block':
      $block['subject'] = '';
      $block['content'] = _usanetwork_consumptionator_post_get_blog_posts_list_block();
      break;
  }
  return $block;
}

/**
 * Renders Block entity of related content items.
 */
function _usanetwork_consumptionator_post_related_content_block() {
  if (path_is_admin(current_path())) {
    return '';
  }
  $content = menu_get_object('node');

  if (!empty($content)) {
    $show_field = field_get_items('node', $content, 'field_show');

    $is_new_design = FALSE;
    if (!empty($show_field)) {
      $tv_show_node = node_load($show_field[0]['target_id']);

      $related_content = usanetwork_related_content_get_related_content_for_consumpt_page($content, $tv_show_node);
      $is_new_design = _usanetwork_tv_shows_is_new_design_entity('node', $tv_show_node);
    }
    else {
      $related_content = usanetwork_news_get_all_related_content_for_consumpt_page($content);
    }
    if (!empty($related_content)) {
      $block_of_items = usanetwork_tv_show_consumptionator_render_related_content_items_block($related_content, 0, 1, $is_new_design);

      $load_more_link = &drupal_static('load_more_link');
      $load_more_link = TRUE;
      return theme('usanetwork_tv_show_consumptionator_related_items_container', array(
        'related_items_block' => $block_of_items,
        'load_more_link' => $load_more_link,
        'show_nid' => (!empty($tv_show_node->nid)) ? $tv_show_node->nid : NULL,
        'items_pre_page_limit' => USA_CONSUMPTIONATOR_RELATED_ITEMS_ON_PAGE,
        'node_nid' => $content->nid,
        'new_design' => isset($is_new_design) ? $is_new_design : NULL,
      ));
    }
  }
}

/**
 * Renders main block for quiz landing page.
 */
function _usanetwork_consumptionator_post_main_block() {

  $node = menu_get_object('node');
  if (isset($node->type) && $node->type == 'consumpt_post') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if (!empty($node->field_show)) {
      $show_nid = $node_wrapper->field_show->nid->value();
    } elseif (!empty($node->field_multiple_movies)) {
      $movies = $node_wrapper->field_multiple_movies->value();
    }
    $blog_service = usanetwork_blog_migrate_get_post_service($node);
    $is_new_design = _usanetwork_tv_shows_is_new_design_entity('node', $node);

    $violator = NULL;
    $creating_date = !empty($node->field_promo_created_ovts) ? $node_wrapper->field_promo_created_ovts->value() : $node->created;
    $post_date = date('n/j/y', $creating_date);
    
    if (!empty($node->field_content_tags)) {
      $tags = $node_wrapper->field_content_tags->value();
      $tags_names = array();
      if ($is_new_design) {
        foreach ($tags as $tag) {
          $taxonomy_path = drupal_get_path_alias('taxonomy/term/' . $tag->tid);
          $tags_names[] = l($tag->name, 'node/' . $show_nid . '/' . $taxonomy_path);
        }
      } else {
        foreach ($tags as $tag) {
          $tags_names[] = $tag->name;
        }
      }
      $tags_names = implode(', ', $tags_names);
    }

    // Set violator.
    $original_link = $node_wrapper->field_post_original_link->value();
    if (!empty($original_link['url'])) {
      $violator = usanetwork_core_api_get_violator('node', $node->nid);
      if ($violator) {
        $violator = l($violator, $original_link['url'], array(
          'attributes' => array(
            'class' => 'violator-link show-color',
            'target' => '_blank'
          ),
          'html' => TRUE,
        ));
      }
    }

    // Set author name.
    if ($author = usanetwork_consumptionator_post_get_author('node', $node)) {
      $author = $author->name;
    }

    // Set original date
    $original_date = $node_wrapper->field_post_original_date->value();
    if ($original_date) {
      $date = new DateObject($original_date);
      $original_date = $date->format('F j, Y');
    }

    $navigation_links = _usanetwork_consumptionator_post_get_post_nav_links($node);
    $show_cover = $node_wrapper->field_post_cover_toggle->value();
    if (!empty($show_cover)) {
      if (!empty($node->field_post_cover)) {
        $image = $node_wrapper->field_post_cover->value();
      }
    }
    $body = !empty($node->body) ? $node_wrapper->body->value->value() : '';
    $share_description = $node_wrapper->field_usa_og_description->value();
    if (empty($share_description)) {
      $share_description = '';
    }
    $blog_nid = !empty($node->field_consumptionator_blog) ? $node_wrapper->field_consumptionator_blog->nid->value() : NULL;
    $theme_variables = array(
      'title' => !empty($node->title) ? $node->title : '',
      'sharebar' => usanetwork_menu_render_sharebar($node, 'node', t('Share'), $node->title , $share_description),
      'sticky_sharebar' => usanetwork_menu_render_sharebar($node, 'node', '', $node->title , $share_description, '',  'facebook, twitter, tumblr, share'),
      'navigation_links' => !empty($navigation_links) ? $navigation_links : array(),
      'creating_date' => $post_date,
      'original_publish_date' => $original_date,
      'image_desktop' => !empty($image['uri']) ? image_style_url('769x434', $image['uri']) : '',
      'tags' => !empty($tags_names) ? $tags_names : '',
      'body' => $body,
      'rendered_carousel' => isset($show_nid)
          ? _usanetwork_consumptionator_post_posts_carousel($show_nid, $blog_nid, $node->nid)
          : ((isset($movies))
            ? _usanetwork_consumptionator_post_posts_carousel(NULL, NULL, $node->nid, $movies)
            : _usanetwork_consumptionator_post_posts_carousel(NULL, $blog_nid, $node->nid)),
      'source' => !empty($node->field_post_source) ? $node_wrapper->field_post_source->value() : '',
      'gallery_rec' => !empty($node->field_gallery_recap)
          ? _usanetwork_consumptionator_post_gallery_recap(
              $node_wrapper->field_gallery_recap->nid->value(),
              !empty($node->field_gallery_recap_block_title) ? $node_wrapper->field_gallery_recap_block_title->value() : NULL)
          : '',
      'violator' => $violator,
      'author' => $author,
      'is_new_design' => $is_new_design ? TRUE : FALSE,
      'blog_service' => $blog_service,
    );
    return theme('usanetwork_cons_post_main', $theme_variables);
  }
  return '';
}

/**
 * Get all movie related content
 *
 * @return array
 */
function _usanetwork_consumptionator_post_movie_get_right_rail_elements() {
  $content_items = array();
  $node_filters = array(
    'fmovie.bundle' => array(
      'values' => array(
        'usanetwork_promo',
        'media_gallery',
        'person',
        'quiz',
        'catchall_page',
        'consumpt_post'),
      'operator' => 'IN',
    ),
  );

  // Pull nodes
  $nodes = _usanetwork_consumptionator_post_movie_pull_right_rail_nodes($node_filters);

  // Pull files
  $files = _usanetwork_consumptionator_post_movie_pull_right_rail_files();

  // Merge nodes and files
  if (!empty($nodes) && !empty($files)) {
    $content_items = array_merge($nodes, $files);
  }
  elseif (!empty($nodes)) {
    $content_items = $nodes;
  }
  elseif (!empty($files)) {
    $content_items = $files;
  }

  // Sort items according sorter alias
  usort($content_items, function ($a, $b) {
    if ($a->created == $b->created) {
      return 0;
    }
    else {
      if ($a->created > $b->created) {
        return -1;
      }
      return 1;
    }
  });

  return $content_items;
}

/*
 * Get movie related nodes
 */
function _usanetwork_consumptionator_post_movie_pull_right_rail_nodes($filters = array()) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', 'type', 'created', 'changed'));
  $query->condition('n.status', 1);
  // Add aliases for saving compatibility
  $query->addField('n', 'nid', 'entity_id');
  $query->addField('n', 'type', 'bundle');
  $query->leftJoin('field_data_field_movie', 'movie_field', 'movie_field.entity_id=n.nid');
  $query->leftJoin('field_data_field_multiple_movies', 'movies_field', 'movies_field.entity_id=n.nid');
  $query->condition(
    db_or()
      ->isNotNull('movie_field.field_movie_target_id')
      ->isNotNull('movies_field.field_multiple_movies_target_id')
  );
  $query->distinct();
  // Join associated videos
  $query->leftJoin('field_data_field_promo_assoc_video', 'assoc_videos_field', 'assoc_videos_field.entity_id=n.nid');
  $query->addField('assoc_videos_field', 'field_promo_assoc_video_target_id', 'assoc_fid');
  // Join duration field
  $query->leftJoin('field_data_field_mpx_duration', 'duration_field', 'duration_field.entity_id=assoc_videos_field.field_promo_assoc_video_target_id');
  $query->addField('duration_field', 'field_mpx_duration_value', 'promo_duration');
  // Join promo topic
  $query->leftJoin('field_data_field_promo_topic', 'promo_topic_field', 'promo_topic_field.entity_id=n.nid');
  $query->addField('promo_topic_field', 'field_promo_topic_value', 'promo_topic');
  // Join promo violator
  $query->leftJoin('field_data_field_promo_violator_name', 'promo_violator_name_field', 'promo_violator_name_field.entity_id=n.nid');
  $query->addField('promo_violator_name_field', 'field_promo_violator_name_value', 'promo_violator');
  // Join promo title
  $query->leftJoin('field_data_field_promo_title', 'promo_title_field', 'promo_title_field.entity_id=n.nid');
  $query->addField('promo_title_field', 'field_promo_title_value', 'promo_title');
  // Join promo description
  $query->leftJoin('field_data_field_promo_long_description', 'promo_description_field', 'promo_description_field.entity_id=n.nid');
  $query->addField('promo_description_field', 'field_promo_long_description_value', 'promo_description');
  // Join promo CTA text
  $query->leftJoin('field_data_field_promo_call_to_action_text', 'promo_cta_field', 'promo_cta_field.entity_id=n.nid');
  $query->addField('promo_cta_field', 'field_promo_call_to_action_text_value', 'promo_cta');
  // Join promo link
  $query->leftJoin('field_data_field_promo_link', 'promo_link_field', 'promo_link_field.entity_id=n.nid');
  $query->addField('promo_link_field', 'field_promo_link_url', 'promo_link');
  // Join excluding from related content
  $query->leftJoin('field_data_field_promo_exclude_from_related', 'promo_exclude_field', 'promo_exclude_field.entity_id=n.nid');
  $query->condition(
    db_or()
      ->condition('promo_exclude_field.field_promo_exclude_from_related_value', NULL)
      ->condition('promo_exclude_field.field_promo_exclude_from_related_value', 0)
  );
  // Join promo "created date" overriding
  $query->leftJoin('field_data_field_promo_created_ovts', 'promo_created_ovts_field', 'promo_created_ovts_field.entity_id=n.nid');
  $query->addField('promo_created_ovts_field', 'field_promo_created_ovts_value', 'created_ovts');

  $query->orderBy('changed', 'DESC');

  if (!empty($filters)) {
    foreach ($filters as $filter_field_name => $filter_value) {
      if ($filter_field_name == 'fmovie.bundle') {
        $filter_field_name = 'n.type';
      }

      $values = !empty($filter_value['values']) ? $filter_value['values'] : NULL;

      if (!empty($values)) {
        $operator = !empty($filter_value['operator'])
          ? $filter_value['operator']
          : (is_array($values)
            ? 'IN'
            : '='
          );

        if (is_array($values) && count($values) == 1) {
          $values = reset($values);
          $operator = '=';
        }

        $query->condition($filter_field_name, $values, $operator);
      }
    }
  }

  $result = $query->execute()->fetchAll();

  if (!empty($result)) {
    foreach ($result as &$result_item) {
      if (!empty($result_item->created_ovts)) {
        $result_item->created = $result_item->created_ovts;
      }
      unset($result_item->created_ovts);
      if (empty($result_item->promo_title) || empty($result_item->promo_description)) {
        $own_promo_lines = _usanetwork_promo_node_get_promo_lines(node_load($result_item->nid));
        $result_item->promo_title = !empty($result_item->promo_title) ? $result_item->promo_title
          : (!empty($own_promo_lines['title']) ? $own_promo_lines['title'] : '');
        $result_item->promo_description = !empty($result_item->promo_description) ? $result_item->promo_description
          : (!empty($own_promo_lines['description']) ? $own_promo_lines['description'] : '');
        $result_item->entity_type = 'node';
      }
    }
  }

  return $result;
}

/*
 * Get movie related files
 */
function _usanetwork_consumptionator_post_movie_pull_right_rail_files() {
  $query = db_select('mpx_video', 'mv');
  $query->fields('mv', array('title'));
  $query->condition('mv.status', 1);
  $query->join('file_managed', 'f', 'mv.fid=f.fid');
  $query->fields('f', array('type','created', 'timestamp'));
  $query->addField('f', 'fid', 'entity_id');
  $query->addField('f', 'type', 'bundle');
  $query->leftJoin('field_data_field_movie', 'movie_field', 'movie_field.entity_id=f.fid');
  $query->isNotNull('movie_field.field_movie_target_id');
  $query->leftJoin('field_data_field_promo_exclude_from_related', 'fp_exclude', 'fp_exclude.entity_id=f.fid');
  $query->leftJoin('field_data_field_promo_created_ovts', 'fnp_created', 'fnp_created.entity_id=f.fid');
  $query->addField('fnp_created', 'field_promo_created_ovts_value', 'created_ovts');
  // Attach promo topic
  $query->leftJoin('field_data_field_promo_topic', 'fnp_topic', 'fnp_topic.entity_id=f.fid');
  $query->addField('fnp_topic', 'field_promo_topic_value', 'promo_topic');
  // Attach promo violator
  $query->leftJoin('field_data_field_promo_violator_name', 'fnp_violator', 'fnp_violator.entity_id=f.fid');
  $query->addField('fnp_violator', 'field_promo_violator_name_value', 'promo_violator');
  // Attach promo title
  $query->leftJoin('field_data_field_promo_title', 'fnp_title', 'fnp_title.entity_id=f.fid');
  $query->addField('fnp_title', 'field_promo_title_value', 'promo_title');
  // Attach promo description
  $query->leftJoin('field_data_field_promo_long_description', 'fnp_description', 'fnp_description.entity_id=f.fid');
  $query->addField('fnp_description', 'field_promo_long_description_value', 'promo_description');
  // Attach promo call to action
  $query->leftJoin('field_data_field_promo_call_to_action_text', 'fnp_cta', 'fnp_cta.entity_id=f.fid');
  $query->addField('fnp_cta', 'field_promo_call_to_action_text_value', 'promo_cta');

  $query->condition(
    db_or()->condition('fp_exclude.field_promo_exclude_from_related_value', NULL)
      ->condition('fp_exclude.field_promo_exclude_from_related_value', 0)
  );

   $query->orderBy('timestamp', 'DESC');

  if (!empty($filters)) {
    foreach ($filters as $filter_field_name => $filter_value) {
      $values = !empty($filter_value['values']) ? $filter_value['values'] : NULL;

      if (!empty($values)) {
        $operator = !empty($filter_value['operator'])
          ? $filter_value['operator']
          : (is_array($values)
            ? 'IN'
            : '='
          );

        $query->condition($filter_field_name, $values, $operator);
      }
    }
  }

  $result = $query->execute()->fetchAll();

  if (!empty($result)) {
    foreach ($result as &$result_item) {
      if (!empty($result_item->created_ovts)) {
        $result_item->created = $result_item->created_ovts;
      }
      unset($result_item->created_ovts);
      if (empty($result_item->promo_title) || empty($result_item->promo_description) || empty($result_item->promo_topic)) {
        $own_promo_lines = _usanetwork_promo_file_get_promo_lines(file_load($result_item->entity_id));
        $result_item->promo_title = !empty($result_item->promo_title) ? $result_item->promo_title
          : (!empty($own_promo_lines['title']) ? $own_promo_lines['title'] : '');
        $result_item->promo_description = !empty($result_item->promo_description) ? $result_item->promo_description
          : (!empty($own_promo_lines['description']) ? $own_promo_lines['description'] : '');
        $result_item->promo_topic = !empty($result_item->promo_topic) ? $result_item->promo_topic
          : (!empty($own_promo_lines['topic']) ? $own_promo_lines['topic'] : '');
        $result_item->entity_type = 'file';
      }
    }
  }

  return $result;
}

/*
 * Get latest posts
 */
function _usanetwork_consumptionator_post_get_posts($show_id = NULL, $blog_nid = NULL, $limit = 10, $exclude_verge = FALSE) {
  $query = db_select('node', 'node');
  $query->fields('node', array('nid', 'title', 'type'));
  $query->condition('node.type', 'consumpt_post');
  $query->condition('node.status', NODE_PUBLISHED);
  if (is_numeric($show_id)) {
    $query->leftJoin('field_data_field_show', 'field_show', 'field_show.entity_id = node.nid');
    $query->condition('field_show.field_show_target_id', $show_id);
    if (!empty($blog_nid)) {
      $query->join('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=node.nid');
      $query->condition('field_consumptionator_blog.field_consumptionator_blog_target_id', $blog_nid);
    }
    else {
      $query->leftJoin('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=node.nid');
      $query->isNull('field_consumptionator_blog.field_consumptionator_blog_target_id');
    }
  }
  if ($exclude_verge) {
    $query->leftJoin('field_data_field_content_tags', 'tags_field', 'tags_field.entity_id=node.nid');
    $query->condition(db_or()
      ->isNull('tags_field.field_content_tags_tid')
      ->condition('tags_field.field_content_tags_tid', variable_get('usanetwork_blog_migrate_the_verge_taxonomy_term_tid', FALSE), '!=')
    );
  }
  $query->leftJoin('field_data_field_promo_created_ovts', 'ovts', 'ovts.entity_id = node.nid');
  $query->addExpression('IF(ovts.field_promo_created_ovts_value is NULL, node.created, ovts.field_promo_created_ovts_value)', 'created');
  $query->orderBy('created', 'DESC');
  $query->range(0, $limit);

  $result = $query->execute()->fetchAll();

  return $result;
}


/*
 * Renders posts carousel for blog.
*/
function _usanetwork_consumptionator_post_posts_carousel($show_id = NULL, $blog_nid = NULL, $post_id = NULL, $movie = NULL) {
  if (is_null($movie)) {
    $result = _usanetwork_consumptionator_post_get_posts($show_id, $blog_nid);
  } else {
    $result = _usanetwork_consumptionator_post_movie_get_right_rail_elements();
  }
  if (isset($result)) {
    $is_new_design = FALSE;
    if (is_numeric($show_id)) {
      $show_node = node_load($show_id);
      if (!empty($blog_nid)) {
        $blog_node = node_load($blog_nid);
        $show_blog_title = $blog_node->title;
      }
      else {
        $show_blog_title = _usanetwork_get_field_item('node', $show_node, 'field_show_blog_title', 'value');
      }
      $is_new_design = _usanetwork_tv_shows_is_new_design_entity('node', $show_node);
      if ($show_blog_title) {
        module_load_include('inc', 'pathauto', 'pathauto');
        $blog_url = '/' . pathauto_cleanstring($show_blog_title);
      }
      else {
        $blog_url = '';
      }
    }

    $rendered_items = array();
    foreach ($result as &$post) {
      if (!isset($post->entity_type)) {
        $post->entity_type = 'node';
        $post->entity_id = $post->nid;
      }
      $entity = entity_load($post->entity_type, array($post->entity_id));
      if (is_array($entity)) {
        $entity = $entity[$post->entity_id];
      }
      if (!empty($entity->field_promo_image_override)) {
        $content_image = _usanetwork_get_field_item($post->entity_type, $entity, 'field_promo_image_override', 'uri');
      }
      else {
        $content_image = usanetwork_core_api_get_content_image($post->entity_type, $entity);
      }

      $episode_variables = array(
        'title' => !empty($post->title) ? $post->title : '',
        'additional' => t('Posted on @date', array('@date' =>date('n/j/y', $post->created))),
        'url' => ($post->entity_type == 'node') ? url('node/' . $post->entity_id) : url('file/' . $post->entity_id),
        'active' => ($post_id == $post->entity_id) ? TRUE : FALSE,
        'icon_type' => usanetwork_core_api_get_media_icon($post->entity_type, $post->entity_id),
      );
      $episode_variables['new_design'] = !empty($is_new_design) ? $is_new_design : NULL;
      $episode_variables['image'] = !empty($content_image) ? image_style_url('full_episodes_633x356', $content_image) : '';
      $episode_variables['image_mobile'] = !empty($content_image) ? image_style_url('111x74', $content_image) : '';
      $rendered_items['carousel'][] = theme('usanetwork_cons_post_carousel_item', $episode_variables);
    }

    $advert_block = module_invoke('mps', 'block_view', 'topbox');
    if (!empty($advert_block['content'])) {
      $advert = render($advert_block['content']);
    }

    $theme_variables = array(
      'posts' => !empty($rendered_items) ? $rendered_items : array(),
      'advert_block' => isset($advert) ? $advert : NULL,
      'block_title' => (is_numeric($show_id))
        ? (($is_new_design)
          ? t('Latest Articles')
          : ((!empty($show_blog_title)
            ? $show_blog_title
            : t('@show_name blog', array('@show_name' => $show_node->title)))))
        : ((is_null($movie)) ? t('Latest News') : t('Movies')),
      'posts_landing_link' => (is_numeric($show_id))
        ? l((($is_new_design) ? t('View all Articles <span class="show-color show-font"></span>') : t('View all posts')), 'node/' . $show_id . '/blog' . $blog_url, array('html' => TRUE))
        : ((is_null($movie)) ? l(t('View all news'), 'news') : l(t('View all movie'), 'movies')),
      'new_design' => !empty($is_new_design) ? $is_new_design : NULL,
    );
    return theme('usanetwork_cons_post_carousel', $theme_variables);
  }
  return '';
}

/*
 * Renders usanetwork_episodes_gallery_recap block.
*/
function _usanetwork_consumptionator_post_gallery_recap($gallery_id, $block_title = NULL) {

  if (is_numeric($gallery_id)) {
    $gallery_html = _usanetwork_media_gallery_consumptionator_gallery_slides_block(node_load($gallery_id), FALSE, FALSE);
    $theme_variables = array(
      'gallery_html' => !empty($gallery_html) ? $gallery_html : '',
      'block_title' => !empty($block_title) ? $block_title : t('Gallery Recap'),
    );

    return theme('usanetwork_cons_post_gallery_rec', $theme_variables);
  }
  return '';
}


function usanetwork_consumptionator_post_blank_page() {
  return '';
}

function _usanetwork_consumptionator_post_get_blog_posts_list_block($node = NULL, $offset = 0, $show_ad = FALSE, $ajax_load = FALSE, $tag_id = NULL) {
  if (path_is_admin(current_path())) {
    return '';
  }

  if ($node === NULL) {
    $node = menu_get_object();
  }

  if (empty($node) || (!empty($node) && isset($node->type) && $node->type != 'tv_show' && $node->type != 'consumpt_blog')) {
    return '';
  }
  switch ($node->type) {
    case 'tv_show':
      $show_id = $node->nid;
      $blog_id = NULL;
      $show_title = $node->title;
      $blog_title = usanetwork_consumptionator_post_get_blog_title($node);
      if ($tag_id === NULL) {
        $tag_name = arg(3);
        if ($tag_name && (arg(2) == 'tag') ) {
          $tag_alias = arg(2).'/'.arg(3);
          $tag_path = drupal_get_normal_path($tag_alias);
          $tag = menu_get_object('taxonomy_term', 2, $tag_path);
          $tag_id = !empty($tag) ? $tag->tid : NULL;
        }
      }
      break;
    case 'consumpt_blog':
      if (empty($node->field_show)) {
        return '';
      }
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $show_id = $node_wrapper->field_show->nid->value();
      $blog_id = $node->nid;
      $show_title = $node_wrapper->field_show->title->value();
      $blog_title = $node->title;
      break;
    default:
      return '';
  }

  $is_new_design = _usanetwork_tv_shows_is_new_design_entity('node', $node);

  $theme_variables = array(
    'items' => array(),
    'ad' => $show_ad,
    'ad_id' => $offset,
    'title' => NULL,
    'filters' => array(),
    'node_nid' => $node->nid,
    'ajax_load' => $ajax_load,
    'load_more_link' => !$ajax_load,
    'is_new_design' => $is_new_design,
    'tag_tid' => $tag_id,
  );

  $theme_variables['title'] = $blog_title;

  if ($is_new_design) {
    $post_tags = _usanetwork_posts_get_posts_tags($node->nid);
    if ($post_tags) {
      if ($blog_title) {
        module_load_include('inc', 'pathauto', 'pathauto');
        $blog_url = '/' . pathauto_cleanstring($blog_title);
      } else {
        $blog_url = '';
      }
      $theme_variables['filters']['all'] = array(
        'title' => t('All Articles'),
        'url' => url('node/' . $node->nid . '/blog' . $blog_url),
        'active' => (empty($tag_id)) ? TRUE : FALSE,
      );
      $post_tid_verge = variable_get('usanetwork_blog_migrate_the_verge_taxonomy_term_tid', NULL);
      if ($post_tid_verge) {
        $post_tag = taxonomy_term_load($post_tid_verge);
        $taxonomy_path = drupal_get_path_alias('taxonomy/term/' . $post_tid_verge);
        $tag_title = t('Featured From @term_name', array('@term_name' => $post_tag->name));
        $theme_variables['filters'][$post_tid_verge] = array(
          'title' => $tag_title,
          'url' => url('node/' . $node->nid . '/' . $taxonomy_path),
          'active' => ($tag_id == $post_tid_verge) ? TRUE : FALSE,
        );
        if ($tag_id == $post_tid_verge) {
          $theme_variables['title'] = $tag_title;
          $theme_variables['active_filter_title'] = $theme_variables['title'];
        }
      }
    }
    if (empty($tag_id)) {
      $theme_variables['title'] = t('All Articles');
      $theme_variables['active_filter_title'] = $theme_variables['title'];
    }
  }

  $posts_data = _usanetwork_consumptionator_post_get_posts_data($show_id, $blog_id, $offset, $tag_id);
  if (!empty($posts_data)) {
    if (count($posts_data) < USANETWORK_CONSUMPTIONATOR_POST_AMOUNT_OF_POSTS) {
      $theme_variables['load_more_link'] = FALSE;
    }
    foreach ($posts_data as $post_data_index => $post_data) {
      $cover_file = entity_load('file', array($post_data->post_cover_fid));
      if (!empty($cover_file)) {
        $cover_file = reset($cover_file);
        $cover_uri = $cover_file->uri;
      }
      $theme_item_variables = array(
        'blog_url' => isset($post_data->nid)
          ? url('node/' . $post_data->nid)
          : NULL,
        'desktop_image_url' => image_style_url('677x381', $cover_uri),
        'title' => $post_data->title,
        'description' => check_markup($post_data->description, 'wysiwyg_mini'),
        'post_date' => !empty($post_data->sorted_time)
          ? gmdate('m/d/Y', $post_data->sorted_time)
          : NULL,
        'tags' => $post_data->tags,
        'active' => (!$ajax_load && $post_data_index == 0) ? TRUE : FALSE,
        'new_design' => $is_new_design,
        'violator' => $post_data->violator,
      );

      $theme_variables['items'][] = theme('usanetwork_blog_landing_posts_list_item', $theme_item_variables);
    }
  }

  drupal_add_js(drupal_get_path('module', 'usanetwork_tv_shows') . '/js/usanetwork_tv_shows_related_items_loader.js');
  drupal_add_js(drupal_get_path('module', 'usanetwork_consumptionator_post') . '/js/usanetwork_blog_posts.autoloader.js');

  $title = $blog_title . ' | Blog | ' . $show_title;
  drupal_set_title($title);

  return !empty($theme_variables['items'])
    ? theme('usanetwork_blog_landing_posts', $theme_variables)
    : '';
}

/*
 * Helper function for getting list of tags for posts by show
 */
function _usanetwork_posts_get_posts_tags($show_nid){
  $query = db_select('node', 'n');
  $query->condition('n.type', 'consumpt_post');
  $query->condition('n.status', NODE_PUBLISHED);
  $query->join('field_data_field_show', 'show_field', 'show_field.entity_id=n.nid');
  $query->condition('show_field.field_show_target_id', $show_nid);
  $query->join('field_data_field_content_tags', 'tags_field', 'tags_field.entity_id=n.nid');
  $query->addField('tags_field', 'field_content_tags_tid', 'tag_tid');
  $query->leftJoin('taxonomy_term_data', 'term', 'term.tid=tags_field.field_content_tags_tid');
  $query->addField('term', 'name', 'tag_name');
  $query->groupBy('tag_tid');
  $result = $query->execute()->fetchall();

  return $result;
}

function _usanetwork_consumptionator_post_get_posts_data($show_nid, $blog_nid = NULL, $offset = 0, $tag = NULL) {
  $cache_blog_id = !empty($blog_nid) ? $blog_nid : $show_nid;
  if (!empty($tag)) {
    $cache_name = 'blog_landing_page_' . $cache_blog_id . '_' . $offset . '_' . $tag;
  } else {
    $cache_name = 'blog_landing_page_' . $cache_blog_id . '_' . $offset;
  }
  $cache = cache_get($cache_name);
  if (empty($cache)) {
    $query = db_select('node', 'cp');
    $query->fields('cp', array('nid', 'title'));
    $query->join('field_data_field_show', 'show_field', 'show_field.entity_id=cp.nid');
    $query->addField('show_field', 'field_show_target_id', 'show_nid');
    $query->leftJoin('field_data_body', 'body_field', 'body_field.entity_id=cp.nid');
    $query->addExpression('MAX(body_field.body_value)', 'body');
    $query->leftJoin('field_data_field_summary', 'field_summary', 'field_summary.entity_id=cp.nid');
    $query->addExpression('MAX(field_summary.field_summary_value)', 'summary');
    $query->leftJoin('field_data_field_post_cover', 'post_cover', 'post_cover.entity_id=cp.nid');
    $query->addExpression('MAX(post_cover.field_post_cover_fid)', 'post_cover_fid');
    $query->leftJoin('field_data_field_content_tags', 'tags_field', 'tags_field.entity_id=cp.nid');
    $query->addExpression('MAX(tags_field.field_content_tags_tid)', 'tag_tid');
    $query->leftJoin('field_data_field_promo_violator_name', 'field_violator', 'field_violator.entity_id=cp.nid');
    $query->addExpression('MAX(field_violator.field_promo_violator_name_value)', 'violator');
    $query->leftJoin('taxonomy_term_data', 'term', 'term.tid=tags_field.field_content_tags_tid');
    $query->leftJoin('field_data_field_promo_created_ovts', 'post_covts', 'post_covts.entity_id=cp.nid');
    $query->addExpression('MAX(post_covts.field_promo_created_ovts_value)', 'created');
    $query->condition('cp.type', 'consumpt_post');
    $query->condition('cp.status', NODE_PUBLISHED);
    $query->condition('show_field.field_show_target_id', $show_nid);
    if (!empty($blog_nid)) {
      $query->join('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=cp.nid');
      $query->condition('field_consumptionator_blog.field_consumptionator_blog_target_id', $blog_nid);
    }
    else {
      $query->leftJoin('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=cp.nid');
      $query->isNull('field_consumptionator_blog.field_consumptionator_blog_target_id');
    }
    if (!empty($tag)) {
      $query->condition('tags_field.field_content_tags_tid', $tag);
    }
    $query->groupBy('cp.nid');
    $query->addExpression("GROUP_CONCAT(term.name SEPARATOR ', ')", 'tags');
    $query->addExpression("GROUP_CONCAT(term.tid SEPARATOR ',')", 'tids');
    $query->addExpression('IF(MAX(post_covts.field_promo_created_ovts_value) is NULL, cp.created, MAX(post_covts.field_promo_created_ovts_value))', 'sorted_time');
    $query->orderBy('sorted_time', 'DESC');
    $query->range($offset * USANETWORK_CONSUMPTIONATOR_POST_AMOUNT_OF_POSTS, USANETWORK_CONSUMPTIONATOR_POST_AMOUNT_OF_POSTS);
    $result = $query->execute()->fetchAll();

    if ($result) {
      foreach ($result as &$result_item) {
        $result_item->description = _usanetwork_consumptionator_post_get_season_episodes_description($result_item);
        if (($tid = variable_get('usanetwork_blog_migrate_the_verge_taxonomy_term_tid', FALSE)) && !empty($result_item->tids)) {
          $result_item->tids = explode(',', $result_item->tids);
          if (in_array($tid, $result_item->tids)) {
            $result_item->violator = usanetwork_core_api_prepare_blog_service_violator($result_item->violator, 'verge');
          }
        }
      }
    }
    cache_set($cache_name, $result, 'cache', time() + 900);
  }
  else {
    $result = $cache->data;
  }
  return $result;
}

function usanetwork_consumptionator_post_get_blog_title($tv_show_node) {
  $blog_title = _usanetwork_get_field_item('node', $tv_show_node, 'field_show_blog_title', 'value');
  if ($blog_title) {
    return $blog_title;
  } else {
    return $tv_show_node->title . ' blog';
  }
}

function _usanetwork_consumptionator_post_get_posts_count($show_nid, $blog_nid = NULL, $tag = NULL) {
  $query = db_select('node', 'cp');
  $query->join('field_data_field_show', 'show_field', 'show_field.entity_id=cp.nid');
  $query->condition('cp.type', 'consumpt_post');
  $query->condition('cp.status', NODE_PUBLISHED);
  $query->condition('show_field.field_show_target_id', $show_nid);
  if (!empty($blog_nid)) {
    $query->join('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=cp.nid');
    $query->condition('field_consumptionator_blog.field_consumptionator_blog_target_id', $blog_nid);
  }
  else {
    $query->leftJoin('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=cp.nid');
    $query->isNull('field_consumptionator_blog.field_consumptionator_blog_target_id');
  }
  if (!empty($tag)) {
    $query->leftJoin('field_data_field_content_tags', 'field_content_tags', 'field_content_tags.entity_id=cp.nid');
    $query->condition('field_content_tags.field_content_tags_tid', $tag);
  }
  $query->addExpression("COUNT(*)", 'count');
  $result = $query->execute()->fetchObject();
  return $result->count;
}
/**
 * Picks correct description for TV Episode item of Episodes landing page.
 * @param $result_item
 * @return string
 */
function _usanetwork_consumptionator_post_get_season_episodes_description($result_item) {
  if (!empty($result_item->summary)) {
    return $result_item->summary;
  }
  if (!empty($result_item->body)) {
    if (stripos($result_item->body, '<p>') === FALSE) {
      return truncate_utf8($result_item->body, USANETWORK_CONSUMPTIONATOR_POST_DESCRIPTION_LENGTH, TRUE, TRUE);
    }
    else {
      $matches = array();

      if (preg_match("#<p[^>]*>(.*)</p>#isU", $result_item->body, $matches)) {
        return '<p>' . truncate_utf8($matches[1], USANETWORK_CONSUMPTIONATOR_POST_DESCRIPTION_LENGTH, TRUE, TRUE) . '</p>';
      }
    }
  }

  return '';
}

function usanetwork_consumptionator_post_blog_get_posts_ajax($node, $offset, $tag = NULL) {
  if (is_object($node)) {
    $response = array(
      'found' => FALSE,
      'total' => 0,
      'overlimited' => FALSE,
      'rendered' => '',
    );
    switch ($node->type) {
      case 'tv_show':
        $show_id = $node->nid;
        $blog_id = NULL;
        break;
      case 'consumpt_blog':
        if (empty($node->field_show)) {
          return '';
        }
        $show_field = field_get_items('node', $node, 'field_show');
        $show_field = reset($show_field);
        $show_id = $show_field['target_id'];
        $blog_id = $node->nid;
        break;
      default:
        return '';
    }
    $count = _usanetwork_consumptionator_post_get_posts_count($show_id, $blog_id, $tag);
    $block = _usanetwork_consumptionator_post_get_blog_posts_list_block($node, $offset, TRUE, TRUE, $tag);
  }
  else {
    $response = array(
      'found' => FALSE,
      'total' => 0,
      'overlimited' => FALSE,
      'rendered' => '',
    );
    $count = usanetwork_news_landing_get_posts($offset, TRUE, TRUE, TRUE, TRUE);
    $block = usanetwork_news_landing_get_posts($offset, TRUE, TRUE, TRUE);
  }
  $response['found'] = TRUE;
  $response['rendered'] = $block;
  $response['total'] = !empty($block) ? 1 : 0;

  $last_element_index = $offset * USANETWORK_CONSUMPTIONATOR_POST_AMOUNT_OF_POSTS + USANETWORK_CONSUMPTIONATOR_POST_AMOUNT_OF_POSTS;
  if ($last_element_index >= $count) {
    $response['overlimited'] = TRUE;
  }

  return drupal_json_output($response);
}

function _usanetwork_consumptionator_post_get_post_nav_links($post_node) {
  $node_wrapper = entity_metadata_wrapper('node', $post_node);
  if (!empty($post_node->field_show)) {
    $show_id = $node_wrapper->field_show->nid->value();
    $blog_nid = !empty($post_node->field_consumptionator_blog) ? $node_wrapper->field_consumptionator_blog->nid->value() : NULL;
    $post_creating_date = !empty($post_node->field_promo_created_ovts) ? $node_wrapper->field_promo_created_ovts->value() : $post_node->created;
    $nav_links = array();
    $query = db_select('node', 'node');
    $query->condition('node.status', NODE_PUBLISHED);
    $query->fields('node', array('nid'));
    $query->innerJoin('field_data_field_show', 'field_show', 'field_show.entity_id = node.nid');
    $query->leftJoin('field_data_field_promo_created_ovts', 'ovts', 'ovts.entity_id = node.nid');
    $query->addExpression('IF(ovts.field_promo_created_ovts_value is NULL, node.created, ovts.field_promo_created_ovts_value)', 'sorted_time');
    $query->condition('field_show.field_show_target_id', $show_id);
    if (!empty($blog_nid)) {
      $query->join('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=node.nid');
      $query->condition('field_consumptionator_blog.field_consumptionator_blog_target_id', $blog_nid);
    }
    else {
      $query->leftJoin('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=node.nid');
      $query->isNull('field_consumptionator_blog.field_consumptionator_blog_target_id');
    }
    $query->condition('node.type', 'consumpt_post');
    $query->havingCondition('sorted_time', $post_creating_date, '<');
    $query->orderBy('sorted_time', 'DESC');
    $query->range(0, 1);
    $result = $query->execute()->fetchAssoc();
    if (!empty($result)) {
      $nav_links['previous'] = l(t('Previous post'), 'node/' . $result['nid'],  array('attributes' => array('class' => array('episode-change-link', 'previous'))));
    }
    $query = db_select('node', 'node');
    $query->condition('node.status', NODE_PUBLISHED);
    $query->fields('node', array('nid'));
    $query->innerJoin('field_data_field_show', 'field_show', 'field_show.entity_id = node.nid');
    $query->leftJoin('field_data_field_promo_created_ovts', 'ovts', 'ovts.entity_id = node.nid');
    $query->addExpression('IF(ovts.field_promo_created_ovts_value is NULL, node.created, ovts.field_promo_created_ovts_value)', 'sorted_time');
    $query->condition('field_show.field_show_target_id', $show_id);
    if (!empty($blog_nid)) {
      $query->join('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=node.nid');
      $query->condition('field_consumptionator_blog.field_consumptionator_blog_target_id', $blog_nid);
    }
    else {
      $query->leftJoin('field_data_field_consumptionator_blog', 'field_consumptionator_blog', 'field_consumptionator_blog.entity_id=node.nid');
      $query->isNull('field_consumptionator_blog.field_consumptionator_blog_target_id');
    }
    $query->havingCondition('sorted_time', $post_creating_date, '>');
    $query->orderBy('sorted_time', 'ASC');
    $query->condition('node.type', 'consumpt_post');
    $query->range(0, 1);
    $result = $query->execute()->fetchAssoc();
    if (!empty($result)) {
      $nav_links['next'] = l(t('Next post'), 'node/' . $result['nid'],  array('attributes' => array('class' => array('episode-change-link', 'next'))));
    }
    return $nav_links;
  }
  return array();
}

/**
 *  Implements hook_usa_omniture_alter().
 */
function usanetwork_consumptionator_post_usa_omniture_alter(&$omniture_variables, $context) {
  if (!empty($context['menu_item']['path']) && !empty($context['entity']->title)) {
    $matches = array();

    if (!empty($context['entity']) && $context['entity']->type == 'tv_show') {
      $blog_name = usanetwork_consumptionator_post_get_blog_title($context['entity']);
      $omniture_show_variables = _usanetwork_ads_entity_settings($context['entity'], 'node');
      $omniture_show_variables = $omniture_show_variables['omniture']['variables'];
      foreach ($omniture_show_variables as $variable) {
        if ($variable['key'] == 's.prop2') {
          $content_group = $variable['value'];
        }
      }
      if (preg_match("/^node\/([\%\d])\/(blog)$/", $context['menu_item']['path'], $matches)) {
        $blog_omniture_variables = array(
          's.prop2' => $content_group,
          's.prop3' => t('Blog'),
          's.prop4' => t('!show_name : !blog_name', array(
            '!show_name' => $context['entity']->title,
            '!blog_name' => $blog_name,
          )),
          's.prop10' => t('!show_name', array(
            '!show_name' => $context['entity']->title
          )),
        );

        $omniture_variables = array_merge($omniture_variables, $blog_omniture_variables);
      }
    }
  }

  if (!empty($context['entity']) && $context['entity']->type == 'consumpt_post') {
    $show_field = _usanetwork_get_field_item('node', $context['entity'], 'field_show', 'target_id');
    if ($show_field) {
      $show = node_load($show_field);
      $blog_name = usanetwork_consumptionator_post_get_blog_title($show);
      $omniture_show_variables = _usanetwork_ads_entity_settings($show, 'node');
      $omniture_show_variables = $omniture_show_variables['omniture']['variables'];
      foreach ($omniture_show_variables as $variable) {
        if ($variable['key'] == 's.prop2') {
          $content_group = $variable['value'];
        }
      }
      $post_omniture_variables = array(
        's.prop2' => $content_group,
        's.prop3' => t('Blog'),
        's.prop4' => t('!show_name : !blog_name', array(
          '!show_name' => $show->title,
          '!blog_name' => $blog_name,
        )),
        's.prop5' => t('!show_name : !blog_name : !post_title', array(
          '!show_name' => $show->title,
          '!blog_name' => $blog_name,
          '!post_title' => $context['entity']->title,
        )),
        's.prop10' => t('!show_name', array(
          '!show_name' => $show->title
        )),
      );
      $omniture_variables = array_merge($omniture_variables, $post_omniture_variables);
    }
  }
}
/**
 * AJAX callback function that populates the "season" entity reference field
 * with seasons for the user specifid show.
 *
 * @see usanetwork_tv_shows_form_tv_episode_node_form_alter()
 */
function usanetwork_consumptionator_post_option_populate_js($form, $form_state) {
  return $form['field_consumptionator_blog'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 * this is a straight rip from pub_tv old relations fields
 */
function usanetwork_consumptionator_post_form_consumpt_post_node_form_alter(&$form, &$form_state) {

  // Add AJAX handling to the the show field so that users only see seasons for
  // the selected show.
  $form['field_show'][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'usanetwork_consumptionator_post_option_populate_js',
    'wrapper' => 'season-wrapper',
    'effect' => 'fade',
  );
  $form['field_show'][LANGUAGE_NONE]['#prefix'] = '<div id="show-wrapper">';
  $form['field_show'][LANGUAGE_NONE]['#suffix'] = '</div>';

  // Hide the seasons field until the user has selected a show.
  $form['field_consumptionator_blog'][LANGUAGE_NONE]['#states'] = array(
    'disabled' => array(
      ':input[name="field_show[' . LANGUAGE_NONE . ']"]' => array(
        'value' => '_none',
      ),
    ),
  );

  $form['field_consumptionator_blog'][LANGUAGE_NONE]['#description'] = t('You must select a TV Show before selecting a blog.');
  $form['field_consumptionator_blog'][LANGUAGE_NONE]['#prefix'] = '<div id="season-wrapper">';
  $form['field_consumptionator_blog'][LANGUAGE_NONE]['#suffix'] = '</div>';


  // Check if a value for show has already been provided.
  $selected_show = '';
  if (isset($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (isset($form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'];
  }

  // If a value for show has already been provided, reset the form accordingly.
  if (!empty($selected_show)) {
    // Get the list of seasons based on the user-entered show value.
    $query = new EntityFieldQuery('entity_type', 'node');
    $query->entityCondition('bundle', 'consumpt_blog');
    $query->fieldCondition('field_show', 'target_id', $selected_show);
    $result = $query->execute();

    // If the first element of the options aray is "- Select -" (et. al.) then
    // add it to the beginning of our new options array.
    $keys = array_keys($form['field_consumptionator_blog'][LANGUAGE_NONE]['#options']);
    if (!is_null($keys[0]) && !is_numeric($keys[0])) {
      $options = array_slice($form['field_consumptionator_blog'][LANGUAGE_NONE]['#options'], 0, 1);
    }
    else {
      $options = array();
    }

    // Add each season that belongs to the user-selected show to the options
    // array.
    if (isset($result['node'])) {
      $news_items_nids = array_keys($result['node']);
      $nodes = entity_load('node', $news_items_nids);
      foreach ($nodes as $node) {
        $options[$node->nid] = check_plain($node->title);
      }
    }
    else {
      $form['field_consumptionator_blog'][LANGUAGE_NONE]['#default_value'] = NULL;
    }
    $form['field_consumptionator_blog'][LANGUAGE_NONE]['#description'] = '';
    $form['field_consumptionator_blog'][LANGUAGE_NONE]['#options'] = $options;
  }


  // If a user re-selects "- Select a value -" on the node add form, or if the
  // slected show has no seasons, make sure the season field is re-disabled.
  if ((isset($form_state['values']['field_show']) && is_null($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) || (!empty($selected_show) && !isset($result['node']))) {
    $form['field_consumptionator_blog'][LANGUAGE_NONE]['#disabled'] = TRUE;
  }
}

/*
 * Implement hook_node_update.
 */
function usanetwork_consumptionator_post_node_update($node) {
  if ($node->type == 'consumpt_post') {
    module_load_include('inc', 'pathauto');
    pathauto_create_alias('usanetwork_consumptionator_post', 'insert', 'node/'. $node->nid, array('node' => $node), $node->type); // Language is optional
  }
}

function usanetwork_consumptionator_post_blogs_autocomplete($title) {
  $query = db_select('node', 'n');
  $query->fields('n',array('nid','title'));
  $query->condition('n.title', '%' . $title . '%' ,'LIKE');
  $query->condition('n.type', 'consumpt_blog' ,'=');
  $query->condition('n.status', '1');
  $query->range(0, 10);
  $result = $query->execute()->fetchAll();

  $output = array();
  if (!empty($result) && is_array($result)) {
    foreach($result as $row) {
      $row->title = check_plain($row->title);
      $key = $row->title . ' [node:' . $row->nid . ']';
      $output[$key] = $row->title;
    }
  }
  drupal_json_output($output);
}

function usanetwork_consumptionator_post_get_author($entity_type, $entity) {
  $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
  if (usanetwork_core_api_check_field($entity, 'field_author', $entity_type)) {
    return $entity_wrapper->field_author->value();
  }
  return NULL;
}
