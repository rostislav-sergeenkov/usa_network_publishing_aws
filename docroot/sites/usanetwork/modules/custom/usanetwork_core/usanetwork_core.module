<?php

/**
 * Implements hook_js_alter().
 */
function usanetwork_core_js_alter(&$javascript) {
  $javascript['misc/ajax.js']['data'] = drupal_get_path('module', 'usanetwork_core') . '/js/ajax.js';
}

/**
 * Implements hook_menu().
 */
function usanetwork_core_menu() {
  $items = array();

  $items['admin/structure/content-type-aliases'] = array(
    'title' => t('Content type aliases'),
    'description' => t('Allows to create human-readable aliases for content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_core_ct_alias_form'),
    'access arguments' => array('administer content types'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'usanetwork_core.admin.inc',
  );

  return $items;
}

/**
 * Helper function. Creates the menu items.
 * invoked on install
 */
function usanetwork_core_create_menu_items() {

  $menus = array();
  $menu_links = array();
  $menu_links_child_items = array();

  // Create a custom menu, if Menu module is enabled.
  if (!module_exists('menu')) {
    return FALSE;
  }

  $menus['menu_usa_footer_top'] = array(
    'menu_name' => 'usa-footer-top',
    'title' => st('usa footer top'),
    'description' => st('primary footer menu.'),
  );

  $menus['menu_usa_footer_bottom'] = array(
    'menu_name' => 'usa-footer-bottom',
    'title' => st('usa footer bottom'),
    'description' => st('secondary footer menu.'),
  );

  foreach ($menus as $key => $menu) {
    if (!menu_load($menu['menu_name'])) {
      menu_save($menu);
    }
  }

  // Create the top-level links for the menu_usa_footer_top menu.
  $menu_links['social'] = array(
    'link_path' => '<front>',
    'link_title' => st('social'),
    'options' => array('attributes' => array('title' => st('social'))),
    'menu_name' => 'usa-footer-top',
    'weight' => 0,
    'expanded' => '1',
  );
  $menu_links['mobile'] = array(
    'link_path' => '<front>',
    'link_title' => st('mobile'),
    'options' => array('attributes' => array('title' => st('mobile'))),
    'menu_name' => 'usa-footer-top',
    'weight' => 1,
    'expanded' => '1',
  );
  $menu_links['usa_store'] = array(
    'link_path' => '<front>',
    'link_title' => st('usa store'),
    'options' => array('attributes' => array('title' => st('usa store'))),
    'menu_name' => 'usa-footer-top',
    'weight' => 2,
    'expanded' => '1',
  );

  // Create the top-level links for the menu_usa_footer_bottom menu.
  $menu_links['ipr'] = array(
    'link_path' => '<front>',
    'link_title' => st('Independent Programming Report'),
    'options' => array('attributes' => array('title' => st('Independent Programming Report'))),
    'menu_name' => 'usa-footer-bottom',
    'weight' => 0,
    'expanded' => '1',
  );
  $menu_links['closed_captioning'] = array(
    'link_path' => '<front>',
    'link_title' => st('Closed Captioning'),
    'options' => array('attributes' => array('title' => st('Closed Captioning'))),
    'menu_name' => 'usa-footer-bottom',
    'weight' => 1,
    'expanded' => '1',
  );
  $menu_links['terms_of_service'] = array(
    'link_path' => '<front>',
    'link_title' => st('Terms of Service'),
    'options' => array('attributes' => array('title' => st('Terms of Service'))),
    'menu_name' => 'usa-footer-bottom',
    'weight' => 2,
    'expanded' => '1',
  );
  $menu_links['privacy_policy'] = array(
    'link_path' => '<front>',
    'link_title' => st('Privacy Policy'),
    'options' => array('attributes' => array('title' => st('Privacy Policy'))),
    'menu_name' => 'usa-footer-bottom',
    'weight' => 3,
    'expanded' => '1',
  );
  $menu_links['help'] = array(
    'link_path' => '<front>',
    'link_title' => st('Help'),
    'options' => array('attributes' => array('title' => st('Help'))),
    'menu_name' => 'usa-footer-bottom',
    'weight' => 5,
    'expanded' => '1',
  );


  // Save top level menu links
  foreach ($menu_links as $key => &$menu_link) {
    $mlid = menu_link_save($menu_link);
  }

  // Add items that require a plid below.
  // if we need to add child links this is how we do it
  /*
  $menu_links_child_items = array(
    'games' => array(
      'link_path' => 'games-child',
      'link_title' => st('games child link'),
      'options' => array('attributes' => array('title' => st('games-child'))),
      'menu_name' => 'sprout-header',
      'hidden' => '0',
      'expanded' => '0',
      'weight' => '0',
      'plid' => $menu_links['more_link']['mlid'],
    ),
  );
  */
  // save the menu links
  foreach ($menu_links_child_items as $key => $menu_link) {
    $mlid = menu_link_save($menu_link);
    $menu_links_child_items[$key]['mlid'] = $mlid;
  }

}

/**
 * Helper function. Upserts taxonomy vocabularies and terms.
 * is Upsert a word?
 *
 * The vocabularies are keyed by machine name and its values hold an array with
 * any number of the following keys:
 *
 *   - vid: The ID of the vocabulary.
 *   - name: The human-readable name of the vocabulary.
 *   - machine_name: The machine name of the vocabulary.
 *   - description: (optional) The vocabulary's description.
 *   - hierarchy: The hierarchy level of the vocabulary.
 *   - module: (optional) The module altering the vocabulary.
 *   - weight: (optional) The weight of this vocabulary in relation to other
 *     vocabularies.
 *   - original: (optional) The original vocabulary object before any changes
 *     are applied.
 *   - old_machine_name: (optional) The original machine name of the
 *     vocabulary.
 */
function usanetwork_core_deploy_taxonomy() {
  // Default vocabulary attributes.
  $default_vocab_attributes = array(
    'vid' => NULL,
    'name' => NULL,
    'machine_name' => NULL,
    'description' => NULL,
    'module' => 'taxonomy',
    'weight' => 0,
    'hierarchy' => 0,
  );

  // Our vocabularies keyed by machine name.
  $vocabularies = array(
    'cta_type' => array(
      'machine_name' => 'cta_type',
      'name' => st('Call to Action Type'),
      'description' => st('cta types with associated icons'),
    ),
    'usa_video_terms' => array(
      'machine_name' => 'usa_video_terms',
      'name' => st('USA Video Terms'),
      'description' => st('Terms for categorizing thePlatform TVE and MPX videos.'),
    ),
  );

  foreach ($vocabularies as $machine_name => $vocabulary) {
    // Concatenate the default attributes and turn into an object.
    $vocab = $vocabulary + $default_vocab_attributes;
    $vocab = (object) $vocab;

    // Check if the vocabulary already exists.
    $found = taxonomy_vocabulary_machine_name_load($vocab->machine_name);

    if ($found !== FALSE) {
      $vocab->vid = $found->vid;
      $vocab->original = $found;
      $vocab->old_machine_name = $found->machine_name;
    }

    // Upsert the vocabulary.
    $result = taxonomy_vocabulary_save($vocab);
  }

}

/**
 * Helper function. Adds default terms to select vocabularies.
 *
 *   The taxonomy term object must come with the following properties:
 *   - vid: The ID of the vocabulary the term is assigned to.
 *   - name: The name of the term.
 *   - tid: (optional) The unique ID for the term being saved. If $term->tid is
 *     empty or omitted, a new term will be inserted.
 *   - description: (optional) The term's description.
 *   - format: (optional) The text format for the term's description.
 *   - weight: (optional) The weight of this term in relation to other terms
 *     within the same vocabulary.
 *   - parent: (optional) The parent term(s) for this term. This can be a single
 *     term ID or an array of term IDs. A value of 0 means this term does not
 *     have any parents. When omitting this variable during an update, the
 *     existing hierarchy for the term remains unchanged.
 *   - vocabulary_machine_name: (optional) The machine name of the vocabulary
 *     the term is assigned to. If not given, this value will be set
 *     automatically by loading the vocabulary based on $term->vid.
 *   - original: (optional) The original taxonomy term object before any changes
 *     were applied. When omitted, the unchanged taxonomy term object is
 *     loaded from the database and stored in this property.
 *   Since a taxonomy term is an entity, any fields contained in the term object
 *   are saved alongside the term object.
 */
function usanetwork_core_deploy_terms() {
  // Default term attributes.
  $default_term_attributes = array(
    'vid' => NULL,
    'name' => NULL,
    'tid' => NULL,
    'description' => st(''),
    'format' => 'plain_text',
    'weight' => 0,
    'parent' => 0,
  );

  //Prepare our terms.
  $terms = usanetwork_core_default_taxonomy_terms();

  // Iterate over our terms array.
  foreach ($terms as $machine_name => $items) {
    // Load the vocabulary object.
    $vocab = taxonomy_vocabulary_machine_name_load($machine_name);
    if (!$vocab) {
      drupal_set_message(st('Vocabulary !vocab is missing',
        array('!vocab' => $machine_name)), 'error');
      continue;
    }

    // Iterate over the items.
    foreach ($items as $key => $item) {
      // Check to see if we have that term in this vocabulary already.
      $found = taxonomy_term_load_multiple(array(), array('name' => trim($item['name']), 'vid' => $vocab->vid));
      if ($found) {
        $item = array_shift($found);
        $item = (array) $item;
      }
      else {
        // Add the vocabulary vid and the machine name.
        $item['vid'] = $vocab->vid;
        $item['vocabulary_machine_name'] = $vocab->machine_name;
      }

      // Concatenate the default attributes and turn the item into an object.
      $item = $item + $default_term_attributes;
      $item = (object) $item;

      taxonomy_term_save($item);
    }
  }
}

/**
 * Defining the default Taxonomy terms for each vocabulory
 */
function usanetwork_core_default_taxonomy_terms() {
  $terms = array();
  // article
  $terms['cta_type'] = array(
    'video' => array(
      'name' => st('video'),
    ),
    'game' => array(
      'name' => st('game'),
    ),
    'live sync' => array(
      'name' => st('live sync'),
    ),
    'gallery' => array(
      'name' => st('gallery'),
    ),
    'quiz' => array(
      'name' => st('quiz'),
    ),
  );

  return $terms;
}

/**
 * Altering pathauto_punctuation_chars.
 */
function usanetwork_core_pathauto_punctuation_chars_alter(&$punctuation) {
    $punctuation['double_curly_left']  = array('value' => '“', 'name' => t('Double curly left'));
    $punctuation['double_curly_right'] = array('value' => '”', 'name' => t('Double curly right'));
    $punctuation['single_curly_left']  = array('value' => '‘', 'name' => t('Single curly left'));
    $punctuation['single_curly_right'] = array('value' => '’', 'name' => t('Single curly right'));
}

/**
 * Returns node content type name alias by machine readable name.
 * If alias does not exist it returns human readable name.
 */
function usanetwork_core_get_content_type_alias($content_type_name) {
  $ctalias_variable_name = 'usanetwork_ctalias_' . $content_type_name;

  $alias = variable_get($ctalias_variable_name, NULL);

  if (!empty($alias)) {
    return $alias;
  }

  $content_types = node_type_get_types();

  if (isset($content_types[$content_type_name]->name)) {
    return $content_types[$content_type_name]->name;
  }

  return NULL;
}

/**
 * Returns file type name alias by machine readable name.
 * If alias does not exist it returns human readable name.
 */
function usanetwork_core_get_file_type_alias($file_type_name) {
  $ftalias_variable_name = 'usanetwork_ftalias_' . $file_type_name;

  $alias = variable_get($ftalias_variable_name, NULL);

  if (!empty($alias)) {
    return $alias;
  }

  $file_types = file_type_get_enabled_types();

  if (isset($file_types[$file_type_name]->label)) {
    return $file_types[$file_type_name]->label;
  }

  return NULL;
}

/**
 * Sets node content type name alias.
 */
function usanetwork_core_set_content_type_alias($content_type_name, $alias) {
  $ctalias_variable_name = 'usanetwork_ctalias_' . $content_type_name;

  variable_set($ctalias_variable_name, $alias);
}

/**
 * Sets file type name alias.
 */
function usanetwork_core_set_file_type_alias($file_type_name, $alias) {
  $ftalias_variable_name = 'usanetwork_ftalias_' . $file_type_name;

  variable_set($ftalias_variable_name, $alias);
}

/**
 * Deletes node content type name alias.
 */
function usanetwork_core_delete_content_type_alias($content_type_name) {
  $ctalias_variable_name = 'usanetwork_ctalias_' . $content_type_name;

  variable_del($ctalias_variable_name);
}

/**
 * Deletes file type name alias.
 */
function usanetwork_core_delete_file_type_alias($file_type_name) {
  $ftalias_variable_name = 'usanetwork_ftalias_' . $file_type_name;

  variable_del($ftalias_variable_name);
}
