<?php

/**
 * @file
 * Code for the usanetwork_episodes feature.
 */
include_once 'usanetwork_episodes.features.inc';

define('USANETWORK_EPISODE_TYPE_FULL', 'full');
define('USANETWORK_EPISODE_TYPE_PREVIEW', 'preview');

/**
 *  Implements hook_menu().
 */
function usanetwork_episodes_menu() {
  $items = array();

  $items['node/%node/show-episodes'] = array(
    'title' => 'Episodes',
    'page arguments' => array(1),
    'page callback' => 'usanetwork_episodes_blank_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ajax/usanetwork-tv-show-episodes/get-related/%node/%'] = array(
    'title' => 'Related content',
    'page callback' => 'usanetwork_episodes_get_season_episodes_ajax',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function usanetwork_episodes_blank_page() {
  return '';
}

/**
 *  Implements hook_block_info().
 */
function usanetwork_episodes_block_info() {
  return array(
    'usa_landing_tvep_list_block' => array(
      'info' => t('Usanetwork episodes: List'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'usanetwork_episodes_main_block' => array(
      'info' => t('Usanetwork episodes: Main Block'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 *  Implements hook_block_view().
 */
function usanetwork_episodes_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'usa_landing_tvep_list_block':
      $block['subject'] = '';
      $block['content'] = usanetwork_episodes_get_episodes_list_block();
      break;
    case 'usanetwork_episodes_main_block':
      $block['subject'] = '';
      $block['content'] = _usanetwork_episodes_main_block();
      break;
    case 'usanetwork_episodes_episodes_carousel':
      $block['subject'] = '';
      $block['content'] = _usanetwork_episodes_episodes_carousel();
      break;
  }

  return $block;
}

/**
 *  Implements hook_theme().
 */
function usanetwork_episodes_theme($existing, $type, $theme, $path) {
  return array(
    'usanetwork_episode_consum_sidebar_list_item' => array(
      'variables' => array(
        'url' => NULL,
        'image' => NULL,
        'title' => NULL,
        'season_num' => NULL,
        'episode_num' => NULL,
      ),
      'template' => 'templates/usanetwork-episode-consum-sidebar-list-item',
    ),
    'usanetwork_episodes_landing_episodes_list_item' => array(
      'variables' => array(
        'full_episode_url' => NULL,
        'preview_episode_url' => NULL,
        'default_content_url' => NULL,
        'desktop_image_url' => NULL,
        'mobile_image_url' => NULL,
        'season_number' => NULL,
        'episode_number' => NULL,
        'title' => NULL,
        'description' => NULL,
        'airing_date' => NULL,
        'expiration_date' => NULL,
        'guide_url' => NULL,
        'gallery_url' => NULL,
      ),
      'template' => 'templates/usanetwork-episodes-landing-episodes-list-item',
    ),
    'usanetwork_episodes_landing_episodes_season' => array(
      'variables' => array(
        'items' => array(),
        'ad' => NULL,
        'ad_id' => NULL,
        'title' => NULL,
        'filters' => array(),
        'active_filter_title' => NULL,
        'season_number' => NULL,
        'load_more_link' => NULL,
        'show_nid' => NULL,
        'is_global_block' => NULL,
      ),
      'template' => 'templates/usanetwork-episodes-landing-episodes-season',
    ),
    'usanetwork_episodes_main_block' => array(
      'variables' => array(
        'sharebar' => NULL,
        'episode_title' => NULL,
        'body' => NULL,
        'season_number' => NULL,
        'episode_number' => NULL,
        'episode_video_link' => NULL,
        'image_mobile' => NULL,
        'image_desktop' => NULL,
        'air_date_text' => NULL,
      ),
      'template' => 'templates/usanetwork-episodes-main-block',
    ),
    'usanetwork_episodes_episodes_carousel' => array(
      'variables' => array(
        'season_number' => NULL,
        'episodes' => array(),
        'all_episodes_link' => NULL,
      ),
      'template' => 'templates/usanetwork-episodes-episodes-carousel',
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function usanetwork_episodes_node_view($node, $view_mode, $langcode) {

  if ($node->type == 'tv_episode' && $view_mode == 'full') {

    if ($field_season_items = field_get_items('node', $node, 'field_season')) {
      $field_season = reset($field_season_items);
      $season_object = isset($field_season['target_id']) ? node_load($field_season['target_id'])
            : FALSE;

      if ($season_num_items = field_get_items('node', $season_object, 'field_season_id')) {
        $season_num = reset($season_num_items);
      }

      if ($episode_num_items = field_get_items('node', $node, 'field_episode_number')) {
        $episode_num = reset($episode_num_items);
      }

      if (isset($season_num['value']) && isset($episode_num['value'])) {
        $node->additional = t('S@season_num Episode @episode_num', array('@season_num' => $season_num['value'], '@episode_num' => $episode_num['value']));
      }

      if ($field_original_air_date_items = field_get_items('node', $node, 'field_original_air_date')) {
        $field_original_air_date_item = reset($field_original_air_date_items);
        $aired_on = format_date($field_original_air_date_item['value'], 'custom', 'F j, Y', $field_original_air_date_item['timezone']);
        $node->on_air = t('aired on @date', array('@date' => $aired_on));
      }

      if ($show_id = _usanetwork_get_field_item('node', $node, 'field_show', 'target_id')) {
        $files = _usanetwork_tv_shows_pull_related_files($show_id, 1, 'DESC', 'changed', array(), $season_num['value'], $episode_num['value']);
        if (count($files) == 1) {
          $node->watch_episode = l(t('Watch the episode'), 'file/' . $files[0]->entity_id);
        }
        $node->show_class = usanetwork_tv_shows_color_show_css_class($show_id);

        $episodes = views_get_view_result('usa_episodes', 'show_episodes', $show_id);
        foreach ($episodes as $key => $episode) {
          $episode_node = $episode->_field_data['nid']['entity'];
          $season_node = $episode->_field_data['node_field_data_field_season_nid']['entity'];

          if ($cover_media_uri = _usanetwork_get_field_item('node', $episode_node, 'field_tv_cover_media', 'uri')) {
            $cover_media_image = theme_image_style(array(
              'style_name' => '100x56',
              'path' => $cover_media_uri,
              'width' => 100,
              'height' => 56,
            ));
          }

          $season_number = _usanetwork_get_field_item('node', $season_node, 'field_season_id', 'value');
          $episode_number = _usanetwork_get_field_item('node', $episode_node, 'field_episode_number', 'value');

          $additional = t('S@season_num Episode @episode_num', array('@season_num' => $season_number, '@episode_num' => $episode_number));

          $parity = ($key % 2 == 0) ? 'odd' : 'even';

          $episodes_seasons[$season_number][] = array(
            'class' => array($parity),
            'data' => theme('usanetwork_episode_consum_sidebar_list_item', array(
              'url' => url('node/' . $episode->nid),
              'image' => $cover_media_image,
              'title' => $episode->node_title,
              'additional' => isset($additional) ? $additional : '',
          )));
        }

        $node->seasons = array();

        foreach ($episodes_seasons as $season_id => $season) {
          $season[0]['class'][] = 'active';
          $season[0]['class'][] = 'show-border';

          $node->seasons[] = theme_usanetwork_item_list(array(
            'warpper_attributes' => array(
              'class' => array(
                'season-' . $season_id,
                'item-filter',
              ),
            ),
            'title_tag' => 'div',
            'title_attributes' => array(
              'class' => array(
                'filter-label',
              )
            ),
            'title' => t('Season @season_num', array('@season_num' => $season_id)),
            'items' => $season,
            'type' => 'ul',
            'attributes' => array(),
            'suffix' => array()
          ));
        }
      }

      if ($uri = _usanetwork_get_field_item('node', $node, 'field_tv_cover_media', 'uri')) {
        $node->image = theme_image(array('path' => $uri, 'attribute' => array()));
      }
    }
  }
}

/*
 * Renders usanetwork_episodes_main_block.
*/
function _usanetwork_episodes_episodes_carousel() {

  $episode_node = menu_get_object();
  if (!empty($episode_node->type) && $episode_node->type == 'tv_episode' && !empty($episode_node->field_season)) {
    $field_season_items = reset(field_get_items('node', $episode_node, 'field_season'));
    $season_node = node_load($field_season_items['target_id']);
    if (!empty($season_node)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'tv_episode')
        ->fieldCondition('field_season', 'target_id', $season_node->nid, '=')
        // +0 for sorting numerically varchar field.
        ->fieldOrderBy('field_episode_number', 'value+0', 'DESC');
      $result = $query->execute();
      if (isset($result['node'])) {
        $episodes = entity_load('node', array_keys($result['node']));
        $episodes_variables = array();
        foreach ($episodes as $episode) {
          if (!empty($episode->field_tv_cover_media)) {
            $image = reset(field_get_items('node', $episode, 'field_tv_cover_media'));
          }
          if (!empty($episode->field_episode_number)) {
            $field_episode_items = reset(field_get_items('node', $episode, 'field_episode_number'));
            $episode_number = $field_episode_items['value'];
          }
          $episodes_variables[] = array(
            'title' => !empty($episode->title) ? $episode->title : '',
            'episode_number' => !empty($episode_number) ? $episode_number : '',
            'image' => !empty($image['uri']) ? image_style_url('634x349', $image['uri']) : '',
            'url' => url('node/' . $episode->nid),
          );
        }
        if ($season_num_items = field_get_items('node', $season_node, 'field_season_id')) {
          $season_num_items = reset($season_num_items);
          $season_number = $season_num_items['value'];
        }
        if (!empty($season_node->field_show)) {
          $field_show_items = reset(field_get_items('node', $season_node, 'field_show'));
          $show_id = $field_show_items['target_id'];
        }
        $theme_variables = array(
          'season_number' => !empty($season_number) ? $season_number : '',
          'episodes' => !empty($episodes_variables) ? $episodes_variables : array(),
          'all_episodes_link' => !empty($show_id) ? url('node/' . $show_id .'/show-episodes') : '',
        );
        return theme('usanetwork_episodes_episodes_carousel', $theme_variables);
      }
    }
  }
  return '';
}

/*
 * Renders usanetwork_episodes_main_block.
*/
function _usanetwork_episodes_main_block() {
  $episode_node = menu_get_object();
  if (!empty($episode_node->type) && $episode_node->type == 'tv_episode') {
    $episode_node_wrapper = entity_metadata_wrapper('node', $episode_node);
    if (!empty($episode_node->field_gigya_share_bar)) {
      $sharebar = field_view_field('node', $episode_node, 'field_gigya_share_bar');
      $sharebar['#title'] = t('Share');
    }
    if (!empty($episode_node->field_season)) {
      $season = $episode_node_wrapper->field_season->value();
      if ($season_num_items = field_get_items('node', $season, 'field_season_id')) {
        $season_num_items = reset($season_num_items);
        $episode_num = $season_num_items['value'];
      }
    }
    if (!empty($episode_node->field_tv_cover_media)) {
      $image = $episode_node_wrapper->field_tv_cover_media->value();
    }
    $theme_variables = array(
      'sharebar' => !empty($sharebar) ? render($sharebar) : '',
      'episode_title' => $episode_node->title,
      'body' => !empty($episode_node->body) ? $episode_node_wrapper->body->value->value() : '',
      'season_number' => !empty($episode_node->field_episode_number) ? $episode_node_wrapper->field_episode_number->value() : '',
      'episode_number' => !empty($episode_num) ? $episode_num : '',
      'episode_video_link' => url('<front>'),
      'image_mobile' => !empty($image['uri']) ? image_style_url('full_episodes_633x356', $image['uri']) : '',
      'image_desktop' => !empty($image['uri']) ? image_style_url('629x720', $image['uri']) : '',
      'air_date_text' => !empty($episode_node->field_original_air_date) ? gmdate('F j, Y', $episode_node_wrapper->field_original_air_date->value->value()) : '',
    );
    return theme('usanetwork_episodes_main_block', $theme_variables);
  }
  return '';
}

function usanetwork_episodes_get_episodes_list_block($display_filters_block = TRUE, $single_season_number = NULL, $tv_show_node = NULL, $show_ad = FALSE) {
  if (path_is_admin(current_path())) {
    return '';
  }

  if ($tv_show_node === NULL) {
    $tv_show_node = menu_get_object();
  }

  if (empty($tv_show_node) || (!empty($tv_show_node) && isset($tv_show_node->type) && $tv_show_node->type != 'tv_show')) {
    return '';
  }

  $season_ids = _usanetwork_episodes_get_season_ids($tv_show_node->nid);
  $query = drupal_get_query_parameters();
  $filter_by_season = $single_season_number === NULL
    ? (isset($query['season']) ? intval($query['season']) : 0)
    : $single_season_number;

  $current_season_data_item = NULL;
  $current_season_data_item_index = NULL;
  $last_season_data = NULL;
  $next_season_available = FALSE;

  $theme_variables = array(
    'items' => array(),
    'ad' => FALSE,
    'ad_id' => NULL,
    'title' => NULL,
    'filters' => array(),
    'active_filter_title' => NULL,
    'season_number' => NULL,
    'load_more_link' => $next_season_available,
    'show_nid' => $tv_show_node->nid,
    'is_global_block' => FALSE,
  );

  if (!empty($season_ids)) {
    if ($filter_by_season == 0) {
      $current_season_data_item = $season_ids[0];
      $current_season_data_item_index = 0;
      $theme_variables['active_filter_title'] = $current_season_data_item->season_title;
    }
    else {
      foreach ($season_ids as $season_id_number => $season_id) {
        if ($season_id->season_number == $filter_by_season) {
          $current_season_data_item = $season_id;
          $current_season_data_item_index = $season_id_number;
          $theme_variables['active_filter_title'] = $current_season_data_item->season_title;
          $theme_variables['filters'] = array();
          break;
        }
      }

      if (empty($current_season_data_item)) {
        return '';
      }
    }

    $episodes_data = _usanetwork_episodes_get_season_episodes_data($current_season_data_item->season_number, $tv_show_node->nid);

    if ($show_ad === FALSE) {
      $theme_variables['ad'] = FALSE;
    }
    else {
      $theme_variables['ad'] = TRUE;
      $theme_variables['ad_id'] = $current_season_data_item->season_number;
    }

    if ($current_season_data_item_index + 1 < count($season_ids)) {
      $theme_variables['load_more_link'] = TRUE;
    }
    else {
      $theme_variables['load_more_link'] = FALSE;
    }

    if ($display_filters_block) {
      $theme_variables['filters'][0] = array(
        'title' => t('All seasons'),
        'value' => 0,
      );

      foreach ($season_ids as $item_index => $season_id) {
        $theme_variables['filters'][$season_id->season_number] = array(
          'title' => $season_id->season_title,
          'value' => $season_id->season_number,
        );
      }

      $theme_variables['is_global_block'] = TRUE;
    }
    else {
      $theme_variables['is_global_block'] = FALSE;
    }

    $theme_variables['title'] = $current_season_data_item->season_title;

    if (!empty($episodes_data)) {
      foreach ($episodes_data as $episode_data) {
        $default_category = isset($episode_data[USANETWORK_EPISODE_TYPE_FULL])
          ? USANETWORK_EPISODE_TYPE_FULL
          : USANETWORK_EPISODE_TYPE_PREVIEW;

        $image_url = usanetwork_core_api_get_content_image('file', $episode_data[$default_category]->fid);

        $theme_item_variables = array(
          'full_episode_url' => isset($episode_data['full']->fid)
            ? url('file/' . $episode_data[USANETWORK_EPISODE_TYPE_FULL]->fid)
            : NULL,
          'preview_episode_url' => isset($episode_data['preview']->fid)
            ? $episode_data[USANETWORK_EPISODE_TYPE_PREVIEW]->fid
            : NULL,
          'default_content_url' => isset($episode_data[$default_category]->fid)
            ? $episode_data[$default_category]->fid
            : NULL,
          'desktop_image_url' => image_style_url('634x349', $image_url),
          'mobile_image_url' => image_style_url('634x349', $image_url),
          'season_number' => $current_season_data_item->season_number,
          'episode_number' => $episode_data[$default_category]->episode_number,
          'title' => $episode_data[$default_category]->title,
          'description' => $episode_data[$default_category]->description,
          'airing_date' => !empty($episode_data[$default_category]->airdate)
            ? gmdate('m/d/Y', $episode_data[$default_category]->airdate)
            : NULL,
          'expiration_date' => !empty($episode_data[$default_category]->expiration_date)
            ? gmdate('m/d/Y', $episode_data[$default_category]->expiration_date)
            : NULL,
          'guide_url' => url('node/' . $tv_show_node->nid),
          'gallery_url' => url('node/' . $tv_show_node->nid),
        );

        $theme_variables['items'][] = theme('usanetwork_episodes_landing_episodes_list_item', $theme_item_variables);
      }
    }

    $theme_variables['season_number'] = $current_season_data_item->season_number;
  }

  drupal_add_js(drupal_get_path('module', 'usanetwork_episodes') . '/js/usanetwork_episodes.autoloader.js');

  return theme('usanetwork_episodes_landing_episodes_season', $theme_variables);
}

/**
 * Ajax callback for season episodes block.
 *
 * @param $tv_show_node
 * @param $season_number
 */
function usanetwork_episodes_get_season_episodes_ajax($tv_show_node, $season_number) {
  $season_number = intval($season_number);

  $response = array(
    'found' => FALSE,
    'total' => 0,
    'overlimited' => FALSE,
    'rendered' => '',
  );

  if ($season_number >= 0) {
    $block = usanetwork_episodes_get_episodes_list_block(FALSE, $season_number, $tv_show_node, TRUE);

    $response['found'] = TRUE;
    $response['rendered'] = $block;
    $response['total'] = !empty($block) ? 1 : 0;
  }

  return drupal_json_output($response);
}

/**
 * Returns a list of season ids of current Show.
 * @param $tv_show_nid
 * @return mixed
 */
function _usanetwork_episodes_get_season_ids($tv_show_nid) {
  $query = db_select('field_data_field_show', 'field_show');
  $query->addField('field_show', 'entity_id', 'season_nid');
  $query->join('node', 'season_node', 'season_node.nid=field_show.entity_id');
  $query->addField('season_node', 'title', 'season_title');
  $query->join('field_data_field_season_id', 'field_season_id', 'field_season_id.entity_id=season_node.nid');
  $query->addField('field_season_id', 'field_season_id_value', 'season_number');
  $query->condition('field_show.bundle', 'tv_season');
  $query->condition('field_season_id.bundle', 'tv_season');
  $query->condition('field_show_target_id', $tv_show_nid);
  $query->orderBy('season_number', 'DESC');

  return $query->execute()->fetchAll();
}

/**
 * Returns data of season episodes of current Show.
 *
 * @param $season_number
 * @param $show_nid
 * @return array
 */
function _usanetwork_episodes_get_season_episodes_data($season_number, $show_nid) {
  $sorted_result = array();

  $query = db_select('mpx_video', 'mpxv');
  $query->fields('mpxv', array('fid', 'title', 'description', 'airdate', 'available_date', 'expiration_date', 'status'));
  $query->join('field_data_field_mpx_season_number', 'season_number', 'season_number.entity_id=mpxv.fid');
  $query->join('field_data_field_mpx_episode_number', 'episode_number', 'episode_number.entity_id=mpxv.fid');
  $query->addField('episode_number', 'field_mpx_episode_number_value', 'episode_number');
  $query->join('field_data_field_mpx_full_episode', 'full_episode', 'full_episode.entity_id=mpxv.fid');
  $query->addField('full_episode', 'field_mpx_full_episode_value', 'full_episode');
  $query->join('field_data_field_show', 'field_show', 'field_show.entity_id=mpxv.fid');
  $query->condition('season_number.field_mpx_season_number_value', $season_number);
  $query->condition('mpxv.status', 1);
  $query->condition('field_show.field_show_target_id', $show_nid);

  $result = $query->execute()->fetchAll();

  if ($result) {
    // Sort by episode number using integer value instead string
    usort($result, function($a, $b) {
      if (intval($a->episode_number) == intval($b->episode_number)) {
        return 0;
      }
      elseif (intval($a->episode_number) > intval($b->episode_number)) {
        return -1;
      }
      else {
        return 1;
      }
    });

    foreach ($result as $result_item) {
      $category_name = $result_item->full_episode == 1
        ? USANETWORK_EPISODE_TYPE_FULL
        : USANETWORK_EPISODE_TYPE_PREVIEW;

      $sorted_result[$result_item->episode_number][$category_name] = $result_item;
    }
  }

  return $sorted_result;
}
