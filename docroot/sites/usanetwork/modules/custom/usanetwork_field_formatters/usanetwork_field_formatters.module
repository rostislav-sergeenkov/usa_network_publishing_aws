<?php

/**
 * Implements hook_field_formatter_info().
 */
function usanetwork_field_formatters_field_formatter_info() {

  // Below is the list of all the custom formatters we have in system
  $custom_formatters['raw_formatter'] = array(
    'label' => t('Raw Formatter'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting raw html markup inserted in a long text/plain text field.'),
  );
  $custom_formatters['custom_css'] = array(
    'label' => t('Custom CSS'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting custom css inserted in a long text/plain text field.'),
  );
  $custom_formatters['custom_css_ajax'] = array(
    'label' => t('Custom CSS For Ajax'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting custom css inserted in a long text/plain when entity is loaded by ajax call.'),
  );
  $custom_formatters['custom_js'] = array(
    'label' => t('Custom JS'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting custom js inserted in a long text/plain text field.'),
  );

  // formatter to display file entity in a flex slider
  if (module_exists('file_entity')) {
    $custom_formatters['flexslider_file_entity'] = array(
      'label' => t('Flexslider'),
      'field types' => array('file'),
      'description' => t('The formatter to display file entity in a flex slider.'),
      'settings' => array(
        'view_mode' => '',
        'view_mode_thumb' => '',
        'thumbnail_path' => '',
        'optionset' => '',
      ),
    );
  }

  return $custom_formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function usanetwork_field_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $field_name = $field['field_name'];
  $parents_array = array($field_name, 'settings_edit_form', 'settings');
  $parents = 'fields]' . implode('][', $parents_array) . ']';

  $form = array();

  switch ($display['type']) {
    case 'flexslider_file_entity':
      // Show select box for the option set.
      $optionsets = array();
      ctools_include('export');
      foreach (flexslider_optionset_load_all() as $name => $optionset) {
        $optionsets[$name] = check_plain($optionset->title);
      }
      $form['optionset'] = array(
        '#title' => t('Option set'),
        '#type' => 'select',
        '#options' => $optionsets,
        '#default_value' => $settings['optionset'],
      );

      $entity_info = entity_get_info('file');
      $options = array();
      if (!empty($entity_info['view modes'])) {
        foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
          $options[$view_mode] = $view_mode_settings['label'];
        }
      }
      if (count($options) > 1) {
        $form['view_mode'] = array(
          '#type' => 'select',
          '#options' => $options,
          '#title' => t('Slide view mode'),
          '#default_value' => $settings['view_mode'],
        );
        $form['view_mode_thumb'] = array(
          '#type' => 'select',
          '#options' => array(
            '_empty' => '- ' . t('Nothing') . ' -',
            '_image' => '- ' . t('Thumbnail image') . ' -',
          ) + $options,
          '#title' => t('Thumbnail view mode'),
          '#default_value' => $settings['view_mode_thumb'],
        );
        $form['thumbnail_path'] = array(
          '#type' => 'textfield',
          '#title' => t('Thumbnail path'),
          '#default_value' => $settings['thumbnail_path'],
          '#description' => t('The path of the image to use as thumbnail.'),
        );
        if (module_exists('token')) {
          $form['thumbnail_path']['#description'] .= ' ' . t('This field support tokens. Example: %example', array(
              '%example' => '[node:field-image:file:path]',
            ));

          $form['tokens'] = array(
            '#markup' => theme('token_tree_link', array('token_types' => array($entity_info['token type']), '#global_types' => FALSE)),
          );
        }
      }
      break;
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function usanetwork_field_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  switch ($display['type']) {
    case 'flexslider_file_entity':
      // Load option set.
      ctools_include('export');
      if (!empty($settings['optionset'])) {
        $optionset = flexslider_optionset_load($settings['optionset']);
      }

      // Build settings summary.
      $optionset = isset($optionset->title) ? $optionset->title : t('Default settings');
      $summary[] = t('Option set: %optionset', array('%optionset' => $optionset));

      $entity_info = entity_get_info($field['settings']['target_type']);
      $summary[] = t('Slides rendered as @mode', array('@mode' => isset($entity_info['view modes'][$settings['view_mode']]['label']) ? $entity_info['view modes'][$settings['view_mode']]['label'] : $settings['view_mode']));
      if ($settings['view_mode_thumb'] == '_empty') {
        $summary[] = t('Thumbnails rendered as @mode', array('@mode' => t('empty strings')));
      }
      else if ($settings['view_mode_thumb'] == '_image') {
        $summary[] = t('Thumbnails rendered as @mode', array('@mode' => t('images')));
      }
      else {
        $summary[] = t('Thumbnails rendered as @mode', array('@mode' => isset($entity_info['view modes'][$settings['view_mode_thumb']]['label']) ? $entity_info['view modes'][$settings['view_mode_thumb']]['label'] : $settings['view_mode_thumb']));
      }
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * $entity_type     The type of $entity.
 * $entity          The entity being displayed.
 * $field           The field structure.
 * $instance        The field instance.
 * $langcode        The language associated with $items.
 * $items           Array of values for this field.
 * $display         The display settings to use, as found in the "display" entry of instance definitions.
                    The array notably contains the following keys and values;
    * type:     The name of the formatter to use.
    * settings: The array of formatter settings.
 */
function usanetwork_field_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    // raw field data
    case 'raw_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'raw_formatter',
          '#data' => $item['value'],
        );
      }
      break;
    // css field data
    case 'custom_css':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#data' => drupal_add_css(
            $item['value'],
            array(
              'group' => CSS_THEME,
              'type' => 'inline',
              'media' => 'screen',
              'preprocess' => FALSE,
              'weight' => '9999',
            )),
        );
      }
      break;
    case 'custom_css_ajax':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'custom_css_ajax_formatter',
          '#data' => $item['value'],
        );
      }
      break;
    // js field data
    case 'custom_js':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
        '#data' => drupal_add_js($item['value'], array('type' => 'inline', 'scope' => 'header', 'preprocess' => FALSE)),
        );
      }
      break;
    case 'flexslider_file_entity':
      $element = array(
        '#theme' => 'flexslider_file_entity',
        '#settings' => $display['settings'],
      );
      break;
  }

  return $element;
}

/**
* Implements hook_theme().
*/
function usanetwork_field_formatters_theme() {
  $items = array();

  $items['raw_formatter'] = array(
    'template'  => 'templates/raw-formatter',
    'variables' => array('data' => ''),
  );

  $items['flexslider_file_entity'] = array(
    'render element' => 'element',
    'file' => 'usanetwork_field_formatters.theme.inc',
  );

  $items['custom_css_ajax_formatter'] = array(
    //'render element' => 'element',
    'variables' => array('data' => NULL),
    'file' => 'usanetwork_field_formatters.theme.inc',
  );


  return $items;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function usanetwork_field_formatters_field_formatter_info_alter(&$info) {
}

/**
 * Implements hook_element_info_alter().
 *
 * Adds our wrapper function to the processing of media fields on forms.
 */
function usanetwork_field_formatters_element_info_alter(&$type) {
  if (isset($type['media'])) {
    $type['media']['#process'][] = 'usanetwork_field_formatters_element_process';
  }
}

/**
 * #process callback for the media form element.
 *
 * Display files added to Catchall-Page & Snipe node forms as links to the public URI of
 * the file next to the image thumbnail
 */
function usanetwork_field_formatters_element_process(&$element, &$form_state, $form) {
  if (isset($element['#file']) && (strpos($form['#id'], 'catchall-page-node-form') === 0 || strpos($form['#id'], 'snipe-node-form') === 0 || strpos($form['#id'], 'taxonomy-form-term') === 0)) {
    $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
    $file = $fid ? file_load($fid) : FALSE;
    if (isset($file->uri)) {
      $element['filename']['#markup'] = '<div style="float: left">' . t('Uploaded File URL: ') . file_create_url($file->uri) . '</div>';
      $element['filename']['#weight'] = 101;
    }
  }

  return $element;
}
