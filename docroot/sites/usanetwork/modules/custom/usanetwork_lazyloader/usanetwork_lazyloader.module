<?php

define('USANETWORK_LAZYLOADER_MOBILE_DEVICE', 1);
define('USANETWORK_LAZYLOADER_TABLET_DEVICE', 2);
define('USANETWORK_LAZYLOADER_DESKTOP_DEVICE', 3);

/**
 * Implements hook_menu().
 */
function usanetwork_lazyloader_menu() {
  $items = array();

  $items['admin/config/media/images-lazy-loader'] = array(
    'title' => t('Images USANetwork Lazyloader'),
    'description' => t('Allows to control using lazyloading for images'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_lazyloader_settings_form'),
    'file' => 'usanetwork_lazyloader.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 *  Implements hook_process_html().
 */
function usanetwork_lazyloader_process_html(&$variables) {
  // Read global settings of Lazyloader module
  global $_lazyloader_set;

  // Do not do anything if lazyloading is temporary disabled
  if (empty($_lazyloader_set['enabled']) || !$_lazyloader_set['enabled']) {
    return;
  }

  $desktop_using = variable_get('usanetwork_lazyloader_desktop_using', 0);
  $mobile_using = variable_get('usanetwork_lazyloader_mobile_using', 0);

  // Detect device type using PHP Mobile Detect library and Context Mobile Detect module
  $used_device = _context_mobile_detect_detect();

  // Implementing strategy of enabling or disabling lazyloading
  if (!empty($used_device['device'])) {
    switch($used_device['device']) {
      case USANETWORK_LAZYLOADER_MOBILE_DEVICE:
      case USANETWORK_LAZYLOADER_TABLET_DEVICE:
        // Enabling or disabling lazyloader script injecting in order with settings
        $_lazyloader_set['enabled'] = $mobile_using;
        break;

      case USANETWORK_LAZYLOADER_DESKTOP_DEVICE:
        // Enabling or disabling lazyloader script injecting in order with settings
        $_lazyloader_set['enabled'] = $desktop_using;
        break;
    }
  }
}
