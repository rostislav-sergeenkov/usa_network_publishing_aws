<?php

define('USANETWORK_MICROSITE_NODE_TYPE', 'usanetwork_microsite');
define('USANETWORK_MICROSITE_VIDEO_PREFIX', 'clip-');
define('USANETWORK_MICROSITE_FULL_VIDEO_PREFIX', 'full-');
define('USANETWORK_MICROSITE_USA_PLAYER', 'microsites_usa_player_endcard');
define('USANETWORK_MICROSITE_NOAUTH_PLAYER', 'microsite_vod_noauth_endcard');
define('USANETWORK_MICROSITE_AUTH_PLAYER', 'microsite_vod_endcard');
define('USANETWORK_MICROSITE_PERSON_NODE_TYPE', 'person');

include_once 'usanetwork_microsite.features.inc';
include_once 'usanetwork_microsite.admin.inc';

/**
 * Implements hook_menu().
 */
function usanetwork_microsite_menu() {
  $items = array();

  $items['node/%node/microsite'] = array(
    'title' => t('USA Network microsite'),
    'page callback' => 'usanetwork_microsite_page_callback',
    'page arguments' => array('node', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/get-video-in-player/%node'] = array(
    'page callback' => 'usanetwork_microsite_get_video_in_player',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
//    'delivery callback' => 'usanetwork_microsite_get_video_in_player_ajax_callback',
    'type' => MENU_CALLBACK,
  );

  $items['ajax/microcite/endcard/related/%node/%'] = array(
    'title' => 'Related items',
    'page callback' => 'usanetwork_microsite_endcard_related_items',
    'page arguments' => array(4, 5),
    'access arguments' => array('access content'),
    'delivery callback' => 'drupal_json_output',
    'type' => MENU_CALLBACK,
  );

  $items['ajax/get-gallery/%node'] = array(
    'page callback' => 'usanetwork_microsite_get_rendered_gallery',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'delivery callback' => 'drupal_json_output',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function usanetwork_microsite_theme() {
  $found_theme_names = _usanetwork_microsite_include_themes_info();

  $theme = array();

  if (!empty($found_theme_names)) {
    foreach ($found_theme_names as $found_theme_name) {
      $found_themes = module_invoke('usanetwork_microsite', $found_theme_name . '_get_theme_registry_variables');

      if (!empty($found_themes)) {
        $theme += $found_themes;
      }
    }
  }

  return $theme;
}

/**
 * Implements hook_permission().
 * UNUSED now.
 */
function usanetwork_microsite_permission() {
  $perm = array(
    'view microsites' => array(
      'title' => t('View microsites'),
    ),
    'create microsites' => array(
      'title' => t('Create microsites'),
    ),
    'manage microsites' => array(
      'title' => t('Manage microsites'),
    )
  );
  return $perm;
}

/**
 * Implements hook_js_alter().
 */
function usanetwork_microsite_js_alter(&$javascript) {
  $node = menu_get_object();
  if(!empty($node) || $node->type == USANETWORK_MICROSITE_NODE_TYPE) {
    unset($javascript[drupal_get_path('module', 'usanetwork_video_endcard') . '/js/usanetwork_video_endcard.js']);
    //unset($javascript['http://pdk.theplatform.com/pdk/tpPdkController.js']);
  }
}

/**
 * Implements hook_library_alter().
 *
 * Remove tve-player-directive.js from page
 */
function usanetwork_microsite_library_alter(&$libraries, $module) {
  $node = menu_get_object();
  if(!empty($node) || $node->type == USANETWORK_MICROSITE_NODE_TYPE) {
    if ($module == 'tve_auth') {
      unset($libraries['tve_auth']['js'][drupal_get_path('module', 'tve_auth') . '/js/directives/tve-player-directive.js']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function usanetwork_microsite_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'usanetwork_microsite_node_form') {
    // Section types for setting default title title.
    $section_types = array('home', 'about');
    $langcode = $form['field_ms_section']['#language'];
    $field_ms_section_items = &$form['field_ms_section'][$langcode];
    $node = $form['#node'];
    foreach($field_ms_section_items as $key => $section_item) {
      if(isset($section_item['#entity_type']) && $section_item['#entity_type'] == 'field_collection_item') {
        $type = reset($section_item['field_ms_section_type'][$langcode]['#default_value']);
        if (in_array($type, $section_types)) {
          $field_ms_section_items[$key]['field_seo_page_title'][$langcode][0]['value']['#description'] = 'DEFAULT: ' . usanetwork_microsite_get_default_title($node, $type);
          $field_ms_section_items[$key]['field_seo_h1'][$langcode][0]['value']['#description'] = 'DEFAULT: ' . _usanetwork_microsite_get_default_h1($node, $type);
        }
      }
    }
  }
}

/**
 * Microsite node rendering callback.
 */
function usanetwork_microsite_page_callback($entity_type, $node) {
  if (!empty($node) && $node->type == USANETWORK_MICROSITE_NODE_TYPE) {

    if (_usanetwork_microsite_validate_section($node)) {
      return drupal_not_found();
    }
    $theme_name_field = field_get_items('node', $node, 'field_ms_theme');

    if ($theme_name_field) {
      _usanetwork_microsite_include_themes_info();
      _usanetwork_microsite_include_default_css();
      _usanetwork_microsite_include_default_js();

      $theme_name = $theme_name_field[0]['value'];

      $theme_registry_name = 'usanetwork_microsite_' . $theme_name;
      $theme_variables = _usanetwork_microsite_get_theme_variables($node);

      $theme_includes_callback_name = 'usanetwork_microsite_dig_get_theme_includes';

      // Load theme-oriented CSS and JS files.
      if (is_callable($theme_includes_callback_name)) {
        $includes = usanetwork_microsite_dig_get_theme_includes();

        if (!empty($includes)) {
          if (!empty($includes['css'])) {
            foreach ($includes['css'] as $css) {
              drupal_add_css($css);
            }
          }

          if (!empty($includes['js'])) {
            foreach ($includes['js'] as $js) {
              drupal_add_js($js);
            }
          }
        }
      }


      $base_path_field = field_get_items('node', $node, 'field_pathauto_alias');
      if ($base_path_field) {
        $base_path_field = reset($base_path_field);
      }
//      $share_title_field = field_get_items('node', $node, 'field_share_title');
//      if ($share_title_field) {
//        $share_title_field = reset($share_title_field);
//      }
//      $share_description_field = field_get_items('node', $node, 'field_share_description');
//      if ($share_description_field) {
//        $share_description_field = reset($share_description_field);
//      }
//      $share_image_field = field_get_items('node', $node, 'field_share_image');
//      if ($share_image_field) {
//        $share_image_field = reset($share_image_field);
//        if ($share_image_field) {
//          $image_path = file_create_url($share_image_field['uri']);
//        }
//      }
      $microsites_settings = array(
        'nid' => $node->nid,
        'title' => $node->title,
        'base_path' => ($base_path_field) ? '/' . $base_path_field['value'] : '/dig',
//        'share_title' => ($share_title_field) ? $share_title_field['value'] : 'Dig Gallery Testing Sharebar Title',
//        'share_description' => ($share_description_field) ? $share_description_field['value'] : 'Dig Gallery Testing Sharebar: This is the description',
//        'share_image' => ($image_path) ? $image_path : 'http://www.usanetwork.com/sites/usanetwork/files/og_image/suits_2048_OG_0.jpg',
      );
      drupal_add_js(array('microsites_settings' => $microsites_settings), 'setting');

      // Add metatags with metatag module.
      $instance = "{node}:{usanetwork_microsite}";
      $options = array(
        'entity' => $node,
        'entity_type' => 'node',
        'view_mode' => 'full',
      );
      $all_metatags = metatag_metatags_load('node', $node->nid);
      if (!empty($all_metatags[$node->vid])) {
        $metatags = $all_metatags[$node->vid];
        $output = metatag_metatags_view($instance, $metatags, $options);
        metatag_page_set_metatags($instance, $output);
      }

      // Add facebook tracking data.
      if (!empty($node->field_show)) {
        $microsite_wrapper = entity_metadata_wrapper('node', $node);
        $tracking_enabled = _usanetwork_facebook_tracking_enabled($microsite_wrapper->field_show->value(), 'node');
        $tracking_html = _usanetwork_microsite_get_facebook_tracking_html();

        if ($tracking_enabled && $tracking_html) {
          drupal_add_js(array(
            'data' => array(
              'usanetwork_facebook_tracking' => array(
                'id' => USANETWORK_FACEBOOK_TRACKING_ID,
              )
            )
          ));

          drupal_add_js(drupal_get_path('module', 'usanetwork_facebook_tracking') . '/js/usanetwork_facebook_tracking.js');

          $theme_variables['facebook_tracking_html'] = $tracking_html;
        }
      }

      return theme($theme_registry_name, $theme_variables);
    }
  }

  return drupal_not_found();
}

/**
 * Includes 'theme.inc' file of each subtheme of microsite.
 */
function _usanetwork_microsite_include_themes_info() {
  $theme_path = drupal_get_path('theme', 'aurora_usa');
  $dir_path = $theme_path . '/usanetwork_microsite_themes';
  $found_theme_names = array();

  if (is_dir($dir_path)) {
    $dir_handler = opendir($dir_path);

    while (($filename = readdir($dir_handler)) !== FALSE) {
      if ($filename != '.' && $filename != '..') {
        $target_dir_path = $dir_path . '/' . $filename;

        if (!is_dir($target_dir_path)) {
          continue;
        }

        $target_file_path = $target_dir_path . '/theme.inc';

        if (is_file($target_file_path)) {
          require_once $target_file_path;

          $found_theme_names[] = $filename;
        }
      }
    }
  }

  return $found_theme_names;
}

/**
 * Includes common CSS files.
 */
function _usanetwork_microsite_include_default_css() {
  drupal_add_css(drupal_get_path('module', 'usanetwork_microsite')  . '/css/usanetwork_microsite.common.css');
}

/**
 * Includes common JS files.
 */
function _usanetwork_microsite_include_default_js() {
  drupal_add_js(drupal_get_path('module', 'usanetwork_microsite') . '/js/jquery.easing.1.3.js');
  drupal_add_js(drupal_get_path('module', 'usanetwork_microsite') . '/js/jquery.easing.compatibility.js');
  drupal_add_js(drupal_get_path('module', 'usanetwork_microsite') . '/js/microsite_global.js');
  drupal_add_js(drupal_get_path('module', 'usanetwork_microsite') . '/js/microsite_angular.js');
  drupal_add_js(drupal_get_path('module', 'usanetwork_microsite') . '/js/microsite-tve-player-directive.js', array('scope' => 'footer', 'weight' => -1));
}

/**
 * Get current microsite theme name.
 *
 * @return null
 */
function _usanetwork_microsite_get_current_theme_name($node = NULL) {
  // @todo use static cash.
  if(empty($node)) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
    }
    else {
      return NULL;
    }
  }
  $node_wrapper = entity_metadata_wrapper('node', $node);
  return $node_wrapper->field_ms_theme->value();
}

/**
 * Common page renderer for theme.
 */
function _usanetwork_microsite_render_page($microsite_theme_name, $section_wrapper, $node) {
  $section_name = $section_wrapper->field_ms_section_type->value();
  $page_callback_name = '_usanetwork_microsite_render_page_' . $section_name;

  if (is_callable($page_callback_name)) {
    $theme_registry_name = 'usanetwork_microsite_' . $microsite_theme_name . '_page_' . $section_name;
    $theme_variables = $page_callback_name($section_wrapper, $node);

    return theme($theme_registry_name, $theme_variables);
  }
}

/**
 * Renders Home page.
 */
function _usanetwork_microsite_render_page_home($section_wrapper, $node) {
  $section_object = $section_wrapper->value();

  $field_collection_entity_id = $section_object->item_id;
  $show_nid = NULL;

  if (!empty($field_collection_entity_id)) {
    $query = db_select('field_data_field_ms_section', 'sf');
    $query->join('field_data_field_show', 's', 'sf.entity_id=s.entity_id');
    $query->addField('s', 'field_show_target_id', 'show_nid');
    $query->fields('sf', array('entity_id'));
    $query->condition('field_ms_section_value', $field_collection_entity_id);
    $query->range(0, 1);

    $result = $query->execute()->fetch();

    if ($result) {
      //@todo this variable do not use. May by we should delete this code.
      $show_nid = $result->show_nid;
    }
  }

  $theme_variables = array(
    'aspots' => array(),
    'featured' => array(),
/*
    'bspots' => NULL,
    'cspots' => NULL,
    'promo_carousel' => array(),
*/
  );

  if (!empty($section_object->field_usa_tv_a_spot)) {
    $theme_variables['aspots'] = _usanetwork_microsite_theme_render_videos_node_items($section_wrapper->field_usa_tv_a_spot, 'full');
    _usanetwork_microsite_add_intro_data_to_js($section_wrapper->field_usa_tv_a_spot);
  }

  $featured_promo_first_view_mode = (!empty($section_object->field_usa_tv_promo_large) && $section_object->field_usa_tv_promo_large['und'][0]['value'] == 1) ? 'promo_teaser_large' : '';
  if (!empty($section_object->field_usa_tv_promo)) {
    $theme_variables['featured'] = _usanetwork_microsite_theme_render_multiple_node_items($section_wrapper->field_usa_tv_promo, 'promo_teaser', $featured_promo_first_view_mode);
  }

  $characters_section_wrapper =_usanetwork_microsite_get_section_wrapper_by_section_type($node, 'characters');
  if (!empty($characters_section_wrapper)) {
    $characters_section_object = $characters_section_wrapper->value();
    if (!empty($characters_section_object->field_ms_person)) {
      $theme_variables['characters'] = _usanetwork_microsite_theme_render_person_node_items($characters_section_wrapper->field_ms_person);
    }
  }

  return $theme_variables;
}


function _usanetwork_microsite_add_intro_data_to_js($a_spot_field) {
  $show = 'aspot';
  foreach ($a_spot_field as $field_wrapper) {
    $mp4_url = $field_wrapper->field_mp4_video_url->value();
    $webm_url = $field_wrapper->field_webm_video_url->value();
    if(!empty($mp4_url) && !empty($webm_url)) {
      $aspot_settings = array(
        'show' => $show,
        'mp4_url' => $mp4_url,
        'webm_url' => $webm_url,
      );
      drupal_add_js(array('aspotSettings' => $aspot_settings), 'setting');
      break;
    }
  }
}


/**
 * Renders About page.
 */
function _usanetwork_microsite_render_page_about($section_wrapper) {
  $section_object = $section_wrapper->value();

  $theme_variables = array(
    'title' => !empty($section_object->field_ms_section_title)
      ? $section_wrapper->field_ms_section_title->value()
      : '',
    'description' => !empty($section_object->field_ms_section_text)
      ? $section_wrapper->field_ms_section_text->value->value()
      : '',
    'about_quotations' => array(),
  );

  if (!empty($section_object->field_quotation)) {
    $theme_variables['about_quotations'] = _usanetwork_microsite_get_quotations($section_wrapper->field_quotation);
  }

  $h1 = _usanetwork_microsite_get_h1_tag($section_wrapper);
  $theme_variables['h1'] = '';
  $theme_variables['status'] = '';
  if(_usanetwork_microsite_get_current_section_type() == $section_wrapper->field_ms_section_type->value()) {
    $theme_variables['status'] = 'active';
  }
  if(!empty($h1)) {
    $theme_variables['h1'] = $h1;
  }

  return $theme_variables;
}

/**
 * Renders Characters page.
 */
function _usanetwork_microsite_render_page_characters($section_wrapper, $node) {
  $theme_path = drupal_get_path('theme', 'aurora_usa');
  $section_object = $section_wrapper->value();

  $theme_variables = array(
    'people' => array(),
    'characters_navigation' => NULL,
  );
  if (!empty($section_object->field_ms_person)) {
    // Content type is broken, it's impossible to walk in it using EntityMetadataWrapper.
    $person_nodes = $section_wrapper->field_ms_person->value();

    // The first value is object. If there is more than one node it will send like array. Wrapping in array if it has only 1 value.
    if (!is_array($person_nodes)) {
      $person_nodes = array($person_nodes);
    }

    $current_character = _usanetwork_microsite_get_arg_for_current_content($section_wrapper);
    $character_count = 0;
    $is_active_slide = FALSE;
    foreach ($person_nodes as $person_node_key => $current_person_node) {
      if ($current_person_node->current_state != 'published' || empty($current_person_node->status)) {
        continue;
      }
      $person_node_wrapper = entity_metadata_wrapper('node', $current_person_node);
      $person_names = _usanetwork_microsite_get_person_title_and_role_name($current_person_node);
      // @TODO: Replace the following person_id str_replace code with code that gets the person id from the Drupal url path info for that person. Would it be correct to use _usanetwork_microsite_get_suggested_character_url for this?
      $person_id = strtolower(str_replace(array('  ', ' ', '.'), array(' ', '-', ''), trim($person_names['person_title'])));

      $image_field = $person_node_wrapper->field_person_ms_background->value();
      $background_img = file_create_url($image_field['uri']);
      $image_field = $person_node_wrapper->field_usa_character_thumb->value();
      $person_preview_image_url =  image_style_url('media_thumbnail', $image_field['uri']);

      $character_bio = $person_node_wrapper->field_person_ms_character_bio->value();
      $social_links = array(
        'facebook' => $person_node_wrapper->field_usa_link_facebook->value(),
        'twitter' => $person_node_wrapper->field_usa_link_twitter->value(),
        'pinterest' => $person_node_wrapper->field_usa_link_pinterest->value(),
        'tumblr' => $person_node_wrapper->field_usa_link_tumblr->value(),
      );
      $character_url = _usanetwork_microsite_get_suggested_character_url($current_person_node);
      $status = '';
      if (empty($current_character) && $character_count == 0) {
        $current_person = $current_person_node;
        $status = 'active';
        $is_active_slide = TRUE;
      }
      elseif (!empty($current_character) && $current_character == $character_url) {
        $current_person = $current_person_node;
        $status = 'active';
        $is_active_slide = TRUE;
      }
      $theme_variables['people'][] = array(
        'id' => $person_id,
        'title' => $person_names['person_title'],
        'url' => $character_url,
        'description' => !empty($current_person_node->body)
          ? $current_person_node->body[$current_person_node->language][0]['value']
          : NULL,
        'role' => $person_names['role_name'],
        'character_bio_summary' => $character_bio['summary'],
        'character_bio' => $character_bio['value'],
        'quotes' => _usanetwork_microsite_get_quotations($person_node_wrapper->field_quotation),
        'status' => $status,
        'background_url' => $background_img,
        'preview_image_url' => $person_preview_image_url,
        'social' => $social_links,
      );
      $character_count++;
    }
  }

  if (!empty($current_character) && !$is_active_slide) {
    drupal_not_found();
  }

  $theme_variables = array_merge($theme_variables, _usanetwork_microsite_set_staus_and_h1_to_variable($current_person, $section_wrapper));

/*
  if (!empty($theme_variables['characters_navigation'])) {
    $theme_variables['characters_navigation'] = implode('', $theme_variables['characters_navigation']);
  }
*/

  $theme_variables['section_title'] = $section_wrapper->field_ms_section_title->value();
  return $theme_variables;
}

/**
 * Renders gallery page.
 */
function _usanetwork_microsite_render_page_galleries($section_wrapper) {
  $section_object = $section_wrapper->value();
  $theme_variables = array();

  drupal_add_js((drupal_get_path('module', 'gigya') . '/js/gigya_sharebar.js'));
  drupal_add_css((drupal_get_path('module', 'gigya') . '/css/gigya.css'));

  if (!empty($section_object->field_ms_media_gallery)) {
    $gallery_nodes = $section_wrapper->field_ms_media_gallery->value();

    // The first value is object. If there is more than one node it will send like array. Wrapping in array if it has only 1 value.
    if (!is_array($gallery_nodes)) {
      $gallery_nodes = array($gallery_nodes);
    }

    //@todo comment this logic.
    $gallery_arg = _usanetwork_microsite_get_arg_for_current_content($section_wrapper);
    foreach ($gallery_nodes as $current_gallery_node) {
      if($current_gallery_node->status != NODE_PUBLISHED) {
        continue;
      }
      if(!empty($gallery_arg) && $gallery_arg != _usanetwork_microsite_get_suggested_gallery_url($current_gallery_node)) {
        continue;
      }
      $theme_variables['gallery'] = usanetwork_microsite_get_rendered_gallery($current_gallery_node);
      break;
    }

    if(empty($theme_variables['gallery'])) {
      drupal_not_found();
    }

    $theme_variables = array_merge($theme_variables, _usanetwork_microsite_set_staus_and_h1_to_variable($current_gallery_node, $section_wrapper));

    $gallery_types = array('Episodic Gallery');
    $theme_variables['episodic_galleries'] = _usanetwork_microsite_render_gallery_navigation($gallery_nodes, $gallery_types);
    $gallery_types = array(
      'Character Gallery',
      'GIF Gallery',
      '0',
    );
    $theme_variables['character_galleries'] = _usanetwork_microsite_render_gallery_navigation($gallery_nodes, $gallery_types);
  }

  return $theme_variables;
}


/**
 * Get rendered gallery.
 *
 * @param $node
 */
function usanetwork_microsite_get_rendered_gallery($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $gallery_view = node_view($node, 'inline_content');
  $body_value = NULL;
  if (!empty($node->body)) {
    $body_value = $node_wrapper->body->value();
  }
  return array(
    'gallery_nid' => $node->nid,
    'title' => $node->title,
    'description' => $body_value,
    'rendered' => drupal_render($gallery_view),
  );
}


/**
 * Render gallery navigation and set theme variables.
 *
 * @param $gallery_nodes
 * @param array $gallery_types
 */
function _usanetwork_microsite_render_gallery_navigation($gallery_nodes, $gallery_types = array()) {
  $items = array();
  foreach($gallery_nodes as $node) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $gallery_type = $node_wrapper->field_gallery_type->value();
    $image_field = $node_wrapper->field_cover_item->value();
    $gallery_preview_image =  image_style_url('300x250', $image_field['uri']);
    if($node->status == 1 && in_array($gallery_type, $gallery_types, true) !== false) {
      $title = $node->title;
      $cover_img = $gallery_preview_image;
      $items[] = array(
        'url' => _usanetwork_microsite_get_suggested_gallery_url($node),
        'gallery_nid' => $node->nid,
        'title' => $title,
        'cover_img' => $cover_img,
      );
    }
  }
  return $items;
}

/**
 * Renders games page.
 */
function _usanetwork_microsite_render_page_games($section_wrapper) {
  $section_object = $section_wrapper->value();

  $theme_variables = array(
    'pages' => array(),
  );

  if (!empty($section_object->field_ms_catchall_page)) {
    foreach ($section_wrapper->field_ms_catchall_page as $game_page_wrapper) {
      $game_page_object = $game_page_wrapper->value();

      if (!empty($game_page_object->field_usa_css)) {
        drupal_add_css($game_page_wrapper->field_usa_css->value(), array('type' => 'inline'));
      }

      if (!empty($game_page_object->field_usa_catchall_js)) {
        drupal_add_css($game_page_wrapper->field_usa_catchall_js->value(), array('type' => 'inline'));
      }

      $theme_variables['pages'][] = array(
        'html' => !empty($game_page_object->field_usa_catchall_html)
          ? $game_page_wrapper->field_usa_catchall_html->value()
          : NULL,
      );

      // Temporary return only first game!
      $theme_variables['pages'] = reset($theme_variables['pages']);
      break;
    }
  }

  return $theme_variables;
}

/**
 * Provides suggested video url path value
 */
function _usanetwork_microsite_get_suggested_video_url($video_file) {
  // make filename lowercase and remove any extra space from the beginning and end
  $video_filename = strtolower(trim($video_file->filename));
  // remove any characters that are not letters, numbers or whitespace
  $suggested_url = preg_replace('/[^a-z0-9 ]/', "", $video_filename);
  // replace spaces with '-'
  $suggested_url = str_replace(' ', '-', $suggested_url);
  $full_episode = _usanetwork_microsite_define_full_episode($video_file);
  if($full_episode) {
    return USANETWORK_MICROSITE_FULL_VIDEO_PREFIX . $suggested_url;
  }

  return USANETWORK_MICROSITE_VIDEO_PREFIX . $suggested_url;
}

/**
 * Renders videos page.
 */
function _usanetwork_microsite_render_page_videos($section_wrapper, $node) {
  $section_object = $section_wrapper->value();
  $theme_variables = array();
  if (!empty($section_object->field_ms_videos)) {
    $video_files = $section_wrapper->field_ms_videos->value();
    // The first value is object. If there is more than one node it will send like array. Wrapping in array if it has only 1 value.
    if (!is_array($video_files)) {
      $video_files = array($video_files);
    }

    $show_in_player = 0;
    $first_output_id = NULL;

    $video_for_player = _usanetwork_microsite_get_arg_for_current_content($section_wrapper);
    foreach ($video_files as $v_key => $current_video_file) {
      $published = !empty($current_video_file->mpx_video_data['status']) ? $current_video_file->mpx_video_data['status'] : NULL;
      if ($first_output_id === NULL && $published) {
        $first_output_id = $v_key;
      }
      $suggested_video_url = _usanetwork_microsite_get_suggested_video_url($current_video_file);
      // if there's a video listed in the url, set it as the video to show in the player
      $state = '';
      if (!empty($video_for_player) && $video_for_player == $suggested_video_url) {
        $show_in_player = $v_key;
        $state = 'active';
      }
      elseif(empty($video_for_player) && $first_output_id == $v_key) {
        $state = 'active';
        $show_in_player = $first_output_id;
      }
      $video_account = _media_theplatform_mpx_get_account_data($current_video_file->mpx_video_data['parent_account']);
      $account_id = $video_account->account_pid;
      $full_episode = _usanetwork_microsite_define_full_episode($current_video_file);
      $player_id = _usanetwork_microsite_define_videoplayer($current_video_file);
      
      $is_full_episode = 'false';
      if($full_episode) {
        $is_full_episode = 'true';
      }
      if ($published) {
        $theme_variables['videos'][] = array(
          'fid' => $current_video_file->fid,
          'url' => $suggested_video_url,
          'rendered' => drupal_render(file_view($current_video_file, 'vid_teaser_show_general')),
          'account_id' => $account_id,
          'video_id' => $current_video_file->mpx_video_data['default_released_file_pid'],
          'player_id' => $player_id,
          'is_full_episode' => $is_full_episode,
          'state' => $state,
        );
      }
    }

    // Get video file.
    $file = $video_files[$show_in_player];
    // Get player variables.
    $video_desc = _usanetwork_microsite_set_variables_for_video_description($file);
    $microsite_theme_name = _usanetwork_microsite_get_current_theme_name();

    $menu_items = _usa_auth_prepare_menu_items();
    $links = array(
      '#theme' => 'item_list',
      '#items' => $menu_items,
      '#attributes' => array('class' => array('tve-header-links', 'inline')),
      '#prefix' => '<div class="links-wrapper">',
      '#suffix' => '</div>',
    );

    $theme_variables['in_player'] = array(
      'links' => $links
    );
    $theme_registry_name = 'usanetwork_microsite_' . $microsite_theme_name . '_video_desc';
    $video_desc = array_merge($video_desc, _usanetwork_microsite_set_staus_and_h1_to_variable($file, $section_wrapper));
    $theme_variables['video_desc'] = theme($theme_registry_name, $video_desc);
  }
  return $theme_variables;
}

/*
 * Heplper function for define correct video player
 */
function _usanetwork_microsite_define_videoplayer($file) {
  $full_episode = _usanetwork_microsite_define_full_episode($file);
  $auth_episode = _usanetwork_microsite_define_auth($file);

  if ($full_episode) {
    if ($auth_episode) {
      $player_id = USANETWORK_MICROSITE_AUTH_PLAYER;
    } else {
      $player_id = USANETWORK_MICROSITE_NOAUTH_PLAYER;
    }
  } else {
    $player_id = USANETWORK_MICROSITE_USA_PLAYER;
  }
      
  return $player_id;
}

/**
 * Set in player variables.
 *
 * @param $file
 * @return array
 */
function _usanetwork_microsite_set_variables_for_video_description($file) {
  $file_wrapper = entity_metadata_wrapper('file', $file);

  return array(
    'title' => !empty($file->field_mpx_title)
      ? $file_wrapper->field_mpx_title->value()
      : NULL,
    'description' => !empty($file->field_mpx_description)
      ? $file_wrapper->field_mpx_description->value()
      : NULL,
    'season_number' => !empty($file->field_mpx_season_number)
      ? $file_wrapper->field_mpx_season_number->value()
      : NULL,
    'episode_number' => !empty($file->field_mpx_episode_number)
      ? $file_wrapper->field_mpx_episode_number->value()
      : NULL,
    'duration' => !empty($file->field_mpx_duration)
      ? gmdate("H:i:s", $file_wrapper->field_mpx_duration->value())
      : NULL,
  );
}

function usanetwork_microsite_get_video_in_player($node, $fid = NULL, $autoplay = 'fasle') {
  if(!empty($fid)) {
    $file = file_load($fid);
  }
  else {
    $video_files = _usanetwork_microsite_get_related_content_from_node($node, 'videos');
    $file = reset($video_files);
  }
 
  //set video player
  $player_id = _usanetwork_microsite_define_videoplayer($file);
  $video = theme('pub_mpx_video', array(
    'file' => $file,
    'pub_mpx_player_parameters' => array('autoPlay' => $autoplay, 'form' => 'html', 'nid' => $node->nid),
    'player_id' => $player_id,
  ));
  
  //set image for not loggined user
  $auth_episode = _usanetwork_microsite_define_auth($file);
  if ($auth_episode) {
    $image = media_theplatform_mpx_file_formatter_image_view($file, array('settings' => array('image_style' => 'video_full')), '');
    $renderable_image = theme('image', array('path' =>$image['#path']));
  }
  
  //set video descriprion
  $video_desc = _usanetwork_microsite_set_variables_for_video_description($file);
  $microsite_theme_name = _usanetwork_microsite_get_current_theme_name($node);
  $theme_registry_name = 'usanetwork_microsite_' . $microsite_theme_name . '_video_desc';
  
  $result = array(
     'default_image' => isset($renderable_image) ? $renderable_image : '',
     'player' => $video,
     'description_template' => theme($theme_registry_name, array('in_player' => $video_desc)),
  );
  drupal_json_output($result);
  exit();
//  return theme($theme_registry_name, array('in_player' => $video_desc));
}

/**
 * Get array of content objects related with node.
 *
 * @param $node
 * @return mixed
 */
function _usanetwork_microsite_get_related_content_from_node($node, $type) {
  // @todo May be necessary use static cash.
  $section_wrapper = _usanetwork_microsite_get_section_wrapper_by_type($node, $type);
  // @todo necessary use relationship array with main fields for section types. For example array('video' => 'field_ms_videos').
  if($type == 'videos') {
    return $section_wrapper->field_ms_videos->value();
  }
  elseif($type == 'characters') {
    return $section_wrapper->field_ms_person->value();
  }
  elseif($type == 'galleries') {
    return $section_wrapper->field_ms_media_gallery->value();
  }
  return NULL;
}

/**
 * Get video file object by url parameter.
 *
 * @param $node
 * @return mixed
 */
function _usanetwork_microsite_get_video_file_by_url($node, $param, $clean_url = TRUE) {
  //@todo Sections name to constant or other way that would hold it.
  $files = _usanetwork_microsite_get_related_content_from_node($node, 'videos');
  foreach($files as $file) {
    $full_episode = _usanetwork_microsite_define_full_episode($file);
    if ($clean_url) {
      if($full_episode) {
        $prefix = USANETWORK_MICROSITE_FULL_VIDEO_PREFIX;
      }
      else {
        $prefix = USANETWORK_MICROSITE_VIDEO_PREFIX;
      }
    } else {
      $prefix = '';
    }
    if ($prefix . $param == _usanetwork_microsite_get_suggested_video_url($file)) {
      return $file;
    }
  }
  return NULL;
}

/**
 * Get person node by url parameter.
 *
 * @param $node
 * @param $param
 * @return mixed
 */
function _usanetwork_microsite_get_person_by_url($node, $param) {
  //@todo Sections name to constant or other way that would hold it.
  $characters = _usanetwork_microsite_get_related_content_from_node($node, 'characters');
  foreach($characters as $node) {
    if ($param == _usanetwork_microsite_get_suggested_character_url($node)) {
      return $node;
    }
  }
  return NULL;
}

/**
 * Get gallery node by url parameter.
 *
 * @param $node
 * @param $param
 *
 * @return mixed
 */
function _usanetwork_microsite_get_gallery_by_url($node, $param) {
  //@todo may be it can make in one function with _usanetwork_microsite_get_person_by_url
  $galleries = _usanetwork_microsite_get_related_content_from_node($node, 'galleries');
  foreach($galleries as $node) {
    if ($param == _usanetwork_microsite_get_suggested_gallery_url($node)) {
      return $node;
    }
  }
  return NULL;
}

function usanetwork_microsite_get_video_in_player_ajax_callback($output) {
  print $output;
  drupal_page_footer();
}

function _usanetwork_microsite_get_section_wrapper_by_type($node, $type) {
  // @todo may be exist better way get section_wrapper.
  $node_wrapper = entity_metadata_wrapper('node', $node);
  foreach ($node_wrapper->field_ms_section as $section_wrapper) {
    // Fill base section values
    $section_base_variables = _usanetwork_microsite_theme_get_section_base_variables($section_wrapper);
    if ($section_base_variables['type'] == $type) {
      return $section_wrapper;
    }
  }
  return NULL;
}

/**
 * Returns quotations array.
 */
function _usanetwork_microsite_get_quotations($quotation_field_wrapper) {
  $quotations = array();

  foreach ($quotation_field_wrapper as $quotation_wrapper) {
    $quotation_object = $quotation_wrapper->value();

    $quotations[] = array(
      'quote' => !empty($quotation_object->field_quote)
        ? $quotation_wrapper->field_quote->value()
        : NULL,
      'source' => !empty($quotation_object->field_quote_source)
        ? $quotation_wrapper->field_quote_source->value()
        : NULL,
    );
  }

  return $quotations;
}

/**
 * Returns background image URL of the section.
 */
function _usanetwork_microsite_get_section_background_image($section_wrapper, $image_style = NULL) {
  $section_object = $section_wrapper->value();

  if (!empty($section_object->field_ms_section_bg_image)) {
    $file_uri = $section_wrapper->field_ms_section_bg_image->file->value()->uri;

    if (!empty($image_style)) {
      return image_style_url($image_style, $file_uri);
    }

    return file_create_url($file_uri);
  }

  return NULL;
}


/**
 * Prepares theme variables for microsite theme.
 */
function _usanetwork_microsite_get_theme_variables($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Fill base variables
  $theme_variables = _usanetwork_microsite_theme_get_base_variables($node_wrapper);
  $navigation_links = array();

  // Detect sections availability
  if (!empty($node->field_ms_section)) {
    $pages = array();
    $games = array();
    // Walk through connected sections
    $i = 1;
    foreach ($node_wrapper->field_ms_section as $section_wrapper) {
      // Fill base section values
      $section_base_variables = _usanetwork_microsite_theme_get_section_base_variables($section_wrapper);

      if (empty($section_base_variables)) {
        continue;
      }

      $pages[$section_base_variables['type']] = array(
        'type' => $section_base_variables['type'],
        'name' => $section_base_variables['title'],
        'link' => l($section_base_variables['title'], '#', array('external' => TRUE, 'attributes' => array('data-menuitem' => $i, 'class' => 'scroll-link'))),
//        'background_url' => _usanetwork_microsite_get_section_background_image($section_wrapper),
        'content' => _usanetwork_microsite_render_page($node_wrapper->field_ms_theme->value(), $section_wrapper, $node),
      );
      $i++;

      if ($section_base_variables['type'] == 'games') {
        foreach ($section_wrapper->field_ms_catchall_page as $games_page_wrapper) {
          $games = array(
            'nid' => $games_page_wrapper->nid->value(),
            'title' => $games_page_wrapper->title->value(),
          );
        }
      }
    }

    $theme_variables['sections'] = $pages;
    $theme_variables['games'] = $games;

    end($theme_variables['sections']);
    $last_section_key = key($theme_variables['sections']);
    $theme_variables['footer'] = _usanetwork_microsite_get_footer();
    $theme_variables['sections'][$last_section_key]['is_last'] = TRUE;
    $theme_variables['current_section'] = _usanetwork_microsite_get_current_section_type();
  }

  $theme_variables['sections_navlinks'] = $navigation_links;

  $theme_variables['h1'] = '';
  $section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, 'home');
  $h1 = _usanetwork_microsite_get_h1_tag($section_wrapper);
  if(!empty($h1)) {
    $theme_variables['h1'] = $h1;
  }

  return $theme_variables;
}

/**
 * Render footer blocks and return them.
 *
 * @return string
 */
function _usanetwork_microsite_get_footer() {
  $block_links = module_invoke('usanetwork_blocks', 'block_view', 'usa_footer_links');
  $block_message = module_invoke('usanetwork_blocks', 'block_view', 'usa_footer_message');
  return render($block_links['content']) . render($block_message['content']);
}

/**
 * Returns theme base variables.
 */
function _usanetwork_microsite_theme_get_base_variables($node_wrapper) {
  $node = $node_wrapper->value();

  return array(
    'show' => !empty($node->field_show)
      ? $node_wrapper->field_show->nid->value()
      : NULL,
    'theme' => !empty($node->field_ms_theme)
      ? $node_wrapper->field_ms_theme->value()
      : NULL,
    'profile_image' => !empty($node->field_ms_small_logo)
      ? file_create_url($node_wrapper->field_ms_small_logo->file->value()->uri)
      : NULL,
    'tune_in' => !empty($node->field_ms_tune_in)
      ? $node_wrapper->field_ms_tune_in->value()
      : NULL,
    'section_separator' => !empty($node->field_ms_section_separator)
      ? $node_wrapper->field_ms_section_separator->value()
      : NULL,
  );
}

/**
 * Returns base variables of sections.
 */
function _usanetwork_microsite_theme_get_section_base_variables($section_wrapper) {
  $section_node = $section_wrapper->value();

  if (!empty($section_node->field_ms_section_enabled) && $section_wrapper->field_ms_section_enabled->value() == 1) {
    $is_enabled = TRUE;
  }

  // Do not process this section if it disabled
  if (!$is_enabled) {
    return array();
  }

  return array(
    'section_enabled' => $is_enabled,
    'title' => !empty($section_node->field_ms_section_title)
      ? $section_wrapper->field_ms_section_title->value()
      : NULL,
    'bg_image' => !empty($section_node->field_ms_section_bg_image)
      ? file_create_url($section_wrapper->field_ms_section_bg_image->file->value()->uri)
      : NULL,
    'type' => !empty($section_node->field_ms_section_type)
      ? $section_wrapper->field_ms_section_type->value()
      : NULL,
    'name' => !empty($section_node->field_ms_section_type)
      ? $section_wrapper->field_ms_section_type->value()
      : NULL,
  );
}

/**
 * Renders theme elements of section.
 * FEATURED function, unused now. Left as EXAMPLE how to get a field value.
 */
function _usanetwork_microsite_theme_get_section_theme_variables($section_base_variables, $section_wrapper) {
  $section_node = $section_wrapper->value();

  // Render all A-Spots
  if (!empty($section_node->field_usa_tv_a_spot)) {
    $section_base_variables['aspots'] = _usanetwork_microsite_theme_render_videos_node_items($section_wrapper->field_usa_tv_a_spot, 'teaser');
  }

/*
  // Render B-Spot
  if (!empty($section_node->field_usa_hp_brefs)) {
    $section_base_variables['bspots'] = _usanetwork_microsite_theme_render_single_node_item($section_wrapper->field_usa_hp_brefs, 'promo_teaser');
  }

  // Render C-Spots
  if (!empty($section_node->field_usa_hp_crefs)) {
    $section_base_variables['cspots'] = _usanetwork_microsite_theme_render_single_node_item($section_wrapper->field_usa_hp_crefs, 'promo_teaser');
  }
*/
  // Render Media Gallery
  if (!empty($section_node->field_ms_media_gallery)) {
    $section_base_variables['media_gallery'] = _usanetwork_microsite_theme_render_single_node_item($section_wrapper->field_ms_media_gallery, 'full');
  }

  // Render Description
  if (!empty($section_node->field_ms_section_text)) {
    $section_base_variables['description'] = $section_wrapper->field_ms_section_text->value->value();
  }

  // Render Persons
  if (!empty($section_node->field_ms_person)) {
    $persons = array();

    // Content type is broken, it's impossible to walk in it using EntityMetadataWrapper.
    $person_nodes = $section_wrapper->field_ms_person->value();

    // 1 value is object, more that 1 is arra
    if (!is_array($person_nodes)) {
      $person_nodes = array($person_nodes);
    }

    foreach ($person_nodes as $current_person_node) {
      $person = array(
        'title' => $current_person_node->title,
        'description' => !empty($current_person_node->body)
          ? $current_person_node->body[$current_person_node->language][0]['value']
          : NULL,
        'quotes' => array(), // The Person content type currently does not have QUOTATION field.
      );

      $persons[] = $person;
    }

    $section_base_variables['people'] = $persons;
  }

/*
  // Rendering Promo Carousel
  if (!empty($section_node->field_hp_promo_carousel)) {
    $section_base_variables['promo_carousel'] = _usanetwork_microsite_theme_render_single_node_item($section_wrapper->field_hp_promo_carousel, 'teaser');
  }

  // Rendering Features Promos
  if (!empty($section_node->field_hp_promos)) {
    $section_base_variables['featured_promo'] = _usanetwork_microsite_theme_render_single_node_item($section_wrapper->field_hp_promos, 'teaser');
  }
*/

  // Render quotations
  if (!empty($section_node->field_quotation)) {
    $quotes = array();

    foreach ($section_wrapper->field_quotation as $quotation_wrapper) {
      $quotation_entity = $quotation_wrapper->value();

      $quote = array(
        'quote' => !empty($quotation_entity->field_quote)
          ? $quotation_wrapper->field_quote->value()
          : NULL,
        'source' => !empty($quotation_entity->field_quote_source)
          ? $quotation_wrapper->field_quote_source->value()
          : NULL,
      );

      $quotes[] = $quote;
    }

    $section_base_variables['about_quotations'] = $quotes;
  }

  // Render Catchalls
  if (!empty($section_node->field_ms_catchall_page)) {
    $catchalls = array();

    foreach ($section_wrapper->field_ms_catchall_page as $catchall_wrapper) {
      $catchall_node = $catchall_wrapper->value();
      $catchall_view = node_view($catchall_node, 'full_content'); //'teaser');

      $catchalls[] = drupal_render($catchall_view);
    }

    $section_base_variables['catchalls'] = $catchalls;
  }

  return $section_base_variables;
}

/**
 * Renders all elements of node field.
 */
function _usanetwork_microsite_theme_render_multiple_node_items($node_wrapper_field, $view_mode = 'teaser', $first_view_mode = '') {
  $rendered_items = array();

  $count = 0;
  foreach ($node_wrapper_field as $field_wrapper) {
    $current_view_mode = ($count == 0 && $first_view_mode != '') ? $first_view_mode : $view_mode;
    $field_view = node_view($field_wrapper->value(), $current_view_mode);
    $rendered_items[] = drupal_render($field_view);
    $count++;
  }

  return $rendered_items;
}

/**
 * Renders all videos of node field.
 */
function _usanetwork_microsite_theme_render_videos_node_items($node_wrapper_field, $view_mode = 'teaser', $first_view_mode = '') {
  $items = array();
  $aspot_video_fid = NULL;
  $video_url_param = '';
  $account_id = '';
  $player_id = '';
  $count = 0;
  $node = menu_get_object();
  foreach ($node_wrapper_field as $field_wrapper) {
    $mp4_url = $field_wrapper->field_mp4_video_url->value();
    $webm_url = $field_wrapper->field_webm_video_url->value();
    $a_spot_with_intro = FALSE;
    if(!empty($mp4_url) && !empty($webm_url)) {
      $a_spot_with_intro = TRUE;
    }
    $a_spot_link = $field_wrapper->field_usa_aspot_link->value();
    if(!empty($a_spot_link['url'])) {
      $video_url_param = _usanetwork_microsite_get_video_parameter_by_url($a_spot_link['url']);
      $file = _usanetwork_microsite_get_video_file_by_url($node, $video_url_param);
      $aspot_video_fid = $file->fid;
      $video_account = _media_theplatform_mpx_get_account_data($file->mpx_video_data['parent_account']);
      $account_id = $video_account->account_pid;
      $player_id = $file->mpx_video_data['default_released_file_pid'];
    }
    $current_view_mode = ($count == 0 && $first_view_mode != '') ? $first_view_mode : $view_mode;
    $field_view = node_view($field_wrapper->value(), $current_view_mode);
    $items[] = array(
      'rendered_item' => drupal_render($field_view),
      'a_spot_with_intro' => $a_spot_with_intro,
      'video_param' => $video_url_param,
      'fid' => $aspot_video_fid,
      'account_id' => $account_id,
      'player_id' => $player_id,
    );
    $count++;
  }

  return $items;
}

/**
 * Renders all person node fields.
 */
function _usanetwork_microsite_theme_render_person_node_items($node_wrapper_field) {
  $items = array();
  foreach ($node_wrapper_field as $field_wrapper) {
    $person_node = $field_wrapper->value();
    $person_title = _usanetwork_microsite_get_person_title_and_role_name($person_node);
    $image_field = $field_wrapper->field_usa_character_thumb->value();
    $image_url = image_style_url('meet_the_cast_carousel', $image_field['uri']);
    $items[] = array(
      'url' => _usanetwork_microsite_get_suggested_character_url($person_node),
      'title' => $person_title['person_title'],
      'image_url' => $image_url,
    );
  }
  return $items;
}

/**
 * Parse url and get current video parameter.
 *
 * @param $url
 * @return null
 */
function _usanetwork_microsite_get_video_parameter_by_url($url) {
  $parts = explode('videos/', $url);
  if(isset($parts[1])) {
    $parts_with_param = explode('/', $parts[1]);
    return $parts_with_param[0];
  }
  return NULL;
}

/**
 * Renders first element of node field.
 */
function _usanetwork_microsite_theme_render_single_node_item($node_wrapper_field, $view_mode = 'teaser') {
  $node = _usanetwork_microsite_get_first_emwrapper_node($node_wrapper_field);
  $node_view = node_view($node, $view_mode);

  return drupal_render($node_view);
}

/**
 * Get first node by node wrapper field.
 *
 * @param $node_wrapper_field
 * @return array|mixed
 */
function _usanetwork_microsite_get_first_emwrapper_node($node_wrapper_field) {
  $node = $node_wrapper_field->value();

  if (is_array($node)) {
    $node = reset($node);
  }

  return $node;
}

/**
 * Implements hook_preprocess_html
 * The following is needed for robots that crawl the page,
 * like the Facebook robots
 */
function usanetwork_microsite_preprocess_html(&$vars) {
  $head_title = NULL;
  $node = menu_get_object();
  if(!isset($node->type) || $node->type != 'usanetwork_microsite') {
    return;
  }
  $title = !empty($node->title) ? $node->title : 'USA Network Microsite';
  $args = arg();
  $section_type = _usanetwork_microsite_get_current_section_type();
  switch ($section_type) {
    case 'home':
      $section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, $section_type);
      _usanetwork_microsite_set_meta_description($section_wrapper);
      $head_title = $section_wrapper->field_seo_page_title->value();
      if(empty($head_title)) {
        $head_title = usanetwork_microsite_get_default_title($node, $section_type);
      }
      break;
    case 'videos':
      $head_title = t('Videos | ' . $title . ' | USA Network');
      if(isset($args[4])) {
        $video_file = _usanetwork_microsite_get_video_file_by_url($node, $args[4]);
        _usanetwork_microsite_set_meta_description($video_file);
        $video_file_wrapper = entity_metadata_wrapper('file', $video_file);
        $page_title = $video_file_wrapper->field_seo_page_title->value();
        if(isset($video_file) && !empty($video_file->filename) && empty($page_title)) {
          $head_title = $video_file->filename . ' | ' . $head_title;
        }
      }
      else {
        $videos_section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, 'videos');
        if (!empty($videos_section_wrapper)) {
          $videos_section_object = $videos_section_wrapper->value();
          if (!empty($videos_section_object->field_ms_videos)) {
            $attached_video = _usanetwork_microsite_get_first_published_item($videos_section_wrapper->field_ms_videos);
            if (!empty($attached_video)) {
              $video_file_wrapper = entity_metadata_wrapper('file', $attached_video);
              $page_title = $video_file_wrapper->field_seo_page_title->value();
              _usanetwork_microsite_set_meta_description($attached_video);
              if (empty($page_title)) {
                $head_title = $attached_video->filename . ' | ' . $head_title;
              }
              else {
                $head_title = $page_title;
              }
            }
          }
        }
      }
      break;
    case 'characters':
      $head_title = t('Characters | ' . $title . ' | USA Network');
      if (isset($args[4])) {
        $character_node = _usanetwork_microsite_get_person_by_url($node, $args[4]);
        _usanetwork_microsite_set_meta_description($node);
        if(!empty($character_node)) {
          $character_node_wrapper = entity_metadata_wrapper('node', $character_node);
          $page_title = $character_node_wrapper->field_seo_page_title->value();
          if(empty($page_title)) {
            $person_names = _usanetwork_microsite_get_person_title_and_role_name($character_node);
            $head_title = $person_names['person_title'] . ' | ' . $head_title;
          }
          else {
            $head_title = $page_title;
          }
        }
      }
      else {
        $characters_section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, 'characters');
        if (!empty($characters_section_wrapper)) {
          $characters_section_object = $characters_section_wrapper->value();
          if (!empty($characters_section_object->field_ms_person)) {
            $characters_nodes = $characters_section_wrapper->field_ms_person->value();
            $character_node = current($characters_nodes);
            if(!empty($character_node)) {
              $character_node_wrapper = entity_metadata_wrapper('node', $character_node);
              $page_title = $character_node_wrapper->field_seo_page_title->value();
              _usanetwork_microsite_set_meta_description($character_node);
              if (empty($page_title)) {
                $person_names = _usanetwork_microsite_get_person_title_and_role_name($character_node);
                $head_title = $person_names['person_title'] . ' | ' . $head_title;
              }
              else {
                $head_title = $page_title;
              }
            }
          }
        }
      }
      break;
    case 'galleries':
      $head_title = t('Gallery | ' . $title . ' | USA Network');
      if(isset($args[4])) {
        $gallery_node = _usanetwork_microsite_get_gallery_by_url($node, $args[4]);
        if(!empty($gallery_node)) {
          $gallery_node_wrapper = entity_metadata_wrapper('node', $gallery_node);
          $page_title = $gallery_node_wrapper->field_seo_page_title->value();
          _usanetwork_microsite_set_meta_description($gallery_node);
          if(empty($page_title)) {
            $head_title = $gallery_node->title . ' | ' . $head_title;
          }
          else {
            $head_title = $page_title;
          }
        }
      }
      else {
        $galleries_section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, 'galleries');
        if (!empty($galleries_section_wrapper)) {
          $galleries_section_object = $galleries_section_wrapper->value();
          if (!empty($galleries_section_object->field_ms_media_gallery)) {
            $attached_gallery = _usanetwork_microsite_get_first_published_item($galleries_section_wrapper->field_ms_media_gallery);
            if(!empty($attached_gallery)) {
              $gallery_node_wrapper = entity_metadata_wrapper('node', $attached_gallery);
              _usanetwork_microsite_set_meta_description($attached_gallery);
              $page_title = $gallery_node_wrapper->field_seo_page_title->value();
              if (empty($page_title)) {
                $head_title = $attached_gallery->title . ' | ' . $head_title;
              }
              else {
                $head_title = $page_title;
              }
            }
          }
        }
      }
      break;
    case 'about':
      $section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, 'about');
      $head_title = $section_wrapper->field_seo_page_title->value();
      if(empty($head_title)) {
        $head_title = usanetwork_microsite_get_default_title($node, $section_type);
      }
      break;
    case 'games':
      $section_wrapper = _usanetwork_microsite_get_section_wrapper_by_section_type($node, 'games');
      $head_title = $section_wrapper->field_seo_page_title->value();
      if(empty($head_title)) {
        $head_title = t('Games | ' . $title . ' | USA Network');
      }
      break;
    default:
      $head_title = t($title . ' | USA Network');
      break;
  }

  // If there are head titles print the new ones
  if (!empty($head_title)) {
    $vars['head_title'] = $head_title;
  }
}

function usanetwork_microsite_get_default_title($node, $section_type) {
  $title = !empty($node->title) ? $node->title : 'USA Network Microsite';
  if ($section_type == 'home') {
   $head_title = $title . ' | USA Network';
  }
  elseif ($section_type == 'about') {
    $head_title = 'About | ' . $title . ' | USA Network';
  }
  return $head_title;
}

/**
 * Returns a first published item from field with multiple data
 *
 * @param $entity_wrapper - EntityMetadataWrapper object of target field.
 */
function _usanetwork_microsite_get_first_published_item($entity_wrapper) {
  if (empty($entity_wrapper)) {
    return NULL;
  }

  $entity = $entity_wrapper->value();

  if (!is_array($entity) && $entity->status == NODE_PUBLISHED) {
    return $entity;
  }
  else {
    foreach ($entity as $entity_object) {
      if ($entity_object->status == NODE_PUBLISHED) {
        return $entity_object;
      }
    }
  }

  return NULL;
}

/**
 * Menu callback for related items.
 *
 */
function  usanetwork_microsite_endcard_related_items($node, $guid) {
  $items = array();
  $files = _usanetwork_microsite_get_related_content_from_node($node, 'videos');
  if ($files) {
    foreach ($files as $related_file) {
      if($related_file->mpx_video_data['guid'] != $guid && !empty($related_file->published)) {
        $video_account = _media_theplatform_mpx_get_account_data($related_file->mpx_video_data['parent_account']);
        $account_id = $video_account->account_pid;
        $full_episode = _usanetwork_microsite_define_full_episode($related_file);
        $url_param = _usanetwork_microsite_get_suggested_video_url($related_file);
        $item = array(
          'fid' => $related_file->fid,
          'account_id' => $account_id,
          'video_id' => $related_file->mpx_video_data['default_released_file_pid'],
          'player_id' => ($full_episode) ? USANETWORK_MICROSITE_NOAUTH_PLAYER : USANETWORK_MICROSITE_USA_PLAYER,
          'guid' => $related_file->mpx_video_data['guid'],
          'url' => url('node/' . $node->nid . '/microsite/videos/' . $url_param, array('absolute' => TRUE)),
          'title' => $related_file->filename,
          'url_param' => $url_param,
          'media$thumbnails' => array(
            array(
              'plfile$url' => $related_file->mpx_video_data['thumbnail_url'],
            ),
          ),
        );
        $items[] = $item;
      }
    }
  }
  return $items;
}

/**
 * Alter sitecatalyst variables variables.
 */
function usanetwork_microsite_usa_omniture_alter(&$omniture_variables, $context) {
  if ($context['entity']){
    $entity = $context['entity'];
    if ($entity->type == 'usanetwork_microsite') {
      $node = menu_get_object();
      if(!isset($node->type) || $node->type != 'usanetwork_microsite') {
        return;
      }
      $args = arg();
      $path = isset($args[3]) ? $args[3] : '';
      switch ($path) {
        case '':
        case 'home':
          $omniture_prop3 = 'Home';
          break;
        case 'videos':
          $omniture_prop3 = 'Video';
          if(isset($args[4])) {
            $video_file = _usanetwork_microsite_get_video_file_by_url($node, $args[4], FALSE);
            if(isset($video_file) && !empty($video_file->filename)) {
              $omniture_prop5 = t('!entity_title : Video : !filename', array('!entity_title' => $entity->title, '!filename' => $video_file->filename));
              $omniture_pagename = $omniture_prop5;
            }
          }
          break;
        case 'characters':
          $omniture_prop3 = 'Bio';
          $omniture_prop4 = 'Profile Page'; // This is intentional per Loretta!
          if (isset($args[4])) {
            $node = _usanetwork_microsite_get_person_by_url($node, $args[4]);
            if(!empty($node)) {
              $person_names = _usanetwork_microsite_get_person_title_and_role_name($node);
              $omniture_prop5 = t($entity->title . ' : Bio : ' . $person_names['person_title']);
              $omniture_pagename = t($entity->title . ' : Bio : ' . $person_names['person_title']);
            }
          }
          break;
        case 'galleries':
          $omniture_prop3 = 'Gallery';
          if(isset($args[4])) {
            $node = _usanetwork_microsite_get_gallery_by_url($node, $args[4]);
            if(!empty($node)) {
              $omniture_prop5 = t($entity->title . ' : ' . $node->title);
              $omniture_pagename = t($entity->title . ' : ' . $node->title);
            }
          }
          break;
        case 'about':
          $omniture_prop3 = 'About';
          break;
        case 'games':
          $omniture_prop3 = 'Games';
          break;
      }
      if (!empty($omniture_prop3)) {
        $omniture_variables['s.prop3'] = t($omniture_prop3);
        $omniture_variables['s.prop4'] = (!empty($omniture_prop4)) ? t($omniture_prop4) : t($entity->title . ' : ' . $omniture_prop3);
        $omniture_variables['s.prop5'] = t($entity->title . ' : ' . $omniture_prop3);
      }
      if (!empty($omniture_prop5)) {
        $omniture_variables['s.prop5'] = $omniture_prop5;
        $omniture_variables['s.pageName'] = $omniture_pagename;
      }
    }
  }
}

/**
 * Returns value of field_collection_item. If $reset is true it returns single value.
 */
function _usanetwork_microsite_get_field_collection_item($field_collection_object, $field_name, $reset = FALSE) {
  $item = field_get_items('field_collection_item', $field_collection_object, $field_name);

  if (!empty($item)) {
    return $reset
      ? reset(reset($item))
      : $item;
  }

  return NULL;
}

/**
 * Returns an array of section names of microsite.
 */
function _usanetwork_microsite_get_section_names($microsite_node) {
  $sections_field = field_get_items('node', $microsite_node, 'field_ms_section');
  $section_names = array();

  if (!empty($sections_field)) {
    foreach ($sections_field as $section_data) {
      $section = field_collection_item_load($section_data['value']);

      if ($section && isset($section->field_ms_section_type)) {
        $section_names[] = _usanetwork_microsite_get_field_collection_item($section, 'field_ms_section_type', TRUE);
      }
    }
  }

  return $section_names;
}

/**
 * Validates URL with current microsite. If section name is incorrect redirects to PAGE_404.
 */
function _usanetwork_microsite_validate_section($microsite_node) {
  if (arg(2) && arg(2) == 'microsite' && arg(3)) {
    $target_section_name = arg(3);
    $section_names = _usanetwork_microsite_get_section_names($microsite_node);

    if (!in_array($target_section_name, $section_names)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Define full episode or not.
 */
function _usanetwork_microsite_define_full_episode($file) {
  $file_wrapper = entity_metadata_wrapper('file', $file);
  $full_episode = $file_wrapper->field_mpx_full_episode->value();
  if($full_episode == 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Define auth episode or not.
 */
function _usanetwork_microsite_define_auth($file) {
  $file_wrapper = entity_metadata_wrapper('file', $file);
  $auth_episode = $file_wrapper->field_mpx_entitlement->value();
  if($auth_episode == 'auth') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get url part for characters.
 *
 * @param $person_node
 * @return mixed|string
 */
function _usanetwork_microsite_get_suggested_character_url($person_node) {
  module_load_include('inc', 'pathauto', 'pathauto');
  $person_names = _usanetwork_microsite_get_person_title_and_role_name($person_node);
  return pathauto_cleanstring($person_names['person_title']);
}

/**
 * Get url part for gallery.
 *
 * @param $gallery_node
 * @return mixed|string
 */
function _usanetwork_microsite_get_suggested_gallery_url($gallery_node) {
  module_load_include('inc', 'pathauto', 'pathauto');
  return pathauto_cleanstring($gallery_node->title);
}

/**
 * If a person's role is Character, then the person_title is actually
 * the actor's full name and their role is the person_title.
 *
 * @param $person_node
 * @return array
 */
function _usanetwork_microsite_get_person_title_and_role_name($person_node) {
  $person_names = array(
    'role_name' => NULL,
    'person_title' => NULL,
  );
  $person_node_wrapper = entity_metadata_wrapper('node', $person_node);
  $person_names['person_title'] = $person_node->title;
  $role_term = $person_node_wrapper->field_role->value();
  $person_names['role_name'] = $role_term->name;
  $actor_full_name = $person_node_wrapper->field_usa_actor_name->value();
  if ($person_names['role_name'] == 'Character' && !empty($actor_full_name)) {
    $person_names['role_name'] = $person_names['person_title'];
    $person_names['person_title'] = $actor_full_name;
  }
  return $person_names;
}

function _usanetwork_microsite_get_section_wrapper_by_section_type($node, $section_type) {
  $microsite_node_wrapper = entity_metadata_wrapper('node', $node);
  foreach ($microsite_node_wrapper->field_ms_section as $section_wrapper) {
    if($section_wrapper->field_ms_section_type->value() == $section_type) {
      return $section_wrapper;
    }
  }
  return NULL;
}

/**
 * Get argument for current content.
 *
 * @param $section_wrapper
 * @return null
 */
function _usanetwork_microsite_get_arg_for_current_content($section_wrapper) {
  if(_usanetwork_microsite_get_current_section_type() == $section_wrapper->field_ms_section_type->value()) {
    return (arg(4) !== NULL) ? arg(4) : NULL;
  }
  return NULL;
}


/**
 * @param $object.
 *  Object can be field collection or node.
 *
 * Add meta description for object.
 */
function _usanetwork_microsite_set_meta_description($object) {
  if (is_object($object) && get_class($object) == 'EntityDrupalWrapper') {
    _usanetwork_microsite_set_meta_description_for_field_collection($object);
  }
  elseif (isset($object->fid)) {
    _usanetwork_microsite_set_meta_description_for_file($object);
  }
  else {
    _usanetwork_microsite_set_meta_description_for_node($object);
  }
}

/**
 * Set description for current content.
 *
 * @param $node
 */
function _usanetwork_microsite_set_meta_description_for_node($node) {
  $description = '';
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $metatags = usanetwork_microsite_get_metategs($node, 'node');
  if(!empty($node->field_usa_og_description)) {
    $description = $node_wrapper->field_usa_og_description->value();
  }
  if(empty($description)) {
    $description = $metatags['description']['#attached']['drupal_add_html_head'];
    $description = current($description);
    $description = $description[0]['#value'];
  }
  if(!empty($description)) {
    _usanetwork_microsite_set_meta_description_text($description);
  }
}

/**
 * Set description for current file.
 *
 * @param $file
 */
function _usanetwork_microsite_set_meta_description_for_file($file) {
  $metatags = usanetwork_microsite_get_metategs($file, 'file');

  $description = $metatags['description']['#attached']['drupal_add_html_head'];
  $description = reset($description);
  $description = $description[0]['#value'];

  if(!empty($description)) {
    _usanetwork_microsite_set_meta_description_text($description);
  }
}


/**
 * Set description for current section.
 *
 * @param $section_wrapper
 */
function _usanetwork_microsite_set_meta_description_for_field_collection($section_wrapper) {
  $description = '';
  $section_object = $section_wrapper->value();
  if(!empty($section_object->field_usa_og_description)) {
    $description = $section_wrapper->field_usa_og_description->value();
  }
  if(empty($description)) {
    $desc_metatag = metatag_get_info('tags', 'description');
    $description = $desc_metatag['description'];
  }
  if(!empty($description)) {
    _usanetwork_microsite_set_meta_description_text($description);
  }
}

/**
 * Add meta description.
 */
function _usanetwork_microsite_set_meta_description_text($desc) {
  $page_description = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'description',
      'content' => $desc,
    )
  );
  drupal_add_html_head($page_description, 'meta_description');
}

function _usanetwork_microsite_get_h1_tag($object) {
  $h1 = '';
  if(!empty($object) && is_object($object)) {
    if (get_class($object) == 'EntityDrupalWrapper' && $object->getBundle() == 'field_ms_section') {
      $h1 = _usanetwork_microsite_get_h1_for_field_collection($object);
    }
    elseif (isset($object->fid)) {
      $h1 = _usanetwork_microsite_get_h1_for_file($object);
    }
    else {
      $h1 = _usanetwork_microsite_get_h1_for_for_node($object);
    }
  }
  return $h1;
}

/**
 * Get h1 text for current section.
 *
 * @param $section_wrapper
 * @return string
 */
function _usanetwork_microsite_get_h1_for_field_collection($section_wrapper) {
  $h1 = '';
  $section_type = $section_wrapper->field_ms_section_type->value();
  if($section_type == 'home') {
    $section_object = $section_wrapper->value();
    if(!empty($section_object->field_seo_h1)) {
      $h1 = $section_wrapper->field_seo_h1->value();
    }
    else {
      $node = menu_get_object();
      $h1 = _usanetwork_microsite_get_default_h1($node, $section_type);
    }
  }
  elseif($section_type == 'about') {
    $section_object = $section_wrapper->value();
    if(!empty($section_object->field_seo_h1)) {
      $h1 = $section_wrapper->field_seo_h1->value();
    }
    else {
      $node = menu_get_object();
      $h1 = _usanetwork_microsite_get_default_h1($node, $section_type);
    }
  }
  return $h1;
}

/**
 * Get default h1 text.
 *
 * @param $node
 * @param $section_type
 * @return string
 */
function _usanetwork_microsite_get_default_h1($node, $section_type) {
  $h1 = '';
  if ($section_type == 'home') {
    $h1 = $node->title;
  }
  elseif ($section_type == 'about') {
    $h1 = 'About ' . $node->title;
  }
  return $h1;
}
/**
 * Get h1 text for current content.
 *
 * @param $node
 * @return string
 */
function _usanetwork_microsite_get_h1_for_for_node($node) {
  $h1 = '';
  $node_wrapper = entity_metadata_wrapper('node', $node);
  if (!empty($node->field_seo_h1)) {
    $h1 = $node_wrapper->field_seo_h1->value();
  }
  // Exception for person node type.
  if (empty($h1) && $node->type == USANETWORK_MICROSITE_PERSON_NODE_TYPE) {
    $person_names = _usanetwork_microsite_get_person_title_and_role_name($node);
    $h1 = $person_names['person_title'];
  }
  elseif (empty($h1)) {
    $h1 = $node->title;
  }
  return $h1;
}

/**
 * Get h1 text for current file.
 *
 * @param $file
 * @return string
 */
function _usanetwork_microsite_get_h1_for_file($file) {
  $h1 = $file->filename;
  $file_wrapper = entity_metadata_wrapper('file', $file);
  if (!empty($file->field_seo_h1)) {
    $h1 = $file_wrapper->field_seo_h1->value();
  }
  return $h1;
}

/**
 * Implements hook_page_build().
 * Insert Floodlight Tag.
 */
function usanetwork_microsite_page_build(&$page) {
  // Add floodlight to microsite.
  $menu_object = _usanetwork_menu_get_object();
  if ($menu_object) {
    if (isset($menu_object->type) && ($menu_object->type == 'usanetwork_microsite')) {
      $show_field = field_get_items('node', $menu_object, 'field_show');
      if (!empty($show_field)) {
        $show_nid = reset(reset($show_field));
        $show_node = node_load($show_nid);
        $floodlight_field_type = field_get_items('node', $show_node, 'field_floodlight_type');
        if (!empty($floodlight_field_type)) {
          $floodlight_field_type = reset($floodlight_field_type);
          if (!empty($floodlight_field_type['value'])) {
            $floodlight_type = $floodlight_field_type['value'];
          }
        }
        $floodlight_field_category = field_get_items('node', $show_node, 'field_floodlight_category');
        if ($floodlight_field_category) {
          $floodlight_field_category = reset($floodlight_field_category);
          if (!empty($floodlight_field_category['value'])) {
            $floodlight_category = $floodlight_field_category['value'];
          }
        }
      }
      if (!empty($floodlight_type) && !empty($floodlight_category)) {
        $floodlight_js = '
          (function ($) {
          $(document).ready(function(){
          var axel = Math.random() + "";
          var a = axel * 10000000000000;
          $(\'body\').prepend(\'<iframe src="http://1445917.fls.doubleclick.net/activityi;src=1445917;type=' . $floodlight_type . ';cat=' . $floodlight_category . ';ord=1?" width="1" height="1" frameborder="0" style="display:none"></iframe>\');
          });
          })(jQuery);
        ';
        drupal_add_js($floodlight_js, 'inline');
        $page['page_top']['floodlight'] = array(
          '#markup' => '
          <noscript>
            <iframe src="http://1445917.fls.doubleclick.net/activityi;src=1445917;type=' . $floodlight_type . ';cat=' . $floodlight_category . ';ord=1?" width="1" height="1" frameborder="0" style="display:none"></iframe>
          </noscript>
        ',
          '#weight' => -1,
        );
      }
    }
  }
}

/**
 * Returns HTML script tag for tracking facebook.
 */
function _usanetwork_microsite_get_facebook_tracking_html() {
  if (!module_exists('usanetwork_facebook_tracking')) {
    return NULL;
  }

  return _usanetwork_facebook_tracking_post_render('', array());
}

function usanetwork_microsite_get_metategs($entity, $entity_type) {
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
  $instance = "{$entity_type}:{$bundle}";
  $metatags = isset($entity->metatags) ? $entity->metatags : array();

  $entity_language = metatag_entity_get_language($entity_type, $entity);

  if ($entity_language == LANGUAGE_NONE) {
    $langcode = LANGUAGE_NONE;
  }
  else {
    $enabled_languages = field_content_languages();
    foreach (field_language($entity_type, $entity) as $field => $lang) {
      // Only accept actual language values that are properly enabled.
      if ($lang != LANGUAGE_NONE && in_array($lang, $enabled_languages)) {
        $langcode = $lang;
      }
    }
  }

  // Build options for meta tag rendering.
  $options = array(
    'entity' => $entity,
    'entity_type' => $entity_type,
    'view_mode' => 'full',
  );

  // Ensure we actually pass a language object rather than language code.
  $languages = language_list();
  if (isset($languages[$langcode])) {
    $options['language'] = $languages[$langcode];
  }

  // Reload the entity object from cache as it may have been altered.
  $token_type = token_get_entity_mapping('entity', $entity_type);
  $entities = entity_load($entity_type, array($entity_id));
  $options['token data'][$token_type] = $entities[$entity_id];
  $options['entity'] = $entities[$entity_id];

  // Render the metatags and save to the cache.
  $output = metatag_metatags_view($instance, $metatags, $options);

  return $output;
}

/**
 * Get current section type.
 *
 * @return string
 */
function _usanetwork_microsite_get_current_section_type() {
  return (arg(3) != '') ? arg(3) : 'home';
}

function _usanetwork_microsite_set_staus_and_h1_to_variable($object, $section_wrapper) {
  $theme_variables = array(
    'h1' => '',
    'status' => '',
  );
  $h1 = _usanetwork_microsite_get_h1_tag($object);
  if(_usanetwork_microsite_get_current_section_type() == $section_wrapper->field_ms_section_type->value()) {
    $theme_variables['status'] = 'active';
  }
  if(!empty($h1)) {
    $theme_variables['h1'] = $h1;
  }
 return $theme_variables;
}
