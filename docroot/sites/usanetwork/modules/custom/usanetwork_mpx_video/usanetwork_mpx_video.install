<?php
/**
 * @file
 * usanetwork_mpx_video module installation.
 */

/**
 * Implements hook_install().
 */
function usanetwork_mpx_video_install() {
  module_disable(array('usanetwork_migrate', 'usanetwork_video'));
  
  db_update('system')
    ->fields(array('weight' => 700))
    ->condition('name', 'usanetwork_mpx_video')
    ->execute();
  
  $db_select = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', array('usa_video', 'usa_tve_video'), 'IN');
  $video_nid = $db_select->execute()->fetchAll();
  
  foreach ($video_nid as $nid) {
    path_delete(array('source' => 'node/'.$nid->nid));
  }

  $mpx_accounts = array(
    '1' => array(
      'theplatform_username' => 'mpx/drupal-mpx-usa-main',
      'theplatform_password' => 'Pa55w0rd',
      'theplatform_import_account' => rawurlencode('NBCU USA Network'),
      'theplatform_default_player_id' => 'usa_player_endcard',
    ),
    '2' => array(
      'theplatform_username' => 'mpx/drupal-mpx-usa-tve',
      'theplatform_password' => 'Pa55word',
      'theplatform_import_account' => rawurlencode('NBCU TVE - USA Network'),
      'theplatform_default_player_id' => 'usa_hls_vod_endcard',
    ),
  );
  
  _usanetwork_mpx_video_set_accounts($mpx_accounts);
  
  _usanetwork_mpx_video_set_players($mpx_accounts);

  // remove old video nodes
  usanetwork_mpx_video_update_7000();
}

/**
 * Remove old video nodes.
 */
function usanetwork_mpx_video_update_7000() {
  $queue = DrupalQueue::get('usa_video_nodes_cleanup');

  $types = array(
    'usa_video',
    'usa_tve_video'
  );

  // get nids to delete
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $types, 'IN')
    ->execute()
    ->fetchCol();

  // add them to queue and delete later by cron
  $nodes_per_run = 50;
  for($i = 0; $i < ceil(count($nids)/$nodes_per_run); $i++) {
    $bunch = array_slice($nids, $i * $nodes_per_run, $nodes_per_run);
    $queue->createItem($bunch);
  }
}

function _usanetwork_mpx_video_set_accounts($insert_accounts){
 //Add new accounts.
  foreach ($insert_accounts as $key => $values) {

    watchdog('media_theplatform_mpx', 'Inserting username, password and token for user "@username" in the mpx_accounts table.',
        array('@username' => $values['theplatform_username']), WATCHDOG_INFO);

    try {
      $account_id = db_insert('mpx_accounts')
        ->fields(array(
          'id' => $key,
          'username' => _media_theplatform_mpx_encrypt_value($values['theplatform_username']),
          'password' => _media_theplatform_mpx_encrypt_value($values['theplatform_password']),
        ))
        ->execute();
      drupal_static_reset(MEDIA_THEPLATFORM_MPX_ACCOUNT_DATA_STATIC_CACHE);
      media_theplatform_mpx_signin($account_id);
      watchdog('media_theplatform_mpx', 'Successfully created account for user "@username".',
        array('@username' => $values['theplatform_username']), WATCHDOG_NOTICE);
    }
    catch (Exception $e) {

      watchdog('media_theplatform_mpx', 'FATAL ERROR occurred while creating account @account --  "@message"  -- Exception output: @output.',
        array(
          '@account' => _media_theplatform_mpx_account_log_string($key),
          '@message' => $e->getMessage(),
            '@output' => '<pre>' . print_r($e, TRUE) . '</pre>',
        ),
        WATCHDOG_ERROR);
    }

    $account_data = _media_theplatform_mpx_get_account_data($key);

    watchdog('media_theplatform_mpx', 'Setting import account "@import_account" for @account.',
      array(
        '@import_account' => $values['theplatform_import_account'],
        '@account' => _media_theplatform_mpx_account_log_string($account_data),
      ),
      WATCHDOG_NOTICE);

    if (!$account_data) {
      watchdog('media_theplatform_mpx', 'Failed to set import account for @account.  Account data could not be retrieved from the database.',
        array('@account' => _media_theplatform_mpx_account_log_string($key)), WATCHDOG_ERROR);
      continue;
    }

    // Query MPX to get the id and account$pid for the selected account.
    watchdog('media_theplatform_mpx', 'Retrieving import account information for "@import_account".',
      array('@import_account' => $values['theplatform_import_account']), WATCHDOG_NOTICE);

    $username = _media_theplatform_mpx_decrypt_value($account_data->username);
    $password = _media_theplatform_mpx_decrypt_value($account_data->password);
    $token_ttl = MEDIA_THEPLATFORM_MPX_TOKEN_IDLE_TIMEOUT;
    $token = _media_theplatform_mpx_get_signin_token($username, $password, $token_ttl);
    $url = 'https://access.auth.theplatform.com/data/Account?schema=1.3.0&form=json&byDisabled=false&byTitle=' . $values['theplatform_import_account'] . '&token=' . $token . '&fields=id,pid';

    $result_data = _media_theplatform_mpx_retrieve_feed_data($url);

    media_theplatform_mpx_expire_token($token);

    if (!isset($result_data['entries'][0]['id']) || !isset($result_data['entries'][0]['placcount$pid'])) {
      watchdog('media_theplatform_mpx', 'Failed to retrieve import account information for "@import_account".  "id" and/or "placcount$pid" field value not set.',
        array('@import_account' => $values['theplatform_import_account']), WATCHDOG_ERROR);

      return FALSE;
    }

    $mpx_account_id = preg_replace('|^http://|', 'https://', $result_data['entries'][0]['id']);
    $mpx_account_pid = $result_data['entries'][0]['placcount$pid'];

    watchdog('media_theplatform_mpx', 'Updating
      <br /> import_account = @import_account,
      <br /> account_id = @account_id,
      <br /> account_pid = @account_pid,
      <br /> last_notification = NULL
      <br />in mpx_accounts table for @account.',
      array(
        '@import_account' => $values['theplatform_import_account'],
        '@account_id' => $mpx_account_id,
        '@account_pid' => $mpx_account_pid,
        '@account' => _media_theplatform_mpx_account_log_string($account_data),
      ),
      WATCHDOG_INFO);

    // Save the new import account data for this account. Reset last
    // notification, since it's account specific.
    try {

      db_update('mpx_accounts')
        ->fields(array(
            'import_account' => $values['theplatform_import_account'],
            'account_id' => $mpx_account_id,
            'account_pid' => $mpx_account_pid,
            'last_notification' => NULL,
          ))
        ->condition('id', $account_id, '=')
        ->execute();

      watchdog('media_theplatform_mpx', 'Updated import account data for @account successfully.',
        array('@account' => _media_theplatform_mpx_account_log_string($account_data)), WATCHDOG_NOTICE);
    }
    catch (Exception $e) {

      watchdog('media_theplatform_mpx', 'FATAL ERROR occurred while updating import account data for @account. --  "@message"  -- Exception output: @output.',
        array(
          '@account' => _media_theplatform_mpx_account_log_string($account_data),
          '@message' => $e->getMessage(),
          '@output' => '<pre>' . print_r($e, TRUE) . '</pre>',
        ),
        WATCHDOG_ERROR);
    }
  }

  // Reset the account data static cache.
  drupal_static_reset(MEDIA_THEPLATFORM_MPX_ACCOUNT_DATA_STATIC_CACHE);

  // Import all players.
  $import = media_theplatform_mpx_import_all_players('manually');
}
  
function _usanetwork_mpx_video_set_players($insert_accounts){
  
  // Set default mpxPlayer variable.
  foreach ($insert_accounts as $account_id => $values) {
    
    $player_id = db_select('mpx_player', 'p')
      ->fields('p', array('player_id'))
      ->condition('pid', $values['theplatform_default_player_id'])
      ->execute()->fetchField();
    
    $currently_stored_default_player = db_select('mpx_accounts', 'mpx_accounts')
      ->fields('mpx_accounts', array('default_player'))
      ->condition('id', $account_id, '=')
      ->execute()
      ->fetchField();
    if ($currently_stored_default_player != $player_id) {
      _media_theplatform_mpx_set_field($account_id, 'default_player', $player_id);
      $account = _media_theplatform_mpx_get_account_data($account_id);
      $player = media_theplatform_mpx_get_mpx_player_by_player_id($player_id);
      watchdog('media_theplatform_mpx', 'Player @pid -- @player -- set as default player for account @account.',
        array(
          '@pid' => $player['pid'],
          '@player' => $player['title'],
          '@account' => basename($account->account_id),
        ),
        WATCHDOG_NOTICE);
    }
  }

  // Import videos.
  media_theplatform_mpx_import_all_videos('manually');

  drupal_set_message(t('!cron_link to complete the import/update process.',
    array('!cron_link' => l(t('Run cron'), 'admin/config/system/cron'))));
}

/**
 * Update 'last_notification' type
 */
function usanetwork_mpx_video_update_7001() {
  db_change_field('mpx_accounts', 'last_notification', 'last_notification', array(
    'description' => 'Last Notification Request Indicator',
    'type' => 'int',
    'not null' => FALSE,
    'size' => 'big',
  ));
}

function usanetwork_mpx_video_change_og_tags($entity_type, $bundle) {
// Query the selected entity table.
  $entity_info = entity_get_info($entity_type);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)
    ->propertyOrderBy($entity_info['entity keys']['id']);

  if ($entity_type != 'user') {
    /**
     * Entities which do not define a bundle such as User fail returning no results.
     * @see http://drupal.org/node/1054168#comment-5266208
     */
    $query->entityCondition('bundle', $bundle);
  }

  $result = $query->execute();
  $entity_ids = !empty($result[$entity_type]) ? array_keys($result[$entity_type]) : array();
  foreach ($entity_ids as $entity_id) {
    $metatags = metatag_metatags_load($entity_type, $entity_id);
    if (!empty($metatags)) {
      $metatags = reset($metatags);
      $data = $metatags[LANGUAGE_NONE];
      $og_title_token = $data['og:title']['value'];
      if ($og_title_token == '[current-page:title]') {
        $data['og:title']['value'] = '[file:name]';
        db_update('metatag')
          ->fields(array(
            'data' => serialize($data),
          ))
          ->condition('entity_type', $entity_type)
          ->condition('entity_id', $entity_id)
          ->execute();
        metatag_metatags_cache_clear($entity_type, $entity_id);
      }
    }
  }
}

/**
 * Update meta tags og:title for all videos to [file:name] token.
 */
function usanetwork_mpx_video_update_7002() {
  if (module_enable(array('metatag'))) {
    module_load_include('inc', 'metatag', 'metatag.admin');
    usanetwork_mpx_video_change_og_tags('file', 'mpx_video_1');
    usanetwork_mpx_video_change_og_tags('file', 'mpx_video_2');
  }
}
