<?php
/**
 * @file
 * Code for the Post feature.
 */

include_once 'usanetwork_post.features.inc';
include_once 'usanetwork_post.field.inc';

define('USANETWORK_FIELD_BLOG', 'field_blog');

/**
 * Implements hook_block_info().
 */
function usanetwork_post_block_info() {
  $blocks['usanetwork_post_header'] = array(
    'info' => t('Blog Header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['usanetwork_post_global_header'] = array(
    'info' => t('Blog Global Header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  
  $blocks['usanetwork_post_banners'] = array(
    'info' => t('Blog Banners'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function usanetwork_post_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'usanetwork_post_header':
      $block['subject'] = '';
      $block['content'] = _usanetwork_post_get_blog_header();
      break;
    case 'usanetwork_post_global_header':
      $block['subject'] = '';
      $block['content'] = _usanetwork_post_get_blog_global_header();
      break;
    case 'usanetwork_post_banners':
      $block['subject'] = '';
      $block['content'] = _usanetwork_post_get_blog_banners();
      break;
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter post_node_form.
 */
function usanetwork_post_form_post_node_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  $lang = $node->language;
  // Show is inherited from blog
  $form['field_show']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter post_node_form.
 */
function usanetwork_post_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_usanetwork_post_comment_setting_submit';
}

function _usanetwork_post_comment_setting_submit($form, &$form_state) {
  
  if (isset($form_state['entity_id'])) {
    $categories = taxonomy_get_children($form_state['entity_id']);
    if (!empty($categories) && (isset($form_state['values']['field_blog_gigya_comments'][LANGUAGE_NONE]))) {
      $comments_setting = $form_state['values']['field_blog_gigya_comments'][LANGUAGE_NONE][0];
        $etst1 = array_keys($categories);
      $blog_posts_select = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', 'post');
      $blog_posts_select->join('field_data_field_blog', 'fdfb', 'fdfb.entity_id = n.nid');
      $blog_posts_select->condition('fdfb.field_blog_tid', array_keys($categories), 'IN');
      $blog_posts = $blog_posts_select->execute()->fetchCol();     
      if ($blog_posts) {
        $nodes = node_load_multiple($blog_posts);
        if ( $comments_setting['value'] == 1 ) {
          foreach ($nodes as $node) {
            $node->comment = 2;
            node_save($node);
          }
        } else {
          foreach ($nodes as $node) {
            $node->comment = 1;
            node_save($node);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function usanetwork_post_node_presave($node) {
  if ($node->type == 'post' && empty($node->taxonomy_term_update)) {
    if (!empty($node->{USANETWORK_FIELD_BLOG})) {
      $blog = reset(field_get_items('node', $node, USANETWORK_FIELD_BLOG));
      if ($blog) {
        $blog = taxonomy_term_load($blog['tid']);
        if ($blog) {
          $node->field_show = $blog->field_show;
        }
        $blog_value = _usanetwork_post_get_blog_by_category($blog);
        if ($blog_value) {
          $blog_gigya_comments = reset(field_get_items('taxonomy_term', $blog_value, 'field_blog_gigya_comments'));
          if ($blog_gigya_comments['value']  == 1) {
            $node->comment = 2;
          } else {
            $node->comment = 1;
          }
        }
      }
    }

    if (empty($blog)) {
      $node->field_show = array();
    }
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function usanetwork_post_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'blog') {
    $query = new EntityFieldQuery('node');
    $nodes = $query->entityCondition('bundle', 'post', '=')
      ->fieldCondition(USANETWORK_FIELD_BLOG, 'tid', $term->tid, '=')
      ->execute();
    if (!empty($nodes)) {
      $nodes = node_load_multiple(array_keys($nodes['node']));
      foreach ($nodes as $node) {
        $node->taxonomy_term_update = TRUE;
        $node->field_show = $term->field_show;
        node_save($node);
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function usanetwork_post_node_load($nodes, $types) {
  if (in_array('post', $types)) {
    foreach ($nodes as $node) {
      if ($node->type == 'node') {

      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function usanetwork_post_taxonomy_term_presave($term) {
  if ($term->vocabulary_machine_name == 'blog') {
    if (!isset($term->blog) && $blog = _usanetwork_post_get_blog_by_category($term)) {
      $term->blog = $blog;
    }
    if (isset($term->blog) && $term->tid != $term->blog->tid) {
      $term->field_show = $term->blog->field_show;
    }
  }
}

/*
 * Helper for getting cached comments count
 */
function _usanetwork_post_get_comment_count($nid) {
  $comment_count = FALSE;
  
  $call = __FUNCTION__ . '_' . $nid;
  if ($cache = cache_get($call)) {
    $comment_count = $cache->data;
  } else {
    $parameters = array(
      'query' => array(
        'categoryID' => variable_get('gigya_comments_categoryid', 'USA Blogs'),
        'streamID' => $nid,
        'ApiKey' => variable_get('gigya_APIKey', ''),
      ),
    );
    $url = url('http://comments.gigya.com/comments.getComments', $parameters);
    $result = drupal_http_request($url, array('timeout' => 300));
    if (!empty($result->data)) {
      $data = drupal_json_decode($result->data);
      if ($data['statusCode'] == 200) {
        if (isset($data['commentCount'])) {
          $comment_count = $data['commentCount'];
          cache_set($call, $comment_count, 'cache', CACHE_TEMPORARY);
        }
      }
    }
  } 
  return $comment_count;
}

/**
 * Implements hook_preprocess_node().
 */
function usanetwork_post_preprocess_node(&$vars) {
  if ($vars['type'] == 'post') {
    $node = $vars['node'];
    if (isset($vars['content']['post_date'])) {
      //$vars['content']['post_date'][0]['#markup'] .= ' ' . format_plural($vars['comment_count'], 'with 1 comment', 'with @count comments');
      if ($vars['view_mode'] == 'teaser') {
        $vars['content']['post_date'][0]['#markup'] = l($vars['content']['post_date'][0]['#markup'], 'node/' . $vars['nid']);  
      }
    }
    if ($vars['view_mode'] == 'teaser') {
      if ($vars['comment'] == 2) {
        $comments_count = _usanetwork_post_get_comment_count($node->nid);
        if ($comments_count !== FALSE) {
          $vars['content']['gigya_comment_count'][0]['#markup'] = '<div class="usa-gigya-comments-count">' . format_plural($comments_count, '1 Comment', '@count Comments') . '</div>';
        }
      }
    }
    if ($vars['view_mode'] != 'teaser') {
      $show_cover = field_get_items('node', $node, 'field_post_cover_toggle');
      if ($show_cover) {
        if ($show_cover = reset($show_cover)) {
          $show_cover = (bool) $show_cover['value'];
        }
        else {
          // default to true
          $show_cover = TRUE;
        }

        if (!$show_cover && isset($vars['content']['field_post_cover'])) {
          unset($vars['content']['field_post_cover']);
        }
      }
    if (isset($vars['content']['author'])) {
      if (!empty($node->{USANETWORK_FIELD_BLOG})) {
      $category = reset(field_get_items('node', $node, USANETWORK_FIELD_BLOG));
        if ($category) {
          $blog = _usanetwork_post_get_blog_by_category($category);
          if ($blog) {
            $blog_display_author = reset(field_get_items('taxonomy_term', $blog, 'field_blog_display_author'));
            if ($blog_display_author['value'] == 1) {
              $conributor = reset(field_get_items('node', $node, 'field_contributor'));
              if ($conributor) {
                $author = user_load($conributor['target_id']);
              } else {
              $author = user_load($node->uid);
              }
              $vars['content']['author'][0]['#markup'] = theme('usanetwork_post_author_display', array('author' => $author));  
            } else {
              unset($vars['content']['author']);
            } 
          }
        }
      }
    }
      if ($vars['comment'] == 2) { 
        $parameters = array(
          'query' => array(
            'categoryID' => variable_get('gigya_comments_categoryid', 'USA Blogs'),
            'streamID' => $node->nid,
            'ApiKey' => variable_get('gigya_APIKey', ''),
            'threadLimit' => 10,
          ),
        );
        $url = url('http://comments.gigya.com/comments.getComments', $parameters);
        $result = drupal_http_request($url, array('timeout' => 300));
        if (!empty($result->data)) {
          $data = drupal_json_decode($result->data);
          if ($data['statusCode'] == 200) {
            $id = variable_get('gigya_comments_container', 'comments');
            $vars['content']['comments']['#markup'] = '<div id="' . $id . '">';
            foreach ($data['comments'] as $comment) {
              $vars['content']['comments']['#markup'] .= '<div>';
              $vars['content']['comments']['#markup'] .= '<div>' . $comment['sender']['name'] . '</div>';
              $vars['content']['comments']['#markup'] .= '<div>' . $comment['commentText'] . '</div>';
              $vars['content']['comments']['#markup'] .= '</div>';
            }
            $vars['content']['comments']['#markup'] .= '</div>';
          }
        }
      }
    }
  }
}

/**
 * Returns the set of valid root terms for a blog field.
 *
 * @param $field
 *   The field definition.
 * @return
 *   The array of valid terms for this field, keyed by term id.
 */
function usanetwork_post_blog_allowed_values($field) {
  $options = array();
  foreach ($field['settings']['allowed_values'] as $tree) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
      if ($terms = taxonomy_get_tree($vocabulary->vid, 0, 1)) {
        foreach ($terms as $term) {
          $options[$term->tid] = $term->name;
        }
      }
    }
  }
  return $options;
}

/**
 * Returns the set of valid categories for a blog field.
 *
 * @param $field
 *   The field definition.
 * @return
 *   The array of valid terms for this field, keyed by term id.
 */
function usanetwork_post_categories_allowed_values($field, $blog = NULL) {
  $options = array();
  if ($blog !== NULL) {
    $tid = is_object($blog) ? $blog->tid : $blog;
    foreach ($field['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        if ($terms = taxonomy_get_tree($vocabulary->vid, $tid)) {
          foreach ($terms as $term) {
            $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
          }
        }
      }
    }
  }
  return $options;
}

/**
 * Returns blog term by category term.
 */
function _usanetwork_post_get_blog_by_category($category) {
  $blog = FALSE;
  $cache = &drupal_static(__FUNCTION__, array());

  if ($category !== NULL) {
    $tid = is_object($category) ? $category->tid : $category;
    $original_tid = $tid;
    if (is_object($category) && !empty($category->parent)) {
      $tid = end($category->parent);
    }
    if ($tid && !isset($cache[$original_tid])) {
      do {
        $query = db_select('taxonomy_term_data', 't');
        $query->join('taxonomy_term_hierarchy', 'h', 'h.parent = t.tid');
        $query->addField('t', 'tid');
        $query->condition('h.tid', $tid);
        $query->addTag('term_access');
        $query->orderBy('t.weight');
        $query->orderBy('t.name');
        $tids = $query->execute()->fetchCol();

        if (!empty($tids)) {
          $tid = reset($tids);
        }
        elseif ($tid != $original_tid) {
          $blog = taxonomy_term_load($tid);
        }

      } while(!empty($tids));

      if ($tid == $original_tid) {
        $blog = is_object($category) ? $category : taxonomy_term_load($category);
      }

      if ($original_tid != NULL) {
        $cache[$original_tid] = $blog;
      }
    }
    elseif (isset($cache[$original_tid])) {
      $blog = $cache[$original_tid];
    }
  }

  return $blog;
}

/**
 * Returns blog header block content.
 */
function _usanetwork_post_get_blog_header($blog = NULL) {
  $content = array();

  if ($blog === NULL) {
    $entity_type = NULL;
    $entity = _usanetwork_menu_get_object($entity_type);
    if ($entity) {
      switch ($entity_type) {
        case 'taxonomy_term':
          $blog = _usanetwork_post_get_blog_by_category($entity);
          $category = $entity;
          break;
        default:
          if (!empty($entity->{USANETWORK_FIELD_BLOG})) {
            $category = field_get_items($entity_type, $entity, USANETWORK_FIELD_BLOG);
            if ($category && $category = reset($category)) {
              $blog = _usanetwork_post_get_blog_by_category($category['tid']);
              $category = taxonomy_term_load($category['tid']);
            }
          }
          break;
      }
    }
  }
  if ($blog) {
    $content = array(
      '#prefix' => '<div class="blog-header">',
      '#suffix' => '</div>',
    );

    // add blog logo
    $content['logo'] = array(
      '#theme' => 'link',
      '#text' => ' ',
      '#path' => 'taxonomy/term/' . $blog->tid,
      '#options' => array(
        'attributes' => array(
          'title' => $blog->name,
          'class' => array(
            'blog-logo'
          ),
        ),
      ),
    );
    // ... and title
    $content['title'] = array(
      '#theme' => 'link',
      '#text' => $blog->name,
      '#path' => 'taxonomy/term/' . $blog->tid,
      '#options' => array(
        'attributes' => array(
          'title' => $blog->name,
          'class' => array(
            'blog-title'
          ),
        ),
      ),
    );

    // add blog category menu
    $menu = _usanetwork_post_get_blog_menu($blog->tid, $blog->vid, $category->tid);
    if (!empty($menu)) {
      $content['menu'] = $menu;
      $content['menu']['#prefix'] = '<div class="category-menu">';
      $content['menu']['#suffix'] = '</div>';
      $content['menu']['#attached']['js'][] = drupal_get_path('module', 'usanetwork_post') . '/js/usanetwork_post_menu.js';
    }
  }

  return $content;
}

/**
 * Returns blog global header block content.
 */
function _usanetwork_post_get_blog_global_header($blog = NULL) {
  $content = array();

  if ($blog === NULL) {
    $entity_type = NULL;
    $entity = _usanetwork_menu_get_object($entity_type);
    if ($entity) {
      switch ($entity_type) {
        case 'taxonomy_term':
          $blog = _usanetwork_post_get_blog_by_category($entity);
          $category = $entity;
          break;
        default:
          if (!empty($entity->{USANETWORK_FIELD_BLOG})) {
            $category = field_get_items($entity_type, $entity, USANETWORK_FIELD_BLOG);
            if ($category && $category = reset($category)) {
              $blog = _usanetwork_post_get_blog_by_category($category['tid']);
              $category = taxonomy_term_load($category['tid']);
            }
          }
          break;
      }
    }
  }
  if ($blog) {
    if (!empty($blog->field_blog_header)) {
      $banner_content = field_get_items('taxonomy_term', $blog, 'field_blog_header');
      if ($banner_content = reset($banner_content)) {
        $content = array(
          '#prefix' => '<div class="blog-global-header">',
          '#suffix' => '</div>',
        );

        $content['banners'] = array(
          '#markup' => $banner_content['value'],
        );
      }
    }
  }

  return $content;
}

/**
 * Returns blog header block content.
 */
function _usanetwork_post_get_blog_banners($blog = NULL) {
  $content = array();

  if ($blog === NULL) {
    $entity_type = NULL;
    $entity = _usanetwork_menu_get_object($entity_type);
    if ($entity) {
      switch ($entity_type) {
        case 'taxonomy_term':
          $blog = _usanetwork_post_get_blog_by_category($entity);
          $category = $entity;
          break;
        default:
          if (!empty($entity->{USANETWORK_FIELD_BLOG})) {
            $category = field_get_items($entity_type, $entity, USANETWORK_FIELD_BLOG);
            if ($category && $category = reset($category)) {
              $blog = _usanetwork_post_get_blog_by_category($category['tid']);
              $category = taxonomy_term_load($category['tid']);
            }
          }
          break;
      }
    }
  }
  if ($blog) {
    if (!empty($blog->field_blog_banners)) {
      $banner_content = field_get_items('taxonomy_term', $blog, 'field_blog_banners');
      if ($banner_content = reset($banner_content)) {
        $content = array(
          '#prefix' => '<div class="blog-banners">',
          '#suffix' => '</div>',
        );

        $content['banners'] = array(
          '#markup' => $banner_content['value'],
        );
      }
    }
  }

  return $content;
}

/**
 * Returns blog categories menu.
 */
function _usanetwork_post_get_blog_menu($tid, $vid = 0, $category = NULL) {
  $tree = array();

  $children = taxonomy_get_children($tid, $vid);
  if (!empty($children)) {
    foreach ($children as $term) {
      $path = 'taxonomy/term/' . $term->tid;
      $menu_item = array(
        'data' => l($term->name, $path),
      );
      // Append active class.
      if ($path == $_GET['q'] || $category == $term->tid) {
        $menu_item['class'][] = 'active';
      }
      $children = _usanetwork_post_get_blog_menu($term->tid, $term->vid, $category);
      if (!empty($children)) {
        $menu_item['children'] = $children['#items'];
        foreach ($children['#items'] as $child) {
          if (!empty($child['class']) && in_array('active', $child['class'])) {
            $menu_item['class'][] = 'active-trail';
          }
        }
      }
      $tree['#items'][$term->tid] = $menu_item;
    }
    $tree['#theme'] = 'item_list';
  }

  return $tree;
}

/*
 * Inherited omniture variables for blog
 */
function usanetwork_post_usa_omniture_alter(&$omniture_variables, $context) {
  $inherited_variables = array('s.prop4', 's.prop3');
  
  $entity = $context['entity'];
  $entity_type = $context['entity_type'];
  if ($entity_type == 'taxonomy_term') {
    if ($entity->vocabulary_machine_name == 'blog') {
      $taxonomy_omniture_varibles_setting = _usanetwork_post_take_taxonomy_omniture_varibles($entity, $entity_type, $omniture_variables, $inherited_variables);
      $omniture_variables = $taxonomy_omniture_varibles_setting['omniture_variables'];
    }
  }
  
  if ($entity_type == 'node') {
    if ($entity->type == 'post') {
      $field_blog = field_get_items($entity_type, $entity, 'field_blog');
      $field_post_category = reset($field_blog);
      if (isset($field_post_category)) {
        $category = taxonomy_term_load($field_post_category['tid']);
        $category_omniture_settings = _usanetwork_ads_entity_settings($category, 'taxonomy_term');
        $category_omniture = _usanetwork_ads_get_omniture_variables($category_omniture_settings['omniture']['variables']);       
        $category_omniture_real_variables = _usanetwork_post_take_taxonomy_omniture_varibles($category, 'taxonomy_term', $category_omniture, $inherited_variables);
        $show_omniture = $category_omniture_real_variables['show_variables'];
        foreach ($category_omniture_real_variables['omniture_variables'] as $key => $value) {
          if (in_array($key, $inherited_variables)){
            if ($omniture_variables[$key] == $show_omniture[$key]) {
              //rewrite show setting, if empty category settings
              $omniture_variables[$key] = $category_omniture_real_variables['omniture_variables'][$key];
            } 
          }
        }   
      }
    }
  }
}

/*
 * Helper for get omniture variables for taxonomy
 */
function _usanetwork_post_take_taxonomy_omniture_varibles($entity, $entity_type, $omniture_variables, $inherited_variables) {
  $parents = taxonomy_get_parents($entity->tid);
  $show_omniture = array();
  if (!empty($parents)) {
    $parent = reset($parents);
    $parent_omniture_setting = _usanetwork_ads_entity_settings($parent, $entity_type);
    $parent_omniture = _usanetwork_ads_get_omniture_variables($parent_omniture_setting['omniture']['variables']);
    $tv_show_nid = _usanetwork_ads_get_entity_tv_show($entity, $entity_type);
    $show_omniture_setting = _usanetwork_ads_entity_settings(node_load($tv_show_nid), 'node');
    $show_omniture = _usanetwork_ads_get_omniture_variables($show_omniture_setting['omniture']['variables']);
    foreach ($parent_omniture as $key => $value) {
      if (in_array($key, $inherited_variables)){
        if (isset($omniture_variables[$key])) {
          if ($omniture_variables[$key] == $show_omniture[$key]) {
            //rewrite show setting, if empty category settings
            $omniture_variables[$key] = $parent_omniture[$key];
          }
        } else {
          $omniture_variables[$key] = $parent_omniture[$key];
        }
      }
    }  
  }
  return array('omniture_variables' => $omniture_variables, 'show_variables' => $show_omniture);
}

/*
 * Get css files from categories
 */
function _usanetwork_post_entity_blog_get_css_field($entity, $type) { 
  
  $attached_css_code = array();
  
  if ($type == 'taxonomy_term') {
    $blog = _usanetwork_post_get_blog_by_category($entity);
    $category = $entity;
    if ($blog->tid == $category->tid) {
      $attached_files = _usanetwork_post_get_css_files(array($category));
      $attached_css_code = _usanetwork_post_get_css_code(array($category));
    } else {
      $attached_files = _usanetwork_post_get_css_files(array($blog,$category));
      $attached_css_code = _usanetwork_post_get_css_code(array($blog,$category));
    }
  }
 
  if ($type == 'node') {
    if ($entity->type == 'post') {
      $category = field_get_items($type, $entity, USANETWORK_FIELD_BLOG);
      if ($category && $category = reset($category)) {
        $blog = _usanetwork_post_get_blog_by_category($category['tid']);
        $category = taxonomy_term_load($category['tid']);
        $attached_files = _usanetwork_post_get_css_files(array($blog, $category));
        $attached_css_code = _usanetwork_post_get_css_code(array($blog, $category));
      }
    }
  }
  
  $css_attached_files = array();
  if (isset($attached_files)) {
    foreach ($attached_files as $file) {
      $css_attached_files[] = $file['uri'];
    }
  }
  
  return array('files' => $css_attached_files, 'inline' => $attached_css_code);
}

/*
 * Get all css files from hierarchy
 */
function _usanetwork_post_get_css_files($entity_array) {
  $css_files = array();
  
  foreach ($entity_array as $entity) {
    if (!empty($entity->field_blog_css_file)) {
      $css_file = field_get_items('taxonomy_term', $entity, 'field_blog_css_file');
      if ($css_file = reset($css_file)) {
        $css_files[] = $css_file;
      }
    } 
  }
  return $css_files;
}

/*
 * Get all css inline code from hierarchy
 */
function _usanetwork_post_get_css_code($entity_array) {
  $css_code = array();
  
  foreach ($entity_array as $entity) {
    if (!empty($entity->field_usa_css)) {
      $css_inline = field_get_items('taxonomy_term', $entity, 'field_usa_css');
      if ($css_inline = reset($css_inline)) {
        $css_code[] = $css_inline['value'];
      }
    } 
  }
  return $css_code;
}

/*
 * Implements hook_ctools_render_alter().
 * Set custom css files for blog
 */
function usanetwork_post_ctools_render_alter(&$info, &$page, &$context) { 
  
  if ($page) {
    foreach ($context['contexts'] AS $ctools_context) {     
      foreach ($ctools_context->type as $value) {
        if (in_array($value, array('taxonomy_term', 'node'))){
          $entity_type = $value;
          if ($value == 'taxonomy_term') { 
            if ($entity = taxonomy_term_load($ctools_context->argument)) {
              if ($entity->vocabulary_machine_name == 'blog') {
                $attached_files = _usanetwork_post_entity_blog_get_css_field($entity, $entity_type);
              }  
            }
          } else if ($value == 'node') {
            if ($entity = node_load($ctools_context->argument)) {
              $attached_files = _usanetwork_post_entity_blog_get_css_field($entity, $entity_type);
              //add umbel code to page with comments
              if (($entity->type == 'post') && ($entity->comment == 2)) {
                $umbel_code = '
window._umbel = window._umbel || [];
(function() {
  window._umbel_test_mode = false;
  window._umbel_property = "usa_network";
  var u = document.createElement(\'script\'); u.type = \'text/javascript\'; u.async = true;
  u.src = document.location.protocol + \'//tags.api.umbel.com/iwgdlxrtqfiiortz/w.js?d=\' + new Date().getMonth() + \'-\' + new Date().getDate();
  var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(u, s);
})();
';
                drupal_add_js($umbel_code, 'inline');
              }
            }
          } 
        }
      }
    }
  }
  $weight = 9990; //weight increament
  if (isset($attached_files['files'])) {
    foreach ($attached_files['files'] as $file) {
      drupal_add_css($file, array('weight' => $weight)); 
      $weight++;
    }
  }
  if (isset($attached_files['inline'])) {
    foreach ($attached_files['inline'] as $inline) {
      drupal_add_css($inline, array('type' => 'inline', 'preprocess' => FALSE, 'weight' => $weight)); 
      $weight++;
    }
  }
}

/**
 * Implements hook_theme().
 */
function usanetwork_post_theme() {
  return array(
    'usanetwork_post_author_display' => array(
      'variables' => array(
        'author' => null,
      ),
    ),
  );
}

/*
 * Displaying author
 */
function theme_usanetwork_post_author_display($variables){
  $author = $variables['author'];
  $author_image = reset(field_get_items('user', $author, 'field_profile_image'));
  if ($author_image) {
    $image = theme('image_style', array('path' => $author_image['uri'], 'style_name' => 'medium'));
  } else {
    $image = '';
  }
  $author_info = reset(field_get_items('user', $author, 'field_biography'));
  $output = '';
  $output .= '<div class="post-author">' . t('By') . ' ' . $author->name . '</div>';
  $output .= '<div class="post-author-image">' . $image . '</div>';
  $output .= '<div class="post-author-info">' . $author_info['value'] . '</div>';
  return $output;
}
