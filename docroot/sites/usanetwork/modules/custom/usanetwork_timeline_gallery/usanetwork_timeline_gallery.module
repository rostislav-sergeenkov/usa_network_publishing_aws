<?php
/**
 * @file
 * Code for the usanetwork_timeline_gallery feature.
 */

include_once 'usanetwork_timeline_gallery.features.inc';

define('USA_TIMELINE_MAX_PHOTOS_ON_EPISODE', 7);

/**
 * Implements hook_preprocess_field().
 */
function usanetwork_timeline_gallery_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_timeline_episode_section') {
    global $base_url;
    $tg_items = array();
    $isset_video = NULL;
    foreach ($vars['items'] as $item) {
      $fc_tg_item = reset($item['entity']['field_collection_item']);
      $season_node_wrapper = entity_metadata_wrapper('node', $fc_tg_item['field_season']['#items'][0]['entity']);
      $episode_node_wrapper = entity_metadata_wrapper('node', $fc_tg_item['field_episode']['#items'][0]['entity']);
      $scenes = array();
      $scene_namber = 1;
      foreach ($fc_tg_item['field_timeline_media_item']['#items'] as $media_item) {
        $idx = $scene_namber - 1;
        $description = '';
        $scenes[$idx] = array(
          'fid' => $media_item['fid'],
          'scene_number' => $scene_namber,
        );
        if ($media_item['type'] == 'image') {
          if (!empty($media_item['field_caption'][LANGUAGE_NONE])) {
            $description = current($media_item['field_caption'][LANGUAGE_NONE]);
            $description = !empty($description['value']) ? $description['value'] : NULL;
          }
          $scenes[$idx] += array(
            'type' => 'image',
            'image_src' => image_style_url('timeline_gallery_image', $media_item['uri']),
            'description' => $description,
          );
        }
        elseif ($media_item['type'] == 'mpx_video_1') {
          $video_file = file_load($media_item['fid']);
          if ($video_file->mpx_video_data['status'] != FILE_PUBLISHED) {
            continue;
          }
          $isset_video = TRUE;
          if (!empty($media_item['field_mpx_description'][LANGUAGE_NONE])) {
            $description = current($media_item['field_mpx_description'][LANGUAGE_NONE]);
            $description = !empty($description['value']) ? $description['value'] : NULL;
          }
          $image_url = _usanetwork_mpx_video_get_image_path($video_file);
          $video = _usanetwork_mpx_video_get_player_src(array(
            'file' => $video_file,
            'pub_mpx_player_parameters' => array('autoPlay' => 'true'),
            'player_id' => 'top3_usa',
          ));
          $video_link = _usanetwork_mpx_video_get_player_src(array('file' => $video_file), 'link');
          $scenes[$idx] += array(
            'type' => 'video',
            'image_src' => image_style_url('timeline_gallery_image', $image_url),
            'description' => $description,
            'video' => !empty($video) ? $video : NULL,
            'video_link' => !empty($video_link) ? $video_link : NULL,
          );
        }
        $scene_namber++;
      }
      $season_num = $season_node_wrapper->field_season_id->value();
      $episode_num = $episode_node_wrapper->field_episode_number->value();
      $tg_items[$season_num][$episode_num] = array(
        'season_num' => $season_num,
        'episode_num' => $episode_num,
        'scenes' => $scenes,
        'season_name' => $season_node_wrapper->title->value(),
        'episode_name' => $episode_node_wrapper->title->value(),
      );
    }
    $vars['tg_items'] = $tg_items;
    $node = $vars['element']['#object'];
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $vars['shareTitle'] = !empty($node->field_share_title) ? $node_wrapper->field_share_title->value() : $node_wrapper->title->value();
    $vars['shareDescription'] = !empty($node->field_share_description) ? $node_wrapper->field_share_description->value() :
      (!empty($node->field_usa_og_description) ? $node_wrapper->field_usa_og_description->value() : '');
    $vars['baseUrl'] = $base_url;
    $vars['requestUrl'] = request_uri();
    $vars['imageBaseUrl'] = '/' . path_to_theme() . '/images';
    $vars['player'] = _usanetwork_mpx_video_get_player_src(array('parent_account' => '1', 'player_id' => 'top3_usa'), 'player');
    $vars['isset_video'] = $isset_video;
  }
}

/**
 * Implements hook_node_view().
 */
function usanetwork_timeline_gallery_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'timeline_gallery') {
    $pdk_controller_url = "http://player.theplatform.com/pdk/HNK2IC/tpPdkController.js";
    drupal_add_js($pdk_controller_url, 'external');
    drupal_add_css(drupal_get_path('module', 'usanetwork_timeline_gallery')  . '/css/timeline.css');
    drupal_add_css(drupal_get_path('module', 'usanetwork_timeline_gallery')  . '/css/timeline_gigya_share.css');
    drupal_add_css(drupal_get_path('module', 'usanetwork_timeline_gallery')  . '/css/jquery.mCustomScrollbar.css');
    $node->content['#attached']['js'][] = drupal_get_path('module', 'gigya') . '/js/gigya_sharebar.js';
    $node->content['#attached']['js'][] = drupal_get_path('module', 'usanetwork_timeline_gallery') . '/js/jquery.mCustomScrollbar.js';
    $node->content['#attached']['js'][] = drupal_get_path('module', 'usanetwork_timeline_gallery') . '/js/jquery.easing.1.3.js';
//    $node->content['#attached']['js'][] = drupal_get_path('module', 'usanetwork_timeline_gallery') . '/js/jquery.timeline.js';
    $node->content['#attached']['js'][] = drupal_get_path('module', 'usanetwork_timeline_gallery') . '/js/jquery.timeline_video.js';
  }
}

/**
 *  Implements hook_block_info().
 */
function usanetwork_timeline_gallery_block_info() {
  $blocks = array();

  $blocks['usa_timeline_gal_related'] = array(
    'info' => 'Timeline Gallery: Related Content',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function usanetwork_timeline_gallery_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'usa_timeline_gal_related':
      $block['subject'] = '';
      $block['content'] = _usanetwork_timeline_gallery_related_content();
      break;
  }

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usanetwork_timeline_gallery_form_timeline_gallery_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_usanetwork_timeline_gallery_node_form_validate';
  if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] === TRUE) {
    // Change ajax callback to custom callback.
    $form['field_timeline_episode_section'][LANGUAGE_NONE]['add_more']['#ajax']['callback'] = 'usanetwork_timeline_gallery_season_add_more_ajax';
    // If is created new node, it will add ajax callback to show field.
    $form['field_show'][LANGUAGE_NONE]['#ajax'] = array(
      'event' => 'change',
      'callback' => 'usanetwork_timeline_gallery_season_option_ajax',
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
    );
    $field_items = usanetwork_timeline_gallery_get_multiple_elements_from_field($form['field_timeline_episode_section'][LANGUAGE_NONE]);
    foreach ($field_items as &$field_item) {
      $field_item['field_season'][LANGUAGE_NONE]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'usanetwork_timeline_gallery_episode_option_ajax',
        'progress' => array(
          'type' => 'throbber',
          'message' => '',
        ),
      );
      $field_item['field_season']['#attributes']['class'][] = 'field-season-delta_' .$field_item['#delta'];
    }
    foreach ($field_items as &$field_item) {
      $field_item['field_episode']['#attributes']['class'][] = 'field-episode-delta_' .$field_item['#delta'];
    }

    // If form_state['values'] is check this is an ajax request.
    // Other wise we do our regular logic.
    if (!empty($form_state['values'])) {
      // Here we do the actual Ajax Logic.
      // Check if a value for show has already been provided.
      // Lets do work based on what was triggerd.
      $triggering_element = usanetwork_timeline_gallery_get_triggering_field_name($form_state);
      if ($triggering_element == 'field_show') {
        usanetwork_timeline_gallery_set_season_options($form_state, $field_items);
      }
      elseif ($triggering_element == 'field_season') {
        usanetwork_timeline_gallery_set_episode_options($form_state, $field_items);
      }
    }
    else {
      if (!empty($form['field_show'][LANGUAGE_NONE]['#default_value'][0])) {
        $selected_show = $form['field_show'][LANGUAGE_NONE]['#default_value'][0];
        foreach ($field_items as &$field_item) {
          if (is_numeric($selected_show)) {
            // This way the field are correct on load.
            $seasons = usanetwork_timeline_gallery_return_seasons($selected_show);
            $field_item['field_season'][LANGUAGE_NONE]['#options'] = $seasons;
          }
          else {
            $field_item['field_season']['#disabled'] = FALSE;
          }
        }
      }
      else {
        foreach ($field_items as &$field_item) {
          // If there's no selected show we disabled it right away.
          $field_item['field_season']['#disabled'] = TRUE;
          $field_item['field_season'][LANGUAGE_NONE]['#options'] = array('_none' => t('- None -'));
        }
      }
      foreach ($field_items as &$field_item) {
        if (!empty($field_item['field_season'][LANGUAGE_NONE]['#default_value'][0])) {
          $selected_season = $field_item['field_season'][LANGUAGE_NONE]['#default_value'][0];
          if (is_numeric($selected_season)) {
            // This way the field are correct on load.
            $episodes = usanetwork_timeline_gallery_return_episodes($selected_season);
            $field_item['field_episode'][LANGUAGE_NONE]['#options'] = $episodes;
          }
          else {
            $field_item['field_episode']['#disabled'] = FALSE;
          }
        }
        else {
          $field_item['field_episode']['#disabled'] = TRUE;
          $field_item['field_episode'][LANGUAGE_NONE]['#options'] = array('_none' => t('- None -'));
        }
      }
    }
  }
}
/*
 * Validate count of photos on timeline gallery.
 */
function _usanetwork_timeline_gallery_node_form_validate($form, &$form_state) {

  if (isset($form_state['values']['field_timeline_episode_section'][LANGUAGE_NONE]) && is_array($form_state['values']['field_timeline_episode_section'][LANGUAGE_NONE])) {
    foreach($form_state['values']['field_timeline_episode_section'][LANGUAGE_NONE] as $key => $item) {
      if (isset($item['field_timeline_media_item'][LANGUAGE_NONE]) && is_array($item['field_timeline_media_item'][LANGUAGE_NONE])) {
        $count = 0;
        foreach ($item['field_timeline_media_item'][LANGUAGE_NONE] as $element) {
          if (!empty($element['fid'])) {
            $count++;
          }
        }
        if ($count > USA_TIMELINE_MAX_PHOTOS_ON_EPISODE) {
          form_set_error('', t('Maximum @max photos on one episode', array('@max' => USA_TIMELINE_MAX_PHOTOS_ON_EPISODE)));
        }
      }
    }
  }
}


/**
 * @param $form_values
 * @param $field_items
 * @return array
 */
function usanetwork_timeline_gallery_set_season_options($form_state, &$field_items) {
  $selected_show = NULL;
  $triggering_element = usanetwork_timeline_gallery_get_triggering_field_name($form_state);
  $form_values = $form_state['values'];
  if (!empty($form_values['field_show'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_values['field_show'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (!empty($form_values['field_show'][LANGUAGE_NONE]) && is_numeric($form_values['field_show'][LANGUAGE_NONE])) {
    $selected_show = $form_values['field_show'][LANGUAGE_NONE];
  }
  if (!empty($selected_show)) {
    $seasons = usanetwork_timeline_gallery_return_seasons($selected_show);
    foreach ($field_items as &$field_item) {
      $field_item['field_season'][LANGUAGE_NONE]['#options'] = $seasons;
      $field_item['field_season']['#disabled'] = FALSE;
      $selected_season = $field_item['field_season'][LANGUAGE_NONE]['#default_value'];
      if ($triggering_element != 'field_timeline_episode_section_add_more' || empty($selected_season)) {
        if (!empty($seasons) && is_array($seasons)) {
          $episodes = usanetwork_timeline_gallery_return_episodes(key($seasons));
          $field_item['field_episode'][LANGUAGE_NONE]['#options'] = $episodes;
          $field_item['field_episode']['#disabled'] = FALSE;
        }
      }
      else {
        $episodes = usanetwork_timeline_gallery_return_episodes($selected_season[0]);
        $field_item['field_episode'][LANGUAGE_NONE]['#options'] = $episodes;
        $field_item['field_episode']['#disabled'] = FALSE;
      }
    }
  }
  else {
    foreach ($field_items as &$field_item) {
      $field_item['field_season'][LANGUAGE_NONE]['#options'] = array('_none' => t('- None -'));
      $field_item['field_season'][LANGUAGE_NONE]['#default_value'] = '_node';
      $field_item['field_season']['#disabled'] = TRUE;

      $field_item['field_episode'][LANGUAGE_NONE]['#options'] = array('_none' => t('- None -'));
      $field_item['field_episode'][LANGUAGE_NONE]['#default_value'] = '_none';
      $field_item['field_episode']['#disabled'] = TRUE;
    }
  }
}

/**
 * Ajax function to correct season list.
 */
function usanetwork_timeline_gallery_season_option_ajax($form, $form_state) {
  $field_items = usanetwork_timeline_gallery_get_multiple_elements_from_field($form['field_timeline_episode_section'][LANGUAGE_NONE]);
  // We want to replace both the season and the episodes so we return an list
  // of ajax commands.
  $commands = array();
  foreach ($field_items as $key => $field_item) {
    $field_season = drupal_render($field_item['field_season']);
    $field_episode = drupal_render($field_item['field_episode']);
    $field_class = 'field-season-delta_' . $field_item['#delta'];
    $commands[] = ajax_command_replace('.' . $field_class, $field_season);
    $field_class = 'field-episode-delta_' . $field_item['#delta'];
    $commands[] = ajax_command_replace('.' . $field_class, $field_episode);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}
/**
 * Ajax function to correct season list after click on add more button.
 */
function usanetwork_timeline_gallery_season_add_more_ajax($form, $form_state) {
  $field_items = usanetwork_timeline_gallery_get_multiple_elements_from_field($form['field_timeline_episode_section'][LANGUAGE_NONE]);
  usanetwork_timeline_gallery_set_season_options($form_state, $field_items);
  $add_more_ajax_commands = ajax_prepare_response(field_add_more_js($form, $form_state));
  return array('#type' => 'ajax', '#commands' => $add_more_ajax_commands);
}
/**
 * Helper function to return valid Seasons.
 */
function usanetwork_timeline_gallery_return_seasons($selected_show) {
  // Get the list of seasons based on the user-entered show value.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', array('tv_season'));
  $query->fieldCondition('field_show', 'target_id', $selected_show);
  $show_result = $query->execute();

  // Add each season that belongs to the user-selected show to the options
  // array.
  if (isset($show_result['node'])) {
    $season_nids = array_keys($show_result['node']);
    $nodes = entity_load('node', $season_nids);
    foreach ($nodes as $node) {
      $stat = check_plain($node->status) ? 'published' : 'unpublished';
      $options[$node->nid] = check_plain($node->title) . ' (' . $stat . ')';
    }
  }

  return $options;
}

function usanetwork_timeline_gallery_get_multiple_elements_from_field(&$field) {
  $field_element_key = element_children($field);
  $field_items = array();
  foreach ($field_element_key as $element_key) {
    if (is_numeric($element_key)) {
      $field_items[] = &$field[$element_key];
    }
  }
  return $field_items;
}

function usanetwork_timeline_gallery_get_triggering_field_name($form_state) {
  $triggering_element = NULL;
  if(!empty($form_state['values'])) {
    $trigger = $form_state['triggering_element'];
    if (isset($trigger['#field_name'])) {
      $triggering_element = $trigger['#field_name'];
    }
    elseif (isset($trigger['#name'])) {
      $triggering_element = $trigger['#name'];
    }
  }
  return $triggering_element;
}

function usanetwork_timeline_gallery_episode_option_ajax($form, $form_state) {
  $field_items = usanetwork_timeline_gallery_get_multiple_elements_from_field($form['field_timeline_episode_section'][LANGUAGE_NONE]);
  $trigger = $form_state['triggering_element'];
  // I get delta from #parrens param because delta is incorrect for triggering element.
  $delta = $trigger['#parents'][2];
  $field_item = &$field_items[$delta];
  $commands = array();
  $field_class = 'field-episode-delta_' . $delta;
  $field_selector = '.' . $field_class;
  $field_episode = drupal_render($field_item['field_episode']);
  $commands[] = ajax_command_replace($field_selector, $field_episode);

  return array('#type' => 'ajax', '#commands' => $commands);
}

function usanetwork_timeline_gallery_set_episode_options($form_state, &$field_items) {
  $form_values = $form_state['values'];
  $trigger = $form_state['triggering_element'];
  $delta = $trigger['#parents'][2];
  $field_item = &$field_items[$delta];
  $selected_season = NULL;
  $field_values = $form_values['field_timeline_episode_section'][LANGUAGE_NONE][$delta];
  if (!empty($field_values['field_season'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_season = $field_values['field_season'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (!empty($field_values['field_season'][LANGUAGE_NONE]) && is_numeric($field_values['field_season'][LANGUAGE_NONE])) {
    $selected_season = $field_values['field_season'][LANGUAGE_NONE];
  }
  if (!empty($selected_season)) {
    $episodes = usanetwork_timeline_gallery_return_episodes($selected_season);
    $field_item['field_episode'][LANGUAGE_NONE]['#options'] = $episodes;
    $field_item['field_episode']['#disabled'] = FALSE;
  }
  else {
    $field_item['field_episode'][LANGUAGE_NONE]['#options'] = array('_none' => t('- None -'));
    $field_item['field_episode'][LANGUAGE_NONE]['#default_value'] = '_none';
    $field_item['field_episode']['#disabled'] = TRUE;
  }
}

function usanetwork_timeline_gallery_return_episodes($selected_season) {
  // Get the list of seasons based on the user-entered show value.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', array('tv_episode'));
  $query->fieldCondition('field_season', 'target_id', $selected_season);
  $season_result = $query->execute();

  // Add each episod that belongs to the user-selected season to the options
  // array.
  if (isset($season_result['node'])) {
    $episode_nids = array_keys($season_result['node']);
    $nodes = entity_load('node', $episode_nids);
    foreach ($nodes as $node) {
      $stat = check_plain($node->status) ? 'published' : 'unpublished';
      $options[$node->nid] = check_plain($node->title) . ' (' . $stat . ')';
    }
  }

  return $options;

}

/*
 * Returns content for usa_timeline_gal_related block.
 */
function _usanetwork_timeline_gallery_related_content() {
  if (path_is_admin(current_path())) {
    return '';
  }

  $node = menu_get_object('node');
  if (!empty($node) && $node->type == 'timeline_gallery') {

    $show = field_get_items('node', $node, 'field_show');
    if (!empty($show)) {
      $show = is_array($show) ? reset($show) : $show;
      $show = node_load($show['target_id']);
      if (!empty($show)) {
        $related_content = usanetwork_related_content_get_related_content_for_consumpt_page($node, $show);
        if (!empty($related_content)) {
          if (!empty($related_content)) {
            $block_of_items = usanetwork_tv_show_consumptionator_render_related_content_items_block($related_content);
            $load_more_link = &drupal_static('load_more_link');
            $load_more_link = TRUE;
            return theme('usanetwork_tv_show_consumptionator_related_items_container', array(
              'related_items_block' => $block_of_items,
              'load_more_link' => $load_more_link,
              'show_nid' => $show->nid,
              'items_pre_page_limit' => USA_CONSUMPTIONATOR_RELATED_ITEMS_ON_PAGE,
              'node_nid' => $node->nid,
            ));
          }
        }
      }
    }
  }
  return '';
}
