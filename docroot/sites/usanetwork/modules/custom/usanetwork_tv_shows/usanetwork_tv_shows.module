<?php

/**
 * @file
 * Code for the usanetwork_tv_shows feature.
 */
include_once 'usanetwork_tv_shows.features.inc';

define('USANETWORK_TV_SHOWS_FIELD_NAME', 'field_show');

/**
 *  Implements hook_block_info().
 */
function usanetwork_tv_shows_block_info() {
  $blocks = array();

  $blocks['usanetwork_tv_shows_aspot'] = array(
    'info' => t('TV Shows: A-Spot'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Catch up & Explore
  $blocks['usanetwork_tv_shows_coex'] = array(
    'info' => t('TV Shows: Catch up, Explore'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Consumptionator: related content
  $blocks['uasnetwork_tv_shows_cons_rel'] = array(
    'info' => t('Consumptionator: related content'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function usanetwork_tv_shows_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'usanetwork_tv_shows_aspot':
      $block['subject'] = '';
      $block['content'] = _usanetwork_tv_shows_aspot_block();
      break;

    case 'usanetwork_tv_shows_coex':
      $block['subject'] = '';
      $block['content'] = _usanetwork_tv_shows_catchup_explore_block();
      break;

    case 'uasnetwork_tv_shows_cons_rel':
      $block['subject'] = '';
      $block['content'] = _usanetwork_tv_shows_consumptionator_relcontent_block();
      break;
  }

  return $block;
}

/**
 *  Implements hook_theme().
 */
function usanetwork_tv_shows_theme($existing, $type, $theme, $path) {
  return array(
    'usanetwork_tv_shows_aspot' => array(
      'variables' => array(
        'show' => NULL,
        'episodes' => array(
          0 => array(
            'url' => NULL,
            'title' => NULL,
            'series_and_number' => NULL,
            'duration' => NULL,
            'image_url' => NULL,
          ),
        ),
      ),
      'template' => 'templates/usanetwork-tv-shows-aspot',
    ),
    'usanetwork_tv_shows_catchup_explore' => array(
      'variables' => array(
        'catch_up' => array( // Carousel lines
          0 => array(
            'caption' => NULL,
            'title' => NULL,
            'additional_text' => NULL,
            'elements' => array(), // Array of pre-rendered 'usanetwork_tv_shows_catchup_explore_content_element' elements
          )
        ),
        'explore' => array(

        ),
      ),
      'template' => 'templates/usanetwork-tv-shows-catchup-explore',
    ),
    'usanetwork_tv_shows_catchup_explore_content_element' => array(
      'variables' => array(
        'class' => NULL,
        'node_classes' => array(),
        'title' => NULL,
        'additional' => array(
          'normal' => NULL,
          'span' => NULL,
        ),
        'media_player_icon' => TRUE,
      ),
      'template' => 'templates/usanetwork-tv-shows-catchup-explore-content-element',
    ),
    // Consumptionator: related content
    'usanetwork_tv_shows_cons_related_container' => array(
      'variables' => array(
        'related_items' => array(
          0 => array(
            'li_class' => 'first',
            'content' => array(), // Pre-rendered array of displayable content
          ),
        ),
      ),
      'template' => 'templates/usanetwork-tv-shows-cons-related-container',
    ),
    // Consumptionator: related content item (not form)
    'usanetwork_tv_shows_cons_related_item' => array(
      'variables' => array(
        'image_url' => NULL,
        'caption' => NULL,
        'title' => NULL,
        'additional' => array(
          'left' => NULL,
          'right' => NULL,
        ),
      ),
      'template' => 'templates/usanetwork-tv-shows-cons-related-item',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * this is a straight rip from pub_tv old relations fields
 */
function usanetwork_tv_shows_form_tv_episode_node_form_alter(&$form, &$form_state) {

  // Add AJAX handling to the the show field so that users only see seasons for
  // the selected show.
  $form['field_show'][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'usanetwork_tv_shows_season_option_populate_js',
    'wrapper' => 'season-wrapper',
    'effect' => 'fade',
  );
  $form['field_show'][LANGUAGE_NONE]['#prefix'] = '<div id="show-wrapper">';
  $form['field_show'][LANGUAGE_NONE]['#suffix'] = '</div>';

  // Hide the seasons field until the user has selected a show.
  $form['field_season'][LANGUAGE_NONE]['#states'] = array(
    'disabled' => array(
      ':input[name="field_show[' . LANGUAGE_NONE . ']"]' => array(
        'value' => '_none',
      ),
    ),
  );

  $form['field_season'][LANGUAGE_NONE]['#description'] = t('You must select a TV Show before selecting a season.');
  $form['field_season'][LANGUAGE_NONE]['#prefix'] = '<div id="season-wrapper">';
  $form['field_season'][LANGUAGE_NONE]['#suffix'] = '</div>';


  // Check if a value for show has already been provided.
  $selected_show = '';
  if (isset($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (isset($form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'];
  }

  // If a value for show has already been provided, reset the form accordingly.
  if (!empty($selected_show)) {
    // Get the list of seasons based on the user-entered show value.
    $query = new EntityFieldQuery('entity_type', 'node');
    $query->entityCondition('bundle', 'tv_season');
    $query->fieldCondition('field_show', 'target_id', $selected_show);
    $result = $query->execute();

    // If the first element of the options aray is "- Select -" (et. al.) then
    // add it to the beginning of our new options array.
    $keys = array_keys($form['field_season'][LANGUAGE_NONE]['#options']);
    if (!is_null($keys[0]) && !is_numeric($keys[0])) {
      $options = array_slice($form['field_season'][LANGUAGE_NONE]['#options'], 0, 1);
    }
    else {
      $options = array();
    }

    // Add each season that belongs to the user-selected show to the options
    // array.
    if (isset($result['node'])) {
      $news_items_nids = array_keys($result['node']);
      $nodes = entity_load('node', $news_items_nids);
      foreach ($nodes as $node) {
        $options[$node->nid] = check_plain($node->title);
      }
    }
    else {
      drupal_set_message(t('There are no seasons associated with the show you selected. Please !url first.', array('!url' => l(t('create a season'), 'node/add/tv-season'))), 'error');
      watchdog('pub_tv', 'While creating an episode, a user chose a season that does not belong to the selected show.', array(), WATCHDOG_WARNING);
    }
    $form['field_season'][LANGUAGE_NONE]['#description'] = '';
    $form['field_season'][LANGUAGE_NONE]['#options'] = $options;
  }


  // If a user re-selects "- Select a value -" on the node add form, or if the
  // slected show has no seasons, make sure the season field is re-disabled.
  if ((isset($form_state['values']['field_show']) && is_null($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) || (!empty($selected_show) && !isset($result['node']))) {
    $form['field_season'][LANGUAGE_NONE]['#disabled'] = TRUE;
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'usanetwork_tv_shows') . '/js/usanetwork_tv_episode.js';

  // Add a form validator.
  $form['#validate'][] = 'usanetwork_tv_shows_episode_form_validate';
}

/**
 * Implements hook_usanetwork_overlay_prerender().
 */
function usanetwork_tv_shows_usanetwork_overlay_prerender() {

}

/**
 * AJAX callback function that populates the "season" entity reference field
 * with seasons for the user specifid show.
 *
 * @see usanetwork_tv_shows_form_tv_episode_node_form_alter()
 */
function usanetwork_tv_shows_season_option_populate_js($form, $form_state) {
  return $form['field_season'];
}

/**
 * Form validation for the episode node form.
 */
function usanetwork_tv_shows_episode_form_validate($form, &$form_state) {
  $selected_season = $form_state['values']['field_season'][LANGUAGE_NONE][0]['target_id'];
  $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];

  if ($selected_season) {
    $season_node = node_load($selected_season);
    if ($season_node->field_show[LANGUAGE_NONE][0]['target_id'] !== $selected_show) {
      form_set_error('field_season', t('The season you selected belongs to a different show than the show you selected on this form.'));
    }
  }
}

/**
 * Returns show assosiated with current page.
 * TODO may be depricated
 */
function _usanetwork_tv_show_menu_get_show(&$entity_type = NULL, $position = 1, $path = NULL) {
  $show = false;
  $entity = _usanetwork_menu_get_object($entity_type, $position, $path);
  if ($entity) {
    list(,, $bundle) = entity_extract_ids($entity_type, $entity);
    if ($entity_type == 'node' && $bundle == 'tv_show') {
      $show = $entity;
    }
    elseif (!empty($entity->{USANETWORK_TV_SHOWS_FIELD_NAME})) {
      $show_ref = reset(field_get_items($entity_type, $entity, USANETWORK_TV_SHOWS_FIELD_NAME));
      if ($show_ref) {
        $show = node_load($show_ref['target_id']);
      }
    }
  }

  return $show;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usanetwork_tv_shows_form_tv_show_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path('module', 'usanetwork_tv_shows') . '/js/usanetwork_tv_shows.js';
}

/**
 * Selects content related with show content.
 *
 * @param integer $limit - limits query items, 0 means that all the available
 * pieces of content should be pulled.
 *
 * @param string $sort - sorting order
 *
 * @param string $sort_by - sorting field name
 *
 * @param array $filters - consists of filters for query
 * (you may ignore this param if you want to select all the content):
 * array(
 *   'bundle' => array(
 *     'values' => array('media_gallery', 'post'),
 *     // OR 'values' => 'media_gallery',
 *     'operator' => 'IN', // default 'IN' if array and default '=' if not array
 *   ),
 * );
 */
function _usanetwork_tv_shows_get_related_content($show_id, $limit = 0, $sort = 'DESC', $sort_by = 'entity_id', $filters = array()) {
  $content_items = array();

  // Apply sorter alias for nodes
  $node_sorter = _usanetwork_tv_shows_detect_related_content_node_sorter($sort_by);

  // Apply sorter alias for files
  $file_sorter = _usanetwork_tv_shows_detect_related_content_file_sorter($sort_by);

  // Pull nodes
  $nodes = _usanetwork_tv_shows_pull_related_nodes($show_id, $limit, $sort, $node_sorter, $filters);

  // Pull files
  $files = _usanetwork_tv_shows_pull_related_files($show_id, $limit, $sort, $file_sorter, $filters);

  // Merge nodes and files
  if (!empty($nodes) && !empty($files)) {
    $content_items = array_merge($nodes, $files);
  }
  elseif (!empty($nodes)) {
    $content_items = $nodes;
  }
  elseif (!empty($files)) {
    $content_items = $files;
  }

  // Sort items according sorter alias
  usort($content_items, function($a, $b) use ($node_sorter, $file_sorter, $sort) {
    $a_sorter = $a->entity_type == 'node' ? $node_sorter : $file_sorter;

    $b_sorter = $b->entity_type == 'node' ? $node_sorter : $file_sorter;

    if ($a->$a_sorter == $b->$b_sorter) {
      return 0;
    }
    else {
      if ($a->$a_sorter > $b->$b_sorter) {
        return $sort == 'ASC' ? 1 : -1;
      }
      return $sort == 'ASC' ? -1 : 1;
    }
  });

  // Crop extra elements
  if ($limit > 0) {
    array_splice($content_items, $limit);
  }

  return $content_items;
}

/**
 * Alters node filters
 */
function _usanetwork_tv_shows_detect_related_content_node_sorter($sort_by) {
  // There are no available aliases at the moment.
  return $sort_by;
}

/**
 * Alters file filters
 */
function _usanetwork_tv_shows_detect_related_content_file_sorter($sort_by) {
  $filter_aliases = array(
    'changed' => 'timestamp',
  );

  if (isset($filter_aliases[$sort_by])) {
    return $filter_aliases[$sort_by];
  }

  return $sort_by;
}

/**
 * Pulls nodes related with show content.
 *
 * @param integer $limit - limits query items, 0 means that all the available
 * pieces of content should be pulled.
 *
 * @param string $sort - sorting order
 *
 * @param string $sort_by - sorting field name
 *
 * @param array $filters - consists of filters for query
 * (you may ignore this param if you want to select all the content):
 * array(
 *   'bundle' => array(
 *     'values' => array('media_gallery', 'post'),
 *     // OR 'values' => 'media_gallery',
 *     'operator' => 'IN', // default 'IN' if array and default '=' if not array
 *   ),
 * );
 */
function _usanetwork_tv_shows_pull_related_nodes($show_id, $limit = 0, $direction = 'DESC', $sort_by = 'changed', $filters = array()) {
  $query = db_select('field_data_field_show', 'fshow');
  $query->fields('fshow', array('entity_type', 'bundle', 'entity_id'));
  // Attach content node
  $query->join('node', 'n', 'fshow.entity_id=n.nid');
  $query->fields('n', array('title', 'created', 'changed'));
  // Attach show node
  $query->join('node', 'sn', 'fshow.field_show_target_id=sn.nid');
  $query->addField('sn', 'title', 'show_title');
  // Attach associated videos for promos
  $query->leftJoin('field_data_field_promo_assoc_video', 'assoc', 'assoc.entity_id=n.nid');
  $query->addField('assoc', 'field_promo_assoc_video_target_id', 'assoc_fid');
  // Attach promo season number
  $query->leftJoin('field_data_field_mpx_season_number', 'fvp_season', 'fvp_season.entity_id=assoc.field_promo_assoc_video_target_id');
  $query->addField('fvp_season', 'field_mpx_season_number_value', 'promo_season');
  // Attach promo episode number
  $query->leftJoin('field_data_field_mpx_episode_number', 'fvp_episode', 'fvp_episode.entity_id=assoc.field_promo_assoc_video_target_id');
  $query->addField('fvp_episode', 'field_mpx_episode_number_value', 'promo_episode');
  // Attach promo duration value
  $query->leftJoin('field_data_field_mpx_duration', 'fvp_duration', 'fvp_duration.entity_id=assoc.field_promo_assoc_video_target_id');
  $query->addField('fvp_duration', 'field_mpx_duration_value', 'promo_duration');

  $query->condition('fshow.field_show_target_id', $show_id);
  $query->condition('fshow.deleted', 0);
  $query->condition('n.status', 1);
  $query->condition('fshow.entity_type', 'node');

  $query->orderBy($sort_by, $direction);

  if ($limit > 0) {
    $query->range(0, $limit);
  }

  if (!empty($filters)) {
    foreach ($filters as $filter_field_name => $filter_value) {
      $value = !empty($filter_value['value']) ? $filter_value['value'] : NULL;

      if (!empty($value)) {
        $operator = !empty($filter_value['operator'])
            ? $filter_value['operator']
            : (is_array($value)
                ? 'IN'
                : '='
            );

        $query->condition($filter_field_name, $value, $operator);
      }
    }
  }
//die('<pre>'.print_r($query->execute()->fetchAll(), true).'</pre>');
  return $query->execute()->fetchAll();
}

/**
 * Pulls files related with show content.
 *
 * @param integer $limit - limits query items, 0 means that all the available
 * pieces of content should be pulled.
 *
 * @param string $sort - sorting order
 *
 * @param string $sort_by - sorting field name
 *
 * @param array $filters - consists of filters for query
 * (you may ignore this param if you want to select all the content):
 * array(
 *   'bundle' => array(
 *     'values' => array('media_gallery', 'post'),
 *     // OR 'values' => 'media_gallery',
 *     'operator' => 'IN', // default 'IN' if array and default '=' if not array
 *   ),
 * );
 */
function _usanetwork_tv_shows_pull_related_files($show_id, $limit = 0, $direction = 'DESC', $sort_by = 'timestamp', $filters = array()) {
  $query = db_select('field_data_field_show', 'fshow');
  $query->fields('fshow', array('entity_type', 'bundle', 'entity_id'));
  $query->join('file_managed', 'f', 'fshow.entity_id=f.fid');
  $query->fields('f', array('created', 'timestamp'));
  $query->leftJoin('mpx_video', 'mpx_video_data', 'f.fid=mpx_video_data.fid');
  $query->addField('mpx_video_data', 'title', 'title');
  $query->join('node', 'sn', 'fshow.field_show_target_id=sn.nid');
  $query->addField('sn', 'title', 'show_title');
  $query->condition('fshow.field_show_target_id', $show_id);
  $query->condition('fshow.deleted', 0);
  $query->condition('fshow.entity_type', 'file');
  $db_or = db_or();
  $db_or->condition('mpx_video_data.status', 1);
  $db_or->isNull('mpx_video_data.status');
  $query->condition($db_or);

  $query->orderBy($sort_by, $direction);

  if ($limit > 0) {
    $query->range(0, $limit);
  }

  if (!empty($filters)) {
    foreach ($filters as $filter_field_name => $filter_value) {
      $value = !empty($filter_value['value']) ? $filter_value['value'] : NULL;

      if (!empty($value)) {
        $operator = !empty($filter_value['operator'])
            ? $filter_value['operator']
            : (is_array($value)
                ? 'IN'
                : '='
            );

        $query->condition($filter_field_name, $value, $operator);
      }
    }
  }
  //die('<pre>'.print_r($query->execute()->fetchAll(), true).'</pre>');
  return $query->execute()->fetchAll();
}

/**
 * Renders content from returned settings array of "_usanetwork_tv_shows_get_related_content()".
 *
 * @param array $query_result - the result of "_usanetwork_tv_shows_get_related_content()"
 * @param array $content_view_modes - array of applicable view modes for content:
 * array(
 *   'view_mode_name' => array(
 *     'node' => array(           // applies only for listed nodes
 *       'node_bundle_name1',
 *       'node_bundle_name2'
 *     ),
 *   ),
 *   'view_mode_name2' => array(
 *     'node' => array(),         // applies for all listed nodes
 *     'file' => array('image'),  // applies for files with type "image"
 *   ),
 * );
 */
function _usanetwork_tv_shows_render_related_content($query_result, $content_view_modes) {
  $content = array();

  if (!empty($query_result) && !empty($content_view_modes)) {
    foreach ($query_result as $query_item) {
      $view_mode = _usanetwork_tv_shows_detect_related_content_view_mode($query_item, $content_view_modes);

      if (!empty($view_mode)) {
        $content[] = _usanetwork_tv_shows_render_related_content_item($query_item, $view_mode);
      }
    }
  }

  return $content;
}

/**
 * Renders related content item from db_select array.
 */
function _usanetwork_tv_shows_render_related_content_item($query_item, $view_mode) {
  $content_item = array();

  switch ($query_item->entity_type) {
    case 'node':
      $content_item = node_view(node_load($query_item->entity_id), $view_mode);
      break;

    case 'file':
      $content_item = file_view(file_load($query_item->entity_id), $view_mode);
      break;
  }

  return !empty($content_item)
      ? render($content_item)
      : '';
}

/**
 * Detects first available view mode for related content item.
 */
function _usanetwork_tv_shows_detect_related_content_view_mode($query_item, $content_view_modes) {
  foreach ($content_view_modes as $view_mode_name => $view_mode_elements) {
    if (isset($view_mode_elements[$query_item->entity_type])) {
      if (empty($view_mode_elements[$query_item->entity_type])) {
        return $view_mode_name;
      }
      else {
        if (in_array($query_item->bundle, $view_mode_elements[$query_item->entity_type])) {
          return $view_mode_name;
        }
      }
    }

    return NULL;
  }
}

/**
 * Render shows menu items
 */
function usanetwork_tv_shows_footer_links() {
  $query_result = views_get_view_result('usa_nav', 'block');
  $links = array();
  foreach ($query_result as $row) {
    $new = '';
    if ($row->flag_content_node_timestamp) {
      $new = '<span>' . t('New!') . '</span> ';
    }
    $links[] = array(
      'data' => l($new . $row->node_title, 'node/' . $row->nid, array('html' => TRUE)),
      'class' => array(
        'menu-item'
      ),
    );
  }
  return theme('usanetwork_item_list', array(
    'warpper_attributes' => array(
      'class' => array(
        'shows-menu',
      ),
    ),
    'title_tag' => 'h2',
    'title_attributes' => array(
      'class' => array(
        'menu-title',
        'shows-menu-title',
      ),
    ),
    'title' => t('Shows'),
    'items' => $links,
    'type' => 'ul',
    'attributes' => array(
      'class' => array(
        'menu'
      )
    ),
      )
  );
}

/**
 * Renders A-Spot block for Show.
 */
function _usanetwork_tv_shows_aspot_block() {
  $show_node = _usanetwork_menu_show_menu_get_current_show_node();

  if (!empty($show_node)) {
    $show_episodes = usanetwork_schedule_pull_latest_episodes($show_node->nid, 5);

    $theme_variables = array(
      'show' => usanetwork_aspot_render($show_node),
      'episodes' => array(),
    );

    if (!empty($show_episodes)) {
      foreach ($show_episodes as $episode_data) {
        $episode_file = file_load($episode_data->fid);
        $episode_image_uri = '';

        $episode_image_uri_wrapper = file_stream_wrapper_get_instance_by_uri($episode_file->uri);

        if ($episode_image_uri_wrapper) {
          $episode_image_uri = $episode_image_uri_wrapper->getLocalThumbnailPath();
        }

        $episode_theme_variables = array(
          'url' => url('file/' . $episode_data->fid),
          'title' => $episode_data->title,
          'series_and_number' => 'S' . $episode_data->field_mpx_season_number_value . ' ' . t('Episode') . ' ' . $episode_data->field_mpx_episode_number_value,
          'duration' => gmdate('H:i:s', $episode_data->field_mpx_duration_value),
          'image_url' => image_style_url('300x169_video', $episode_image_uri),
        );

        $theme_variables['episodes'][] = $episode_theme_variables;
      }
    }

    if (!empty($theme_variables)) {
      return theme('usanetwork_tv_shows_aspot', $theme_variables);
    }
  }

  return '';
}

/**
 * Renders "Catch up, Explore block".
 */
function _usanetwork_tv_shows_catchup_explore_block() {
  $show_node = _usanetwork_menu_show_menu_get_current_show_node();

  if (!empty($show_node)) {
    $latest_full_episodes = _usanetwork_tv_shows_wrap_latest_episodes($show_node->nid);

    $theme_variables = array(
      'catch_up' => array(
        2 => array(
          'caption' => t('Watch now!'), //@TODO: Is configurable?
          'title' => t('Videos'), //@TODO: Is configurable?
          'additional_text' => t('Clips, interviews & more'), //@TODO: Is configurable?
          'elements' => array(), //@TODO: Is configurable?
        ),
        1 => array(
          'caption' => t('Watch now!'), //@TODO: Is configurable?
          'title' => t('Latest full episodes'), //@TODO: Is configurable?
          'additional_text' => t('@num full episodes', array('@num' => 5)), //@TODO: Is configurable?
          'elements' => $latest_full_episodes, //@TODO: Is configurable?
        ),
        3 => array(
          'caption' => t('Season @season_number', array('@season_number' => 2)), //@TODO: Is configurable?
          'title' => t('The season in @show_name', array('@show_name' => 'Suits')), //@TODO: Is configurable?
          'additional_text' => t('@num features', array('@num' => 13)), //@TODO: Is configurable?
          'elements' => array(), //@TODO: Is configurable?
        ),
      ),
      'explore' => array(
        4 => array(
          'caption' => t('Key players'), //@TODO: Is configurable?
          'title' => t('Meet the cast'), //@TODO: Is configurable?
          'additional_text' => t('@num characters', array('@num' => 6)), //@TODO: Is configurable?
          'elements' => array(), //@TODO: Is configurable?
        ),
        2 => array(
          'caption' => '', //@TODO: Is configurable?
          'title' => t('Explore the show'), //@TODO: Is configurable?
          'additional_text' => t('@num features', array('@num' => 27)), //@TODO: Is configurable?
          'elements' => array(), //@TODO: Is configurable?
        ),
        5 => array(
          'caption' => t('2011 - now'), //@TODO: Is configurable?
          'title' => t('Past seasons'), //@TODO: Is configurable?
          'additional_text' => t('@num seasons', array('@num' => 4)), //@TODO: Is configurable?
          'elements' => array(), //@TODO: Is configurable?
        ),
      ),
    );

    return theme('usanetwork_tv_shows_catchup_explore', $theme_variables);
  }

  return '';
}

/**
 * Wraps last episodes for "Catch Up" block carousel.
 */
function _usanetwork_tv_shows_wrap_latest_episodes($show_nid) {
  $items = array();
  $latest_episodes = usanetwork_schedule_pull_latest_episodes($show_nid, 5);

  if (!empty($latest_episodes)) {
    foreach ($latest_episodes as $show_number => $latest_episode) {
      $episode_class = NULL;

      if ($show_number == 0) {
        $episode_class = 'first';
      }

      if ($show_number == count($latest_episodes) - 1) {
        $episode_class = 'last';
      }

      $theme_variables = array(
        'class' => $episode_class,
        'title' => $latest_episode->title,
        'additional' => array(
          'normal' => NULL,
          'span' => NULL,
        ),
        'media_player_icon' => TRUE,
      );

      $items[] = theme('usanetwork_tv_shows_catchup_explore_content_element', $theme_variables);
    }
  }

  return $items;
}

function _usanetwork_tv_shows_consumptionator_relcontent_block() {
  $rendered_items = array();
  $query = drupal_get_query_parameters();

  if (!empty($query['url'])) {
    $normal_path = parse_url(drupal_get_normal_path($query['url']));
    $menu_item = menu_get_item($normal_path['path']);

    if (!empty($menu_item['page_arguments'][0])) {
      $file = $menu_item['page_arguments'][0];

      if (!empty($file)) {
        $show_field = field_get_items('file', $file, 'field_show');

        if (!empty($show_field)) {
          $show_nid = $show_field[0]['target_id'];

          $related_items = _usanetwork_tv_shows_get_related_content($show_nid, 6);

          if (!empty($related_items)) {
            $item_index = 0;
            $item_class = '';
            $items_count = count($related_items);

            foreach ($related_items as $related_item) {
              if ($item_index == 0) {
                $item_class = 'first';
              }
              elseif ($item_index == $items_count - 1) {
                $item_class = 'last';
              }
              else {
                $item_index = '';
              }

              $additional_text = array(
                'left' => '',
                'right' => '',
              );

              if (!empty($related_item->promo_season) && !empty($related_item->promo_episode)) {
                $additional_text['left'] = t('S@season episode @episode', array(
                  '@season' => $related_item->promo_season,
                  '@episode' => $related_item->promo_episode,
                ));
              }

              if ($related_item->bundle == 'media_gallery') {
                $media_items_count = _usanetwork_tv_shows_get_media_items_count($related_item->entity_id);

                $additional_text['right'] = t('@number photos', array('@number' => $media_items_count));
              }

              // Featured: use more bundles for adding timestamp
              if (in_array($related_item->bundle, array(
                'usanetwork_promo',
              ))) {
                $additional_text['right'] = gmdate('H:m:i', $related_item->promo_duration);
              }

              $theme_variables = array(
                'image_url' => url($related_item->entity_type . '/' . $related_item->entity_id),
                'caption' => $related_item->show_title,
                'title' => $related_item->title,
                'additional' => array(
                  'left' => $additional_text['left'],
                  'right' => $additional_text['right'],
                ),
              );

              $rendered_items[] = array(
                'li_class' => $item_class,
                'content' => theme('usanetwork_tv_shows_cons_related_item', $theme_variables),
              );

              $item_index++;
            }
          }
        }
      }
    }
  }

  if (!empty($rendered_items)) {
    return theme('usanetwork_tv_shows_cons_related_container', array(
      'related_items' => $rendered_items,
    ));
  }

  return '';
}

function _usanetwork_tv_shows_get_media_items_count($node_nid) {
  $query = db_select('field_data_field_media_items', 'fmi');
  $query->condition('fmi.entity_id', $node_nid);
  $query->addExpression('COUNT(*)');

  $result = $query->execute()->fetchCol();

  if (is_array($result)) {
    return reset($result);
  }

  return $result;
}
