<?php

/**
 * @file
 * Code for the usanetwork_tv_shows feature.
 */
include_once 'usanetwork_tv_shows.features.inc';

define('USANETWORK_TV_SHOWS_FIELD_NAME', 'field_show');
define('USANETWORK_TV_SHOWS_CAROUSEL_NUMBER', 3);

/**
 *  Implements hook_block_info().
 */
function usanetwork_tv_shows_block_info() {
  $blocks = array();

  $blocks['usanetwork_tv_shows_submenu'] = array(
    'info' => t('TV Show: submenu block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['usanetwork_tv_shows_aspot'] = array(
    'info' => t('TV Shows: A-Spot'),
    'cache' => DRUPAL_NO_CACHE,
  );


  // Catch up & Explore
  $blocks['usanetwork_tv_shows_coex'] = array(
    'info' => t('TV Shows: Catch up, Explore'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['usanetwork_tv_shows_fbp'] = array(
    'info' => t('Tv Shows: Full bleed promo'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['usanetwork_tv_shows_best_of'] = array(
    'info' => t('Tv Shows: Best of'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function usanetwork_tv_shows_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'usanetwork_tv_shows_submenu':
      $block['subject'] = '';
      $block['content'] = _usanetwork_tv_shows_submenu();
      break;

    case 'usanetwork_tv_shows_aspot':
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => _usanetwork_tv_shows_aspot_block(),
        '#attached' => array(
          'js' => array(
            path_to_theme('aurora_usa') . '/javascripts/matchmedia.js',
            path_to_theme('aurora_usa') . '/javascripts/picturefill.js',
            path_to_theme('aurora_usa') . '/javascripts/show-aspot.js',
          ),
        ),
      );
      break;


    case 'usanetwork_tv_shows_coex':
      $block['subject'] = '';
      $block['content'] = _usanetwork_tv_shows_catchup_explore_block();
      break;
    case 'usanetwork_tv_shows_fbp':
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => _usanetwork_tv_shows_render_fbp_block(),
        '#attached' => array(
          'js' => array(
            path_to_theme('aurora_usa') . '/javascripts/full-bleed-promo.js',
          ),
        ),
      );
      break;
    case 'usanetwork_tv_shows_best_of':
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => _usanetwork_tv_shows_render_best_of_block(),
      );
      break;
  }

  return $block;
}

/**
 *  Implements hook_theme().
 */
function usanetwork_tv_shows_theme($existing, $type, $theme, $path) {
  return array(
    'usanetwork_tv_shows_aspot' => array(
      'variables' => array(
        'show' => NULL,
        'episodes_block_title' => NULL,
        'episodes' => array(
          0 => array(
            'url' => NULL,
            'title' => NULL,
            'series_and_number' => NULL,
            'duration' => NULL,
            'image_url' => NULL,
          ),
        ),
      ),
      'template' => 'templates/usanetwork-tv-shows-aspot',
    ),
    'usanetwork_tv_shows_catchup_explore' => array(
      'variables' => array(
        'is_catch_up' => NULL,
        'is_explore' => NULL,
        'catch_up' => array(// Carousel lines
          0 => array(
            'caption' => NULL,
            'title' => NULL,
            'additional_text' => NULL,
            'elements' => array(), // Array of pre-rendered 'usanetwork_tv_shows_catchup_explore_content_element' elements
          )
        ),
        'explore' => array(
        ),
      ),
      'template' => 'templates/usanetwork-tv-shows-catchup-explore',
    ),
    'usanetwork_tv_shows_catchup_explore_content_element' => array(
      'variables' => array(
        'class' => NULL,
        'node_classes' => array(),
        'title' => NULL,
        'additional' => array(
          'normal' => NULL,
          'span' => NULL,
        ),
        'media_player_icon' => TRUE,
      ),
      'template' => 'templates/usanetwork-tv-shows-catchup-explore-content-element',
    ),
    'usanetwork_tv_shows_submenu' => array(
      'variables' => array(
        'show_title' => NULL,
        'weekday' => NULL,
        'time' => NULL,
        'social_icons' => array(),
        'show_menu_video_url' => NULL,
        'show_menu_video_img' => NULL,
        'show_menu_video_title' => NULL,
        'show_menu_video_caption' => NULL,
        'show_menu_tab_items' => NULL,
      ),
      'template' => 'templates/usanetwork-tv-shows-submenu',
    ),
    'usanetwork_tv_shows_best_of' => array(
      'variables' => array(
        'promos' => array(),
      ),
      'template' => 'templates/usanetwork-tv-shows-best-of',
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 */
function usanetwork_tv_shows_image_default_styles() {
  $styles = array();

  $styles['634x349'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 634,
          'height' => 349,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * this is a straight rip from pub_tv old relations fields
 */
function usanetwork_tv_shows_form_tv_episode_node_form_alter(&$form, &$form_state) {

  // Add AJAX handling to the the show field so that users only see seasons for
  // the selected show.
  $form['field_show'][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'usanetwork_tv_shows_season_option_populate_js',
    'wrapper' => 'season-wrapper',
    'effect' => 'fade',
  );
  $form['field_show'][LANGUAGE_NONE]['#prefix'] = '<div id="show-wrapper">';
  $form['field_show'][LANGUAGE_NONE]['#suffix'] = '</div>';

  // Hide the seasons field until the user has selected a show.
  $form['field_season'][LANGUAGE_NONE]['#states'] = array(
    'disabled' => array(
      ':input[name="field_show[' . LANGUAGE_NONE . ']"]' => array(
        'value' => '_none',
      ),
    ),
  );

  $form['field_season'][LANGUAGE_NONE]['#description'] = t('You must select a TV Show before selecting a season.');
  $form['field_season'][LANGUAGE_NONE]['#prefix'] = '<div id="season-wrapper">';
  $form['field_season'][LANGUAGE_NONE]['#suffix'] = '</div>';


  // Check if a value for show has already been provided.
  $selected_show = '';
  if (isset($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (isset($form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'];
  }

  // If a value for show has already been provided, reset the form accordingly.
  if (!empty($selected_show)) {
    // Get the list of seasons based on the user-entered show value.
    $query = new EntityFieldQuery('entity_type', 'node');
    $query->entityCondition('bundle', 'tv_season');
    $query->fieldCondition('field_show', 'target_id', $selected_show);
    $result = $query->execute();

    // If the first element of the options aray is "- Select -" (et. al.) then
    // add it to the beginning of our new options array.
    $keys = array_keys($form['field_season'][LANGUAGE_NONE]['#options']);
    if (!is_null($keys[0]) && !is_numeric($keys[0])) {
      $options = array_slice($form['field_season'][LANGUAGE_NONE]['#options'], 0, 1);
    }
    else {
      $options = array();
    }

    // Add each season that belongs to the user-selected show to the options
    // array.
    if (isset($result['node'])) {
      $news_items_nids = array_keys($result['node']);
      $nodes = entity_load('node', $news_items_nids);
      foreach ($nodes as $node) {
        $options[$node->nid] = check_plain($node->title);
      }
    }
    else {
      drupal_set_message(t('There are no seasons associated with the show you selected. Please !url first.', array('!url' => l(t('create a season'), 'node/add/tv-season'))), 'error');
      watchdog('pub_tv', 'While creating an episode, a user chose a season that does not belong to the selected show.', array(), WATCHDOG_WARNING);
    }
    $form['field_season'][LANGUAGE_NONE]['#description'] = '';
    $form['field_season'][LANGUAGE_NONE]['#options'] = $options;
  }


  // If a user re-selects "- Select a value -" on the node add form, or if the
  // slected show has no seasons, make sure the season field is re-disabled.
  if ((isset($form_state['values']['field_show']) && is_null($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) || (!empty($selected_show) && !isset($result['node']))) {
    $form['field_season'][LANGUAGE_NONE]['#disabled'] = TRUE;
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'usanetwork_tv_shows') . '/js/usanetwork_tv_episode.js';

  // Add a form validator.
  $form['#validate'][] = 'usanetwork_tv_shows_episode_form_validate';
}

/**
 * Implements hook_usanetwork_overlay_prerender().
 */
function usanetwork_tv_shows_usanetwork_overlay_prerender() {

}

/**
 * AJAX callback function that populates the "season" entity reference field
 * with seasons for the user specifid show.
 *
 * @see usanetwork_tv_shows_form_tv_episode_node_form_alter()
 */
function usanetwork_tv_shows_season_option_populate_js($form, $form_state) {
  return $form['field_season'];
}

/**
 * Form validation for the episode node form.
 */
function usanetwork_tv_shows_episode_form_validate($form, &$form_state) {
  $selected_season = $form_state['values']['field_season'][LANGUAGE_NONE][0]['target_id'];
  $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];

  if ($selected_season) {
    $season_node = node_load($selected_season);
    if ($season_node->field_show[LANGUAGE_NONE][0]['target_id'] !== $selected_show) {
      form_set_error('field_season', t('The season you selected belongs to a different show than the show you selected on this form.'));
    }
  }
}

/**
 * Returns show assosiated with current page.
 * TODO may be depricated
 */
function _usanetwork_tv_show_menu_get_show(&$entity_type = NULL, $position = 1, $path = NULL) {
  $show = false;
  $entity = _usanetwork_menu_get_object($entity_type, $position, $path);
  if ($entity) {
    list(,, $bundle) = entity_extract_ids($entity_type, $entity);
    if ($entity_type == 'node' && $bundle == 'tv_show') {
      $show = $entity;
    }
    elseif (!empty($entity->{USANETWORK_TV_SHOWS_FIELD_NAME})) {
      $show_ref = reset(field_get_items($entity_type, $entity, USANETWORK_TV_SHOWS_FIELD_NAME));
      if ($show_ref) {
        $show = node_load($show_ref['target_id']);
      }
    }
  }

  return $show;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usanetwork_tv_shows_form_tv_show_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path('module', 'usanetwork_tv_shows') . '/js/usanetwork_tv_shows.js';
}

/**
 * Selects content related with show content.
 *
 * @param integer $limit - limits query items, 0 means that all the available
 * pieces of content should be pulled.
 *
 * @param string $sort - sorting order
 *
 * @param string $sort_by - sorting field name
 *
 * @param array $filters - consists of filters for query
 * (you may ignore this param if you want to select all the content):
 * array(
 *   'bundle' => array(
 *     'values' => array('media_gallery', 'post'),
 *     // OR 'values' => 'media_gallery',
 *     'operator' => 'IN', // default 'IN' if array and default '=' if not array
 *   ),
 * );
 */
function _usanetwork_tv_shows_get_related_content($show_id, $limit = 0, $sort = 'DESC', $sort_by = 'entity_id', $filters = array()) {
  $content_items = array();

  // Apply sorter alias for nodes
  $node_sorter = _usanetwork_tv_shows_detect_related_content_node_sorter($sort_by);

  // Apply sorter alias for files
  $file_sorter = _usanetwork_tv_shows_detect_related_content_file_sorter($sort_by);

  // Pull nodes
  $nodes = _usanetwork_tv_shows_pull_related_nodes($show_id, 0, $limit, $sort, $node_sorter, $filters);

  // Pull files
  $files = _usanetwork_tv_shows_pull_related_files($show_id, $limit, $sort, $file_sorter, $filters);

  // Merge nodes and files
  if (!empty($nodes) && !empty($files)) {
    $content_items = array_merge($nodes, $files);
  }
  elseif (!empty($nodes)) {
    $content_items = $nodes;
  }
  elseif (!empty($files)) {
    $content_items = $files;
  }

  // Sort items according sorter alias
  usort($content_items, function($a, $b) use ($node_sorter, $file_sorter, $sort) {
    $a_sorter = $a->entity_type == 'node' ? $node_sorter : $file_sorter;

    $b_sorter = $b->entity_type == 'node' ? $node_sorter : $file_sorter;

    if ($a->$a_sorter == $b->$b_sorter) {
      return 0;
    }
    else {
      if ($a->$a_sorter > $b->$b_sorter) {
        return $sort == 'ASC' ? 1 : -1;
      }
      return $sort == 'ASC' ? -1 : 1;
    }
  });

  // Crop extra elements
  if ($limit > 0) {
    array_splice($content_items, $limit);
  }

  return $content_items;
}

/**
 * Alters node filters
 */
function _usanetwork_tv_shows_detect_related_content_node_sorter($sort_by) {
  // There are no available aliases at the moment.
  return $sort_by;
}

/**
 * Alters file filters
 */
function _usanetwork_tv_shows_detect_related_content_file_sorter($sort_by) {
  $filter_aliases = array(
    'changed' => 'timestamp',
  );

  if (isset($filter_aliases[$sort_by])) {
    return $filter_aliases[$sort_by];
  }

  return $sort_by;
}

/**
 * Pulls nodes related with show content.
 *
 * @param integer $show_id - node id of the show
 *
 * @param integer $start_from - the number of records that should be ignored
 *
 * @param integer $limit - limits query items, 0 means that all the available
 * pieces of content should be pulled.
 *
 * @param string $sort - sorting order
 *
 * @param string $sort_by - sorting field name
 *
 * @param array $filters - consists of filters for query
 * (you may ignore this param if you want to select all the content):
 * array(
 *   'bundle' => array(
 *     'values' => array('media_gallery', 'post'),
 *     // OR 'values' => 'media_gallery',
 *     'operator' => 'IN', // default 'IN' if array and default '=' if not array
 *   ),
 * );
 */
function _usanetwork_tv_shows_pull_related_nodes($show_id, $start_from = 0, $limit = 0, $direction = 'DESC', $sort_by = 'changed', $filters = array()) {
  $query = db_select('field_data_field_show', 'fshow');
  $query->fields('fshow', array('entity_type', 'bundle', 'entity_id'));
  // Attach content node
  $query->join('node', 'n', 'fshow.entity_id=n.nid');
  $query->fields('n', array('nid', 'title', 'created', 'changed'));
  // Attach promo title
  $query->leftJoin('field_data_field_promo_text_line_1', 'fp_title', 'n.nid=fp_title.entity_id');
  $query->addField('fp_title', 'field_promo_text_line_1_value', 'promo_title');
  // Attach show node
  $query->join('node', 'sn', 'fshow.field_show_target_id=sn.nid');
  $query->addField('sn', 'title', 'show_title');
  // Attach associated videos for promos
  $query->leftJoin('field_data_field_promo_assoc_video', 'assoc', 'assoc.entity_id=n.nid');
  $query->addField('assoc', 'field_promo_assoc_video_target_id', 'assoc_fid');
  // Attach promo season number
  $query->leftJoin('field_data_field_mpx_season_number', 'fvp_season', 'fvp_season.entity_id=assoc.field_promo_assoc_video_target_id');
  $query->addField('fvp_season', 'field_mpx_season_number_value', 'promo_season');
  // Attach promo episode number
  $query->leftJoin('field_data_field_mpx_episode_number', 'fvp_episode', 'fvp_episode.entity_id=assoc.field_promo_assoc_video_target_id');
  $query->addField('fvp_episode', 'field_mpx_episode_number_value', 'promo_episode');
  // Attach promo duration value
  $query->leftJoin('field_data_field_mpx_duration', 'fvp_duration', 'fvp_duration.entity_id=assoc.field_promo_assoc_video_target_id');
  $query->addField('fvp_duration', 'field_mpx_duration_value', 'promo_duration');

  $query->condition('fshow.field_show_target_id', $show_id);
  $query->condition('fshow.deleted', 0);
  $query->condition('n.status', 1);
  $query->condition('fshow.entity_type', 'node');

  $query->orderBy($sort_by, $direction);

  if ($limit > 0) {
    $query->range($start_from, $limit);
  }

  if (!empty($filters)) {
    foreach ($filters as $filter_field_name => $filter_value) {
      $values = !empty($filter_value['values']) ? $filter_value['values'] : NULL;

      if (!empty($values)) {
        $operator = !empty($filter_value['operator'])
            ? $filter_value['operator']
            : (is_array($values)
                ? 'IN'
                : '='
            );

        if (is_array($values) && count($values) == 1) {
          $values = reset($values);
          $operator = '=';
        }

        $query->condition($filter_field_name, $values, $operator);
      }
    }
  }

  return $query->execute()->fetchAll();
}

/**
 * Pulls files related with show content.
 *
 * @param integer $limit - limits query items, 0 means that all the available
 * pieces of content should be pulled.
 *
 * @param string $sort - sorting order
 *
 * @param string $sort_by - sorting field name
 *
 * @param array $filters - consists of filters for query
 * (you may ignore this param if you want to select all the content):
 * array(
 *   'bundle' => array(
 *     'values' => array('media_gallery', 'post'),
 *     // OR 'values' => 'media_gallery',
 *     'operator' => 'IN', // default 'IN' if array and default '=' if not array
 *   ),
 * );
 */
function _usanetwork_tv_shows_pull_related_files($show_id, $limit = 0, $direction = 'DESC', $sort_by = 'timestamp', $filters = array(), $season_num = FALSE, $episode_num = FALSE) {
  $query = db_select('field_data_field_show', 'fshow');
  $query->fields('fshow', array('entity_type', 'bundle', 'entity_id'));
  $query->join('file_managed', 'f', 'fshow.entity_id=f.fid');
  $query->fields('f', array('created', 'timestamp'));
  $query->leftJoin('mpx_video', 'mpx_video_data', 'f.fid=mpx_video_data.fid');
  $query->addField('mpx_video_data', 'title', 'title');
  $query->join('node', 'sn', 'fshow.field_show_target_id=sn.nid');

  if ($season_num) {
    $query->leftJoin('field_data_field_mpx_season_number', 'season_num', 'f.fid=season_num.entity_id');
    $query->addField('season_num', 'field_mpx_season_number_value', 'season_number');
    $query->condition('season_num.field_mpx_season_number_value', $season_num);
  }

  if ($episode_num) {
    $query->leftJoin('field_data_field_mpx_episode_number', 'episode_num', 'f.fid=episode_num.entity_id');
    $query->addField('episode_num', 'field_mpx_episode_number_value', 'episode_number');
    $query->condition('episode_num.field_mpx_episode_number_value', $episode_num);
  }

  $query->addField('sn', 'title', 'show_title');
  $query->condition('fshow.field_show_target_id', $show_id);
  $query->condition('fshow.deleted', 0);
  $query->condition('fshow.entity_type', 'file');
  $db_or = db_or();
  $db_or->condition('mpx_video_data.status', 1);
  $db_or->isNull('mpx_video_data.status');
  $query->condition($db_or);

  $query->orderBy($sort_by, $direction);

  if ($limit > 0) {
    $query->range(0, $limit);
  }

  if (!empty($filters)) {
    foreach ($filters as $filter_field_name => $filter_value) {
      $values = !empty($filter_value['values']) ? $filter_value['values'] : NULL;

      if (!empty($values)) {
        $operator = !empty($filter_value['operator'])
            ? $filter_value['operator']
            : (is_array($values)
                ? 'IN'
                : '='
            );

        $query->condition($filter_field_name, $values, $operator);
      }
    }
  }

  return $query->execute()->fetchAll();
}

/**
 * Renders content from returned settings array of "_usanetwork_tv_shows_get_related_content()".
 *
 * @param array $query_result - the result of "_usanetwork_tv_shows_get_related_content()"
 * @param array $content_view_modes - array of applicable view modes for content:
 * array(
 *   'view_mode_name' => array(
 *     'node' => array(           // applies only for listed nodes
 *       'node_bundle_name1',
 *       'node_bundle_name2'
 *     ),
 *   ),
 *   'view_mode_name2' => array(
 *     'node' => array(),         // applies for all listed nodes
 *     'file' => array('image'),  // applies for files with type "image"
 *   ),
 * );
 */
function _usanetwork_tv_shows_render_related_content($query_result, $content_view_modes) {
  $content = array();

  if (!empty($query_result) && !empty($content_view_modes)) {
    foreach ($query_result as $query_item) {
      $view_mode = _usanetwork_tv_shows_detect_related_content_view_mode($query_item, $content_view_modes);

      if (!empty($view_mode)) {
        $content[] = _usanetwork_tv_shows_render_related_content_item($query_item, $view_mode);
      }
    }
  }

  return $content;
}

/**
 * Pulls related video from all shows instead $ignore_show_nids.
 */
function _usanetwork_tv_shows_pull_videos($ignore_show_nids = array(), $start_from = 0, $limit = 0) {
  $query = db_select('file_managed', 'f');
  $query->fields('f', array('fid'));
  $query->addField('f', 'uri', 'image_uri'); // URI should be returned with alias
  // Join show IDs
  $query->leftJoin('field_data_field_show', 'field_show', 'f.fid=field_show.entity_id');
  $query->addField('field_show', 'field_show_target_id', 'show_nid');
  // Join show node
  $query->leftJoin('node', 'show_node', 'field_show.field_show_target_id=show_node.nid');
  $query->addField('show_node', 'title', 'show_title');
  // Join full episode flag
  $query->leftJoin('field_data_field_mpx_full_episode', 'field_full', 'f.fid=field_full.entity_id');
  $query->addField('field_full', 'field_mpx_full_episode_value', 'is_full');
  // Join video duration
  $query->leftJoin('field_data_field_mpx_duration', 'field_duration', 'f.fid=field_duration.entity_id');
  $query->addField('field_duration', 'field_mpx_duration_value', 'duration');
  // Join season number
  $query->leftJoin('field_data_field_mpx_season_number', 'field_season', 'f.fid=field_season.entity_id');
  $query->addField('field_season', 'field_mpx_season_number_value', 'season_number');
  // Join episode number
  $query->leftJoin('field_data_field_mpx_episode_number', 'field_episode', 'f.fid=field_episode.entity_id');
  $query->addField('field_episode', 'field_mpx_episode_number_value', 'episode_number');
  // Join mpx_video data
  $query->leftJoin('mpx_video', 'v', 'f.fid=v.fid');
  $query->addField('v', 'title', 'video_title');

  $query->condition('v.status', 1);
  $query->orderBy('v.airdate', 'DESC');

  if (!empty($ignore_show_nids)) {
    if (count($ignore_show_nids) == 1) {
      $query->condition('field_show.field_show_target_id', reset($ignore_show_nids), '<>');
    }
    else {
      $query->condition('field_show.field_show_target_id', $ignore_show_nids, 'NOT IN');
    }
  }

  if ($limit > 0) {
    $query->range($start_from, $limit);
  }

  return $query->execute()->fetchAll();
}

/**
 * Renders related content item from db_select array.
 */
function _usanetwork_tv_shows_render_related_content_item($query_item, $view_mode) {
  $content_item = array();

  switch ($query_item->entity_type) {
    case 'node':
      $content_item = node_view(node_load($query_item->entity_id), $view_mode);
      break;

    case 'file':
      $content_item = file_view(file_load($query_item->entity_id), $view_mode);
      break;
  }

  return !empty($content_item) ? render($content_item) : '';
}

/**
 * Detects first available view mode for related content item.
 */
function _usanetwork_tv_shows_detect_related_content_view_mode($query_item, $content_view_modes) {
  foreach ($content_view_modes as $view_mode_name => $view_mode_elements) {
    if (isset($view_mode_elements[$query_item->entity_type])) {
      if (empty($view_mode_elements[$query_item->entity_type])) {
        return $view_mode_name;
      }
      else {
        if (in_array($query_item->bundle, $view_mode_elements[$query_item->entity_type])) {
          return $view_mode_name;
        }
      }
    }

    return NULL;
  }
}

/**
 * @param $file_fid
 */
function _usanetwork_tv_shows_get_video_file_info($associated_video) {
  $result = array(
    'season' => NULL,
    'episode' => NULL,
    'duration' => NULL,
    'title' => NULL,
  );

  if ($associated_video) {
    $field_names = array(
      'season' => 'field_mpx_season_number',
      'episode' => 'field_mpx_episode_number',
      'duration' => 'field_mpx_duration',
      'title' => 'field_mpx_title',
    );

    foreach ($field_names as $result_name => $field_name) {
      $field_data_field = field_get_items('file', $associated_video, $field_name);

      if (!empty($field_data_field[0]['value'])) {
        $result[$result_name] = $field_data_field[0]['value'];
      }
    }
  }

  return $result;
}

/**
 * Renders A-Spot block for Show.
 */
function _usanetwork_tv_shows_aspot_block() {
  $theme_variables = array();
  $show_node = _usanetwork_menu_show_menu_get_current_show_node();

  if (!empty($show_node)) {
    $episodes_block_title_field = field_get_items('node', $show_node, 'field_tvs_aspot_promo_btitle');
    $theme_variables['episodes_block_title'] = !empty($episodes_block_title_field) ? $episodes_block_title_field[0]['value'] : t('Latest full episodes');
    $theme_variables['show'] = usanetwork_aspot_render($show_node);
    $featured_items_field = field_get_items('node', $show_node, 'field_usa_tv_promo');

    if (!empty($featured_items_field)) {
      foreach ($featured_items_field as $featured_items_field_item) {
        $related_nid = $featured_items_field_item['target_id'];
        $related_node = node_load($related_nid);


        if ($related_node) {
          $promo_content = _usanetwork_promo_featured_content($related_node);

          $episode_theme_variables = array(
            'url' => $promo_content['url'],
            'title' => $promo_content['title'],
            'additional' => $promo_content['caption'],
            'image_url' => image_style_url('300x169_video', $promo_content['image_url']),
          );

          if (!empty($promo_content['season_number']) && !empty($promo_content['episode_number'])) {
            $episode_theme_variables['series_and_number'] = 'S' . $promo_content['season_number'] . ' ' . t('Episode') . ' ' . $promo_content['episode_number'];
          }

          $theme_variables['episodes'][] = $episode_theme_variables;
        }
      }
    }
  }

  if (!empty($theme_variables)) {
    return theme('usanetwork_tv_shows_aspot', $theme_variables);
  }

  return '';
}

/**
 * Renders "Catch up, Explore block".
 */
function _usanetwork_tv_shows_catchup_explore_block() {
  $show_node = _usanetwork_menu_show_menu_get_current_show_node();

  if (!empty($show_node)) {

    $theme_variables = array();
    //Analyze catch-up carousel
    $theme_variables['is_catch_up'] = FALSE;
    for ($i = 1; $i <= USANETWORK_TV_SHOWS_CAROUSEL_NUMBER; $i++) {
      $field_ctchup_carousel = field_get_items('node', $show_node, "field_ctchup_carousel_$i");
      if ($field_ctchup_carousel) {
        $theme_variables['is_catch_up'] = TRUE;
        $theme_variables['catch_up'][$i]['elements'] = _usanetwork_tv_shows_get_cuexcarousel($field_ctchup_carousel);
        $theme_variables['catch_up'][$i]['caption'] = _usanetwork_get_field_item('node', $show_node, "field_ctchup_pretitle_$i", 'value');
        $theme_variables['catch_up'][$i]['title'] = _usanetwork_get_field_item('node', $show_node, "field_ctchup_title_$i", 'value');
        $theme_variables['catch_up'][$i]['additional_text'] = _usanetwork_get_field_item('node', $show_node, "field_ctchup_posttitle_$i", 'value');
        $theme_variables['catch_up'][$i]['carousel_position'] = ($i % 2 == 0) ? 'right'
              : 'left';
      }
    }

    //Analyze explore carousel
    $theme_variables['is_explore'] = FALSE;
    for ($i = 1; $i <= USANETWORK_TV_SHOWS_CAROUSEL_NUMBER; $i++) {
      $field_explr_carousel = field_get_items('node', $show_node, "field_explr_carousel_$i");
      if ($field_explr_carousel) {
        $theme_variables['is_explore'] = TRUE;
        $theme_variables['explore'][$i]['elements'] = _usanetwork_tv_shows_get_cuexcarousel($field_explr_carousel);
        $theme_variables['explore'][$i]['caption'] = _usanetwork_get_field_item('node', $show_node, "field_explr_pretitle_$i", 'value');
        $theme_variables['explore'][$i]['title'] = _usanetwork_get_field_item('node', $show_node, "field_explr_title_$i", 'value');
        $theme_variables['explore'][$i]['additional_text'] = _usanetwork_get_field_item('node', $show_node, "field_explr_posttitle_$i", 'value');
        $theme_variables['catch_up'][$i]['carousel_position'] = ($i % 2 == 0) ? 'right'
              : 'left';
      }
    }

    if (!empty($theme_variables)) {
      $tets = theme('usanetwork_tv_shows_catchup_explore', $theme_variables);
      return $tets;
    }
  }

  return '';
}

/**
 * Wraps elements for "Catch Up - Explore" block carousel.
 */
function _usanetwork_tv_shows_get_cuexcarousel($carousel) {
  $items = array();

  foreach ($carousel as $show_number => $carousel_item) {
    $episode_class = NULL;

    if ($show_number == 0) {
      $episode_class = 'first';
    }

    if ($show_number == count($carousel) - 1) {
      $episode_class = 'last';
    }

    $promo = _usanetwork_promo_featured_content($carousel_item['target_id']);

    $theme_variables = array(
      'class' => $promo['show_class'],
      'title' => $promo['caption'],
      'title' => $promo['title'],
      'additional' => array(
        'normal' => NULL,
        'span' => NULL,
      ),
      'media_player_icon' => $promo['icon-type'],
    );

    $items[] = theme('usanetwork_tv_shows_catchup_explore_content_element', $theme_variables);
  }

  return $items;
}

/**
 * Counts number of images in media gallery with nid=$node_nid.
 */
function _usanetwork_tv_shows_get_media_items_count($node_nid) {
  $query = db_select('field_data_field_media_items', 'fmi');
  $query->condition('fmi.entity_id', $node_nid);
  $query->addExpression('COUNT(*)');

  $result = $query->execute()->fetchCol();

  if (is_array($result)) {
    return reset($result);
  }

  return $result;
}

/**
 * Returns human-readable aliases of node content types for consumptionator page.
 */
function _usanetwork_tv_shows_get_content_type_aliases() {
  return array(
    'media_gallery' => t('Gallery'),
    'usanetwork_promo' => t('Promo'),
  );
}

function _usanetwork_tv_shows_get_content_image_url($node) {
  if (!is_object($node)) {
    $node = node_load($node);
  }

  if ($node) {
    $field_name = '';
    $image_uri = 0;

    switch ($node->type) {
      case 'media_gallery':
        $field_name = 'field_cover_item';
        break;

      case 'usanetwork_promo':
        $field_name = 'field_promo_regular_image';
        break;
    }

    if (!empty($field_name)) {
      $field_item = field_get_items('node', $node, $field_name);

      if (!empty($field_item)) {
        $image_uri = $field_item[0]['uri'];
      }
    }

    return $image_uri;
  }

  return '';
}

function _usanetwork_tv_shows_submenu() {
  $show = menu_get_object();

  if (!is_object($show) || (!isset($show->type) && $show->type != 'tv_show')) {
    return '';
  }

  $display_title = field_get_items('node', $show, 'field_display_title');
  if (is_array($display_title) && !empty($display_title[0]['safe_value'])) {
    $show_title = $display_title[0]['safe_value'];
  }
  else {
    $show_title = $show->title;
  }
  $show_title = decode_entities($show_title);
  $usa_tv_tune_in_date = field_get_items('node', $show, 'field_usa_tv_tune_in_date');
  if (is_array($usa_tv_tune_in_date) && !empty($usa_tv_tune_in_date[0]['value'])) {
    $show_tunein = explode(' ', $usa_tv_tune_in_date[0]['value']);
    $show_weekday = array_shift($show_tunein);
    $show_time = implode(' ', $show_tunein);
  }

  $social_links = array();
//  foreach (array('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'googleplus') as $social_network) {
  foreach (array('facebook', 'twitter') as $social_network) {
  $social_bar_link_field = field_get_items('node', $show, 'field_usa_link_' . $social_network);
  if ($social_bar_link_field) {
      $social_links[] = l('', $social_bar_link_field[0]['url'], array('attributes' => array('class' => $social_network, 'target' => '_blank')));
    }
  }

  $show_menus = array();
  $promo_menu_links = field_get_items('node', $show, 'field_show_links');
  if ($promo_menu_links) {
    foreach ($promo_menu_links as $key => $link) {
      $show_menu_item = entity_load('field_collection_item', array($link['value']));
      $show_menu_item_child = field_get_items('field_collection_item', reset($show_menu_item), 'field_child_link');
      if ($show_menu_item_child) {
        $show_menus[$key]['child'] = array();
        foreach ($show_menu_item_child as $child_link) {
          $show_menus[$key]['child'][] = l($child_link['title'], $child_link['url']);
        }
      }
      $show_menu_item_main_link = field_get_items('field_collection_item', reset($show_menu_item), 'field_main_link');
      if ($show_menu_item_main_link) {
        $show_menus[$key]['main_link'] = l(drupal_ucfirst($show_menu_item_main_link[0]['title']), $show_menu_item_main_link[0]['url']);
      }
    }
  }

  return theme('usanetwork_tv_shows_submenu', array(
    'show_title' => $show_title,
    'weekday' => isset($show_weekday) ? $show_weekday : NULL,
    'time' => isset($show_time) ? $show_time : NULL,
    'social_icons' => $social_links,
    'show_menu_tab_items' => $show_menus,
  ));
}

function _usanetwork_tv_shows_discription_item($show, $field_list, &$description_vars) {

  foreach ($field_list as $target => $field_name) {
    $field_value = field_get_items('node', $show, $field_name);
    if ($field_value) {
      $field = reset($field_value);

      switch ($target) {
        case 'title':
          $description_vars['title'] = $field['value'];
          break;
        case 'caption':
          $description_vars['caption'] = $field['value'];
          break;
        case 'additional_text':
          $description_vars['additional_text'] = $field['value'];
          break;
        default:
          break;
      }
    }
  }
}

/**
 * Get latest content from field_latest_carousel field of tv_show content type
 */
function _usanetwork_tv_shows_get_latest_content($show) {
  $show_latests_items = field_get_items('node', $show, 'field_latest_carousel_items');

  $items = FALSE;
  if ($show_latests_items) {
    foreach ($show_latests_items as $item) {
      $item_object = field_collection_item_load($item['value']);

      $show_latest_entity_target_id = _usanetwork_get_field_item('field_collection_item', $item_object, 'field_latest_carousel', 'target_id');
      $show_latest_entity_target_type = _usanetwork_get_field_item('field_collection_item', $item_object, 'field_latest_carousel', 'target_type');
      $show_latest_entity_is_ymal = _usanetwork_get_field_item('field_collection_item', $item_object, 'field_is_ymal', 'value');
      if ($show_latest_entity_is_ymal) {
        $show_latest_entity_ymal_title = _usanetwork_get_field_item('field_collection_item', $item_object, 'field_ymal_block_title', 'value');
      }

      if ($show_latest_entity_target_id && $show_latest_entity_target_type) {
        $item = array(
          'entity_id' => $show_latest_entity_target_id,
          'entity_type' => $show_latest_entity_target_type,
        );

        if ($show_latest_entity_is_ymal && $show_latest_entity_ymal_title) {
          $item['ymal'] = $show_latest_entity_ymal_title;
        }
        else if ($show_latest_entity_is_ymal) {
          $item['ymal'] = t('You might also like');
        }
        $items[] = (object) $item;
      }
    }
  }
  return $items;
}


/**
 *  Implements hook_field_widget_form_alter().
 */
function usanetwork_tv_shows_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'field_collection' && $context['field']['field_name'] == 'field_latest_carousel_items') {
    $element['field_ymal_block_title'][$element['field_ymal_block_title']['#language']][0]['value']['#states'] = array(
      'visible' => array(
        ':input[name="field_latest_carousel_items[und][' . $element['#delta'] . '][field_is_ymal][und]"]' => array('checked' => TRUE),
      ),
    );
  }
}

/**
 * Renders full bleed promo block according current show.
 */
function _usanetwork_tv_shows_render_fbp_block() {
  $show_node = _usanetwork_menu_show_menu_get_current_show_node();
  if (!empty($show_node)) {
    $show_wrapper = entity_metadata_wrapper('node', $show_node);
    if (!empty($show_node->field_hp_full_bleed_promo)) {
      $promo_node = $show_wrapper->field_hp_full_bleed_promo->value();
      $theme_variables = array(
        'url' => !empty($promo_node->field_usa_fbp_cta_link)
            ? $show_wrapper->field_hp_full_bleed_promo->field_usa_fbp_cta_link->url->value()
            : NULL,
        'desktop_url' => !empty($promo_node->field_usa_fbp_desktop_image)
            ? $show_wrapper->field_hp_full_bleed_promo->field_usa_fbp_desktop_image->file->url->value()
            : NULL,
        'mobile_url' => !empty($promo_node->field_usa_fbp_mobile_image)
            ? $show_wrapper->field_hp_full_bleed_promo->field_usa_fbp_mobile_image->file->url->value()
            : NULL,
      );
      return theme('usanetwork_fbp_block', $theme_variables);
    }
  }
  return '';
}

/**
 * Renders best of block according current show.
 */
function _usanetwork_tv_shows_render_best_of_block() {
  $show_node = _usanetwork_menu_show_menu_get_current_show_node();
  if (!empty($show_node)) {
    $field_promo_items = field_get_items('node', $show_node, 'field_hp_ft_featured');
    if (!empty($field_promo_items) && is_array($field_promo_items)) {
      $i = 0;
      $promos = array();
      foreach ($field_promo_items as $promo_reference) {
        $promo_entity = entity_load($promo_reference['target_type'], array($promo_reference['target_id']));
        if (empty($promo_entity)) {
          continue;
        }
        else {
          $promo_entity = reset($promo_entity);
        }
       switch ($promo_reference['target_type']) {
          case 'node':
            $promo_data = _usanetwork_promo_pull_node_promo_details($promo_entity);
            break;
          case 'file':
            $promo_data = _usanetwork_promo_pull_file_promo_details($promo_entity);
            break;
        }
        if (empty($promo_data)) {
          continue;
        }
        $promo_image_url = usanetwork_core_api_get_content_image($promo_reference['target_type'], $promo_entity);
        $promo_link = url($promo_reference['target_type'] . '/' . $promo_reference['target_id']);
        $is_first = ($i == 0) ? TRUE : FALSE;
        $i++;
        $promos[] = array(
          'url' => $promo_link,
          'image' => !empty($promo_image_url)
              ? ($is_first
                ? theme('image_style', array('style_name' => '757x628', 'path' => $promo_image_url))
                : theme('image_style', array('style_name' => '539x303', 'path' => $promo_image_url))
              )
              : NULL,
          'icon_type' => 'play-icon',
          'caption' => $promo_data['show_name'],
          'title' => $promo_data['promo_title'],
          'description' => $promo_data['description'],
          'more_link' => $promo_data['cta'],
          'class' => $is_first ? 'featured-large' : 'featured-small',
          'is_first' => $is_first,
        );
      }
      $theme_variables['promos'] = $promos;
      return theme('usanetwork_tv_shows_best_of', $theme_variables);
    }
  }
  return '';
}
