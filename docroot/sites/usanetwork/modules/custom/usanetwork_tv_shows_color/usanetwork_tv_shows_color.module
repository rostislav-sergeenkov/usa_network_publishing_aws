<?php

/**
 * Default colors for tv show content type
 */
function usanetwork_tv_shows_color_default_codes() {
  return array(
    'benched' => array(
      '#282b45',
      '#3c4067',
      '#1b1d2e'
    ),
    'burnnotice' => array(
      '#ff6c2b',
      '#ff8a2b',
      '#ff532b'
    ),
    'usadaytime' => array(
      '#3ea1d3',
      '#48b9f2',
      '#358ab5'
    ),
    'dig' => array(
      '#ed1c24',
      '#fe2d2d',
      '#d41a21'
    ),
    'playinghouse' => array(
      '#1ca2c7',
      '#1fb4dd',
      '#188bab'
    ),
    'rush' => array(
      '#28439b',
      '#3355c1',
      '#1f3478'
    ),
    'satisfaction' => array(
      '#9b1c38',
      '#b32242',
      '#81182f'
    ),
    'sirens' => array(
      '#d2232a',
      '#e6272e',
      '#b31f25'
    ),
    'whitecollar' => array(
      '#03afd9',
      '#04c3f2',
      '#0195b9'
    ),
    'wwe' => array(
      '#cb0e16',
      '#e60f18',
      '#a70c12'
    ),
    'suits' => array(
      '#d42027',
      '#e83939',
      '#be1c23'
    ),
    'chrisleyknowsbest' => array(
      '#f2ad2c',
      '#f5be56',
      '#ebb249'
    ),
    'graceland' => array(
      '#0d3b6e',
      '#1b4c83',
      '#113359'
    ),
    'covertaffairs' => array(
      '#c50504',
      '#d60302',
      '#b10808'
    ),
    'royalpains' => array(
      '#7cd7fd',
      '#9bdffc',
      '#68c5ec'
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function usanetwork_tv_shows_color_menu() {
  // admin pages
  $items['admin/usanetwork/shows/color'] = array(
    'title' => t('Shows color'),
    'description' => t('Show color regenerate page'),
    'access arguments' => array('administer usanetwork'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_tv_shows_color_config')
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function usanetwork_tv_shows_color_init() {
  usanetwork_tv_shows_color_add_css();
}

/*
 * Implements hook_usanetwork_widget_style().
 */

function usanetwork_tv_shows_color_usanetwork_widget_style() {
  usanetwork_tv_shows_color_add_css();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usanetwork_tv_shows_color_field_widget_colorfield_unified_textfield_form_alter(&$element, &$form_state, $context) {
  // Attaches the library to the field based on the selected colorpicker.
  $settings = $context['instance']['widget']['settings'];
  if (isset($settings['colorfield_options']['colorfield_enable_colorpicker']) && $settings['colorfield_options']['colorfield_colorpicker_type'] == 'minicolors') {
    // Load jQuery minicolors if we can't, farbtastic will fallback.
    if (($library = libraries_load('jquery-miniColors')) && !empty($library['loaded'])) {
      $element['rgb']['#post_render'][] = 'usanetwork_tv_shows_color_field_attach_library';
      $element['#attached']['css'][] = drupal_get_path('module', 'usanetwork_tv_shows_color') . '/usanetwork_tv_show_color_admin.css';
    }
  }
}

/**
 * Callback to load library. Fixes library not loading on validation error.
 */
function usanetwork_tv_shows_color_field_attach_library($children, $elements) {
  libraries_load('jquery-miniColors');
  return $children;
}

/**
 * Adds show-specific css
 */
function usanetwork_tv_shows_color_add_css() {
  if (file_exists('public://tv_show_color/tv_show_color_schema.css')) {
    drupal_add_css('public://tv_show_color/tv_show_color_schema.css', array('type' => 'file', 'group' => CSS_THEME));
  }
  if (file_exists('public://movie_color/movie_color_schema.css')) {
    drupal_add_css('public://movie_color/movie_color_schema.css', array('type' => 'file', 'group' => CSS_THEME));
  }
}

/**
 * Implements hook_theme().
 */
function usanetwork_tv_shows_color_theme() {
  $module_path = drupal_get_path('module', 'usanetwork_tv_shows_color');
  return array(
    'usanetwork_tv_show_color_css' => array(
      'variables' => array(
        'node_code' => NULL,
        'primary_color_code' => NULL,
        'secondary_color_code' => NULL,
        'tertiary_color_code' => NULL,
      ),
      'path' => $module_path . '/theme',
      'template' => 'tv-show-color-css',
    ),
    'usanetwork_movie_color_css' => array(
      'variables' => array(
        'node_code' => NULL,
        'primary_color_code' => NULL,
        'secondary_color_code' => NULL,
        'tertiary_color_code' => NULL,
      ),
      'path' => $module_path . '/theme',
      'template' => 'movie-color-css',
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function usanetwork_tv_shows_color_node_presave($node) {
  if (!isset($node->op) && ($node->type == 'tv_show' || $node->type == 'movie')) {
    $delete_file = FALSE;
    $node_code = usanetwork_tv_shows_color_get_node_code($node);
    $primary_color_code = field_get_items('node', $node, 'field_usa_tv_show_color');
    $secondary_color_code = field_get_items('node', $node, 'field_usa_tv_show_color_second');
    $tertiary_color_code = field_get_items('node', $node, 'field_usa_tv_show_color_tertiary');
    if ($primary_color_code) {
      $primary_color_code = reset($primary_color_code);
    }
    if ($secondary_color_code) {
      $secondary_color_code = reset($secondary_color_code);
    }
    if ($tertiary_color_code) {
      $tertiary_color_code = reset($tertiary_color_code);
    }
    if (empty($primary_color_code) || empty($secondary_color_code) || empty($tertiary_color_code)) {
      if (empty($primary_color_code)) {
        $default_colors = usanetwork_tv_shows_color_default_codes();
        $default_node_colors = isset($default_colors[$node_code]) ? $default_colors[$node_code] : FALSE;
      }
      if (empty($default_node_colors) && $primary_color_code) {
        $secondary_color_code = !$secondary_color_code ? $primary_color_code : $secondary_color_code;
        $tertiary_color_code = !$tertiary_color_code ? $primary_color_code : $tertiary_color_code;
      }
      elseif (!empty($default_node_colors)) {
        $primary_color_code['rgb'] = $primary_color_code ? $primary_color_code['rgb'] : $default_node_colors[0];
        $secondary_color_code['rgb'] = $default_node_colors[1];
        $tertiary_color_code['rgb'] = $default_node_colors[2];
      }
      else {
        $delete_file = TRUE;
      }
    }
    if ($node->type == 'tv_show') {
      $node_css = theme('usanetwork_tv_show_color_css', array(
        'node_code' => $node_code,
        'primary_color_code' => $primary_color_code['rgb'],
        'secondary_color_code' => $secondary_color_code['rgb'],
        'tertiary_color_code' => $tertiary_color_code['rgb'],
      ));
      $css_dir = 'public://tv_show_color/nodes';
      $css_file = 'public://tv_show_color/tv_show_color_schema.css';
    }
    elseif ($node->type == 'movie') {
      $node_css = theme('usanetwork_movie_color_css', array(
        'node_code' => $node_code,
        'primary_color_code' => $primary_color_code['rgb'],
        'secondary_color_code' => $secondary_color_code['rgb'],
        'tertiary_color_code' => $tertiary_color_code['rgb'],
      ));
      $css_dir = 'public://movie_color/nodes';
      $css_file = 'public://movie_color/movie_color_schema.css';
    }
    if (file_prepare_directory($css_dir, FILE_CREATE_DIRECTORY)) {
      $file_name = $node_code . '_' . $node->nid . '.css';
      $file_path = $css_dir . '/' . $file_name;
      $saved = FALSE;
      if ($delete_file) {
        $delete_file = file_unmanaged_delete($file_path);
      }
      else {
        $saved = file_unmanaged_save_data($node_css, $file_path, FILE_EXISTS_REPLACE);
      }
      if ($saved || $delete_file) {
        $files = file_scan_directory($css_dir, '/\.css/');
        $css = '';
        foreach ($files as $file) {
          $css .= file_get_contents($file->uri);
        }
        if (file_unmanaged_save_data($css, $css_file, FILE_EXISTS_REPLACE)) {
          return TRUE;
        }
      }
    }
  }
}

function usanetwork_tv_shows_color_get_node_code($node) {
  $node_code = NULL;
  if ($node->type == 'tv_show') {
    $node_code = field_get_items('node', $node, 'field_pathauto_alias');
    if (!$node_code) {
      return;
    }
    else {
      $node_code = reset($node_code);
    }
    return $node_code['value'];
  }
  elseif ($node->type == 'movie') {
    module_load_include('inc', 'pathauto', 'pathauto');
    return pathauto_cleanstring($node->title);
  }
}

/**
 * Return css class for show
 */
function usanetwork_tv_shows_color_show_css_class($show_node) {
  if (!is_object($show_node)) {
    $show_id = $show_node;
    $show_css_class = &drupal_static('show_css_class_' . $show_node, FALSE);
    if ($show_css_class) {
      // get show css class from static variable
      return $show_css_class;
    }
    $show_node = node_load($show_node);
    if (empty($show_node)) {
      return false;
    }
  }
  else {
    $show_id = $show_node->nid;
    $show_css_class = &drupal_static('show_css_class_' . $show_node->nid, FALSE);
    if ($show_css_class) {
      return $show_css_class;
    }
  }

  // get show css class from static variable
  if ($show_class_cache = cache_get('show_id_' . $show_id)) {
    $show_css_class = $show_class_cache->data;
    return $show_class_cache->data;
  }


  if ($node_alias_field = _usanetwork_get_field_item('node', $show_node, 'field_pathauto_alias', 'value')) {
    $show_css_class = 'show-' . $node_alias_field;
  }
  else {
    $show_css_class = drupal_clean_css_identifier($show_node->title);
  }

  //set show css class from show in cache
  cache_set('show_id_' . $show_id, $show_css_class);

  return $show_css_class;
}

/**
 * Return css class for movie
 */
function usanetwork_tv_shows_color_movie_css_class($movie_node) {
  if (!is_object($movie_node)) {
    $movie_id = $movie_node;
    $movie_css_class = &drupal_static('show_css_class_' . $movie_node, FALSE);
    if ($movie_css_class) {
      // get show css class from static variable
      return $movie_css_class;
    }
    $movie_node = node_load($movie_node);
    if (empty($movie_node)) {
      return false;
    }
  }
  else {
    $movie_id = $movie_node->nid;
    $movie_css_class = &drupal_static('show_css_class_' . $movie_node->nid, FALSE);
    if ($movie_css_class) {
      return $movie_css_class;
    }
  }

  // get show css class from static variable
  if ($movie_class_cache = cache_get('show_id_' . $movie_id)) {
    $movie_css_class = $movie_class_cache->data;
    return $movie_class_cache->data;
  }

  module_load_include('inc', 'pathauto', 'pathauto');
  $movie_css_class = 'movie-' . drupal_clean_css_identifier(pathauto_cleanstring($movie_node->title));

  //set show css class from show in cache
  cache_set('show_id_' . $movie_id, $movie_css_class);

  return $movie_css_class;
}


/**
 * Page callback for configuring page
 */
function usanetwork_tv_shows_color_config() {

  $form['description_show'] = array(
    '#type' => 'markup',
    '#markup' => t('Regenerate color schema for all published TV Shows '),
  );

  $form['submit_show'] = array(
    '#name' => 'regenerate_shows',
    '#type' => 'submit',
    '#value' => t('Regenerate'),
  );

  $form['br'] = array(
    '#type' => 'markup',
    '#markup' => '<br>',
  );

  $form['description_movie'] = array(
    '#type' => 'markup',
    '#markup' => t('Regenerate color schema for all published Movies '),
  );

  $form['submit_movie'] = array(
    '#name' => 'regenerate_movies',
    '#type' => 'submit',
    '#value' => t('Regenerate'),
  );

  return $form;
}

/**
 * Submit handler.
 *
 * @param array $form
 *   Form API form.
 * @param array $form_state
 *   Form API form.
 */
function usanetwork_tv_shows_color_config_submit($form, &$form_state) {
  $function = 'usanetwork_tv_content_color_butch_op';
  if ($form_state['triggering_element']['#name'] == 'regenerate_shows') {

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'tv_show');
    $query->propertyCondition('status', NODE_PUBLISHED);
    $tv_content_ids = $query->execute();
  }
  elseif ($form_state['triggering_element']['#name'] == 'regenerate_movies') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', 'movie');
    $query->propertyCondition('status', NODE_PUBLISHED);
    $tv_content_ids = $query->execute();
  }
  if (isset($tv_content_ids['node'])) {
    $operations = array();
    foreach (array_keys($tv_content_ids['node']) as $nid) {
      $operations[] = array(
        $function,
        array(
          $nid,
        ),
      );
    }
    batch_set(array(
        'operations' => $operations
      )
    );
  }
}

/**
 * Batch operation for batch.
 * 
 */
function usanetwork_tv_content_color_butch_op($nid, &$context) {
  $node = node_load($nid);
  if ($node) {
    $result = module_invoke('usanetwork_tv_shows_color', 'node_presave', $node);
    if ($result) {
      $context['message'] = t('Generating css for node "@title" color schema', array('@title' => $node->title));
      drupal_set_message(t('Generating css for node "@title" color schema', array('@title' => $node->title)));
    }
    else {
      drupal_set_message(t('Generating css for node "@title" color schema Failed', array('@title' => $node->title)), 'warning');
    }
  }
}
