<?php

/**
 * Implements hook_field_formatter_info().
 */
function usanetwork_tv_shows_display_field_formatter_info() {
  return array(
    'usanetwork_tv_shows_display_entity_view' => array(
      'label' => t('TV Shows Featured'),
      'description' => t('Display the referenced entities rendered by entity_view() with custom display options.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'view_mode' => '',
        'view_mode_large' => '',
        'links' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function usanetwork_tv_shows_display_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'usanetwork_tv_shows_display_entity_view') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $options = array();
    if (!empty($entity_info['view modes'])) {
      foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
        $options[$view_mode] = $view_mode_settings['label'];
      }
    }

    if (count($options) > 1) {
      $element['view_mode'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('View mode'),
        '#default_value' => $settings['view_mode'],
      );
      $element['view_mode_large'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('View mode for large item'),
        '#default_value' => $settings['view_mode_large'],
      );
    }

    $element['links'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show links'),
      '#default_value' => $settings['links'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function usanetwork_tv_shows_display_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'usanetwork_tv_shows_display_entity_view') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $summary[] = t('Rendered as @mode', array('@mode' => isset($entity_info['view modes'][$settings['view_mode']]['label'])
          ? $entity_info['view modes'][$settings['view_mode']]['label']
          : $settings['view_mode']));
    $summary[] = !empty($settings['links'])
        ? t('Display links')
        : t('Do not display links');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function usanetwork_tv_shows_display_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Let the entity reference module load data
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function usanetwork_tv_shows_display_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  // Check if first promo should be large
  $promo_large = reset(field_get_items($entity_type, $entity, 'field_usa_tv_promo_large'));
  $promo_large = (isset($promo_large['value']) && $promo_large['value'])
      ? true
      : false;

  switch ($display['type']) {
    case 'usanetwork_tv_shows_display_entity_view':
      foreach ($items as $delta => $item) {
        // Protect ourselves from recursive rendering.
        static $depth = 0;
        $depth++;
        if ($depth > 20) {
          throw new EntityReferenceRecursiveRenderingException(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array('@entity_type' => $entity_type, '@entity_id' => $item['target_id'])));
        }

        $entity = clone $item['entity'];
        unset($entity->content);
        // Select view mode according promo large option and item delta
        $view_mode = ($promo_large && $delta == 0)
            ? $settings['view_mode_large']
            : $settings['view_mode'];
        $result[$delta] = entity_view($field['settings']['target_type'], array($item['target_id'] => $entity), $view_mode, $langcode, FALSE);

        if (empty($settings['links']) && isset($result[$delta][$field['settings']['target_type']][$item['target_id']]['links'])) {
          $result[$delta][$field['settings']['target_type']][$item['target_id']]['links']['#access'] = FALSE;
        }
        $depth = 0;
      }
      break;
  }

  $result['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'usanetwork_tv_shows_display') . '/usanetwork_tv_shows_display.js',
  );

  return $result;
}

/**
 * Implements hook_preprocess_field()
 */
function usanetwork_tv_shows_display_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_name'] == 'field_usa_tv_promo') {
    $field = &$variables['element'];
    $field['#attached']['js'][] = drupal_get_path('module', 'usanetwork_tv_shows_display') . '/usanetwork_tv_shows_display.js';
    $entity = $field['#object'];

    // Check if first promo should be large
    $promo_large = reset(field_get_items($field['#entity_type'], $entity, 'field_usa_tv_promo_large'));
    $promo_large = (isset($promo_large['value']) && $promo_large['value'])
        ? true
        : false;
    if ($promo_large) {
      // Add class to the field
      $variables['classes_array'][] = 'first-promo-large';
    }
  }
}

/**
 * Implements hook_node_view()
 */
function usanetwork_tv_shows_display_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'tv_show') {
    $promo_rows = field_get_items('node', $node, 'field_usa_tv_promo_rows');
    if ($promo_rows && !empty($promo_rows)) {
      $promo_rows = reset($promo_rows);
      // Provide field value to javascript
      drupal_add_js(array(
        'usanetwork_tv_shows' => array(
          'promo_rows' => $promo_rows['value'],
        ),
          ), array('type' => 'setting'));
    }
  }
}

/**
 * Implements hook_block_info().
 */
function usanetwork_tv_shows_display_block_info() {
  $blocks = array();

  $blocks['usanetwork_tv_shows_submenu'] = array(
    'info' => t('TV Show: submenu block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['usanetwork_tv_shows_latest'] = array(
    'info' => t('TV Show: latest block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function usanetwork_tv_shows_display_block_view($delta) {
  global $base_url;
  $block = array();
  switch ($delta) {
    case 'usanetwork_tv_shows_submenu':

      $show = menu_get_object();

      if (!isset($show->type) && $show->type != 'tv_show') {
        return '';
      }

      $display_title = field_get_items('node', $show, 'field_display_title');
      if (is_array($display_title) && !empty($display_title[0]['safe_value'])) {
        $show_title = $display_title[0]['safe_value'];
      }
      else {
        $show_title = $show->title;
      }
      $show_title = decode_entities($show_title);
      $usa_tv_tune_in_date = field_get_items('node', $show, 'field_usa_tv_tune_in_date');
      if (is_array($usa_tv_tune_in_date) && !empty($usa_tv_tune_in_date[0]['value'])) {
        $show_tunein = explode(' ', $usa_tv_tune_in_date[0]['value']);
        $show_weekday = array_shift($show_tunein);
        $show_time = implode(' ', $show_tunein);
      }

      $social_links = array();
      foreach (array('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'googleplus') as $social_network) {
        $social_bar_link_field = field_get_items('node', $show, 'field_usa_link_' . $social_network);
        $social_url = ($social_bar_link_field)
            ? $social_bar_link_field[0]['url']
            : '';

        $social_links[] = l('', $social_url, array('attributes' => array('class' => $social_network)));
      }

      $promo_target = field_get_items('node', $show, 'field_featured_in_menu');
      if ($promo_target) {
        $promo_item = node_load($promo_target[0]['target_id']);
        $promo_image = field_get_items('node', $promo_item, 'field_promo_regular_image');
        $promo_link = field_get_items('node', $promo_item, 'field_promo_link');
        $promo_text_line1 = field_get_items('node', $promo_item, 'field_promo_text_line_1');
        $promo_text_line2 = field_get_items('node', $promo_item, 'field_promo_text_line_2');

        if ($promo_image) {
          $preview_image = theme('image_style', array(
            'style_name' => 'episode_preview_temp',
            'path' => $promo_image[0]['uri'],
          ));
        }

        if ($promo_link) {
          $promo_link_url = $base_url . $promo_link[0]['url'];
        }

        if ($promo_text_line1) {
          $promo_text_title = $promo_text_line1[0]['value'];
        }

        if ($promo_text_line2) {
          $promo_text_caption = $promo_text_line2[0]['value'];
        }
      }

      $show_menus = array();
      $promo_menu_links = field_get_items('node', $show, 'field_show_links');
      if ($promo_menu_links) {
        foreach ($promo_menu_links as $key => $link) {
          $show_menu_item = entity_load('field_collection_item', array($link['value']));
          $show_menu_item_child = field_get_items('field_collection_item', reset($show_menu_item), 'field_child_link');
          if ($show_menu_item_child) {
            $show_menus[$key]['child'] = array();
            foreach ($show_menu_item_child as $child_link) {
              $show_menus[$key]['child'][] = l($child_link['title'], $base_url . $child_link['url']);
            }
          }
          $show_menu_item_main_link = field_get_items('field_collection_item', reset($show_menu_item), 'field_main_link');
          if ($show_menu_item_main_link) {
            $show_menus[$key]['main_link'] = l(drupal_ucfirst($show_menu_item_main_link[0]['title']), $base_url . $show_menu_item_main_link[0]['url']);
          }
        }
      }



      $block['subject'] = '';

      $block['content']['#markup'] = theme('usanetwork_tv_shows_submenu', array(
        'show_title' => $show_title,
        'weekday' => $show_weekday,
        'time' => $show_time,
        'social_icons' => $social_links,
        'show_menu_video_url' => isset($promo_link_url)
            ? $promo_link_url
            : NULL,
        'show_menu_video_img' => isset($preview_image)
            ? $preview_image
            : NULL,
        'show_menu_video_title' => isset($promo_text_title)
            ? $promo_text_title
            : NULL,
        'show_menu_video_caption' => isset($promo_text_caption)
            ? $promo_text_caption
            : NULL,
        'show_menu_tab_items' => $show_menus,
      ));
      break;

    case 'usanetwork_tv_shows_latest':

      $show = menu_get_object();
      if (!isset($show->type) && $show->type != 'tv_show') {
        return '';
      }

      $block['subject'] = '';
      $block['content'] = _usanetwork_tv_shows_display_latest($show);
      break;
  }
  return $block;
}

function _usanetwork_tv_shows_display_latest($show) {
  $related_to_show = _usanetwork_tv_shows_get_related_content($show->nid, 20);



  $description_vars = array(
    'caption' => t('All new!'),
    'title' => t('Latest'),
    'additional_text' => t('Photos, polls & more'),
  );

  foreach (array('title' => 'field_hp_promos_block_title', 'caption' => 'field_caption_text', 'additional_text' => 'field_additional_text') as $target => $field_name) {

    $field_value = field_get_items('node', $show, $field_name);
    if ($field_value) {
      $field = reset($field_value);

      switch ($target) {
        case 'title':
          $description_vars['title'] = $field['value'];
          break;
        case 'caption':
          $description_vars['caption'] = $field['value'];
          break;
        case 'additional_text':
          $description_vars['additional_text'] = $field['value'];
          break;
        default:
          break;
      }
    }
  }

  $output[] = theme('usanetwork_home_carousel_description_item', $description_vars);


  foreach ($related_to_show as $entity_data) {
    $entity = entity_load_single($entity_data->entity_type, $entity_data->entity_id);

    if ($entity_data->entity_type == 'node') {
      switch ($entity_data->bundle) {
        case 'media_gallery':

          break;
        default:
          break;
      }
    }
    else if ($entity_data->entity_type == 'file') {
      switch ($entity->filemime) {
        case 'video/mpx':
          $wrapper = file_stream_wrapper_get_instance_by_uri($entity->uri);
          $image = theme_image_style(array(
            'style_name' => '300x250',
            'path' => $wrapper->getLocalThumbnailPath(),
            'width' => 300,
            'height' => 250,
          ));

          if ($duration_field_value = field_get_items('file', $entity, 'field_mpx_duration')) {
            $duration_field = reset($duration_field_value);
            $duration = gmdate("H:i:s", $duration_field['value']);
          }

          if ($season_number_field = field_get_items('file', $entity, 'field_mpx_season_number')) {
            $season_number = reset($season_number_field);
          }

          if ($episode_number_field = field_get_items('file', $entity, 'field_mpx_full_episode')) {
            $episode_number = reset($episode_number_field);
          }

          if (isset($season_number) && isset($episode_number)) {
            $additional = t('S@season_num episode @episode_num', array(
              '@season_num' => isset($season_number)
                  ? $season_number
                  : '',
              '@episode_num' => isset($episode_number)
                  ? $episode_number
                  : '')
            );
          }

          $latest_items[] = theme('usanetwork_tv_shows_latest_item', array(
            'item_title' => NULL,
            'show_class' => NULL,
            'url' => url('file/' . $entity->fid),
            'show_title' => $show->title,
            'additional' => isset($additional) ? $additional : NULL,
            'duration' => $duration,
            'icon_type' => 'play-icon',
            'image' => $image,
              )
          );

          break;
        default:
          break;
      }
    }
  }
  $output[] = theme('usanetwork_item_list', array(
    'warpper_attributes' => array(
      'class' => array(
        'carousel',
        'carousel-left',
        'start',
      ),
    ),
    'title_tag' => 'h2',
    'title_attributes' => array(
      'class' => NULL
    ),
    'title' => NULL,
    'items' => $latest_items,
    'type' => 'ul',
    'attributes' => array(),
    'suffix' => array()
  ));
  return implode(PHP_EOL, $output);
}

/**
 * Implements hook_theme().
 */
function usanetwork_tv_shows_display_theme($existing, $type, $theme, $path) {
  return array(
    'usanetwork_tv_shows_submenu' => array(
      'variables' => array(
        'show_title' => NULL,
        'weekday' => NULL,
        'time' => NULL,
        'social_icons' => array(),
        'show_menu_video_url' => NULL,
        'show_menu_video_img' => NULL,
        'show_menu_video_title' => NULL,
        'show_menu_video_caption' => NULL,
        'show_menu_tab_items' => NULL,
      ),
      'path' => $path . '/theme',
      'template' => 'usanetwork-tv-shows-submenu',
    ),
    'usanetwork_tv_shows_latest_item' => array(
      'variables' => array(
        'item_title' => NULL,
        'show_class' => NULL,
        'url' => NULL,
        'show_title' => NULL,
        'additional' => NULL,
        'duration' => NULL,
        'icon_type' => NULL,
        'image' => NULL,
      ),
      'path' => $path . '/theme',
      'template' => 'usanetwork-tv-shows-latest-item',
    ),
  );
}
