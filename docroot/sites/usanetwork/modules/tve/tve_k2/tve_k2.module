<?php

/**
 * @file
 * Main file for the TVE K2 module.
 *
 * @ingroup tve_k2
 */

/**
 * Suffix variables for the K2 Service.
 */
define('TVE_K2_ZIP_SEARCH_SUFFIX', 'CollectXML.asp');
define('TVE_K2_USER_SUBSCRIBE_SUFFIX', 'UserXML.asp');

/**
 * Default error message text.
 */
define('TVE_K2_DEFAULT_ERROR_MESSAGE', 'Sorry, something went wrong.');

/**
 * XML Fields.
 */
define('TVE_K2_XML_FIELD_STATUS', 'STATUS');
define('TVE_K2_XML_FIELD_PROVIDER', 'PROVIDER');
define('TVE_K2_XML_FIELD_NAME', 'NAME');
define('TVE_K2_XML_FIELD_K2USERID', 'K2USERID');
define('TVE_K2_XML_FIELD_STATUSMESSAGE', 'STATUSMESSAGE');

/**
 * Response status.
 */
define('TVE_K2_RESPONSE_STATUS_SUCCESS', 'SUCCESS');

/**
 * Implements hook_menu().
 */
function tve_k2_menu() {
  $menu['admin/tve/k2'] = array(
    'title' => 'K2',
    'description' => t('K2 settings page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tve_k2_admin_form'),
    'access arguments' => array('administer k2 settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tve_k2.admin.inc',
    'weight' => 4,
  );

  $menu['k2/zip'] = array(
    'title' => 'K2 Search MVPD by zip',
    'page arguments' => array(2),
    'page callback' => '_tve_k2_get_mvpd_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['k2/subscription'] = array(
    'title' => 'K2 Subscribe user',
    'page callback' => '_tve_k2_subscribe_user',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function tve_k2_permission() {
  $permissions = array(
    'administer k2 settings' => array(
      'title' => t('Administer TVE K2'),
      'description' => t('Manage K2 Service configuration parameters.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function tve_k2_theme() {
  return array(
    'tve_k2_xml_request' => array(
      'variables' => array(
        'xml_variables' => array(),
      ),
    ),
  );
}

/**
 * Page callback for 'k2/zip' path.
 *
 * Searches for MVPDs by zip code and outputs them as json.
 * Outputs operation results in json format.
 *
 * @param string $zip_code
 *   Zip code for XML request.
 */
function _tve_k2_get_mvpd_list($zip_code) {
  $k2_api_url = variable_get('tve_k2_api_url') . TVE_K2_ZIP_SEARCH_SUFFIX;
  $k2_client_id = variable_get('tve_k2_client_id');
  $k2_brand_id = variable_get('tve_k2_brand_id');

  if (!$k2_client_id || !$k2_brand_id) {
    watchdog('TVE K2', _tve_k2_get_default_error_message(), NULL, WATCHDOG_ERROR);

    drupal_json_output(array(
      'status' => 'error',
      'error_message' => _tve_k2_get_default_error_message(),
    ));

    drupal_page_footer();
    exit;
  }

  $zip_code = trim(check_plain($zip_code));
  $data = theme('tve_k2_xml_request', array(
    'xml_variables' => array(
      'client' => variable_get('tve_k2_client_id'),
      'network' => variable_get('tve_k2_brand_id'),
      'zipcode' => $zip_code,
    ),
  ));

  $options = array(
    'method' => 'POST',
    'data' => $data,
    'headers' => array('Content-Type' => 'text/xml; charset=UTF-8'),
  );

  $result = drupal_http_request($k2_api_url, $options);

  if (isset($result->error) || !$result->data) {
    watchdog('TVE K2', _tve_k2_get_default_error_message(), NULL, WATCHDOG_ERROR);

    drupal_json_output(array(
      'status' => 'error',
      'error_message' => _tve_k2_get_default_error_message(),
    ));

    drupal_page_footer();
    exit;
  }

  $result_xml_object = simplexml_load_string($result->data);

  if (TVE_K2_RESPONSE_STATUS_SUCCESS == $result_xml_object->{TVE_K2_XML_FIELD_STATUS}) {
    $providers = array();

    foreach ($result_xml_object->{TVE_K2_XML_FIELD_PROVIDER} as $provider) {
      if (1 == (int) $provider->{TVE_K2_XML_FIELD_STATUS}) {
        array_push($providers, (string) $provider->{TVE_K2_XML_FIELD_NAME});
      }
    }

    $return_object = array(
      'status' => 'success',
      'k2UserId' => (string) $result_xml_object->{TVE_K2_XML_FIELD_K2USERID},
      'providerList' => $providers,
    );
  }
  else {
    $return_object = _tve_k2_process_error_response($result_xml_object);
  }

  drupal_json_output($return_object);
}

/**
 * Page callback for 'k2/subscription' path.
 *
 * Subscribes a user using K2 service.
 * Outputs operation results in json format.
 */
function _tve_k2_subscribe_user() {
  $k2_api_url = variable_get('tve_k2_api_url') . TVE_K2_USER_SUBSCRIBE_SUFFIX;
  $k2_client_id = variable_get('tve_k2_client_id');
  $k2_brand_id = variable_get('tve_k2_brand_id');

  if (!isset($_POST['user_data']) && !is_array($_POST['user_data'])) {
    drupal_page_footer();
    exit;
  }

  $user_data = $_POST['user_data'];
  // Encodes special characters in a plain-text.
  foreach ($user_data as &$user_data_item) {
    $user_data_item = trim(check_plain($user_data_item));
  }
  $data = theme('tve_k2_xml_request', array(
      'xml_variables' => array(
        'client' => $k2_client_id,
        'network' => $k2_brand_id,
        'firstname' => $user_data['firstName'],
        'lastname' => $user_data['lastName'],
        'zipcode' => $user_data['zipCode'],
        'provider' => $user_data['providerName'],
        'crisis' => 0,
        'emailaddress' => $user_data['emailAdress'],
        'k2userid' => $user_data['k2UserId'],
        'optin' => 'YES',
        'source' => $user_data['siteBrandId'],
      ),
    )
  );

  $options = array(
    'method' => 'POST',
    'data' => $data,
    'headers' => array('Content-Type' => 'text/xml; charset=UTF-8'),
  );

  $result = drupal_http_request($k2_api_url, $options);

  if (isset($result->error) || !$result->data) {
    watchdog('TVE K2', _tve_k2_get_default_error_message(), NULL, WATCHDOG_ERROR);

    drupal_json_output(array(
      'status' => 'error',
      'error_message' => _tve_k2_get_default_error_message(),
    ));

    drupal_page_footer();
    exit;
  }

  $result_xml_object = simplexml_load_string($result->data);

  if (TVE_K2_RESPONSE_STATUS_SUCCESS == $result_xml_object->{TVE_K2_XML_FIELD_STATUS}) {
    $return_object = array(
      'status' => 'success',
    );
  }
  else {
    $return_object = _tve_k2_process_error_response($result_xml_object);
  }

  drupal_json_output($return_object);
}

/**
 * Processes the error response.
 *
 * Returns an array with the status and message.
 *
 * @param object $response
 *   Response object.
 *
 * @return array
 *   Error response array.
 */
function _tve_k2_process_error_response($response) {
  $error_code = (string) $response->{TVE_K2_XML_FIELD_STATUSMESSAGE};
  $error_message = _tve_k2_get_error_message($error_code);

  watchdog('TVE K2', $error_message, NULL, WATCHDOG_ERROR);

  return array(
    'status' => 'error',
    'error_message' => $error_message,
  );
}

/**
 * Returns default error message, translated.
 *
 * @return string
 *   Configurable default error message.
 */
function _tve_k2_get_default_error_message() {
  return variable_get('tve_k2_default_message', TVE_K2_DEFAULT_ERROR_MESSAGE);
}

/**
 * Returns error message for the specified error code.
 *
 * @param string $error_code
 *   Error code for associative array of errors text.
 *
 * @return string
 *   Error text for user.
 */
function _tve_k2_get_error_message($error_code) {
  $error_messages = variable_get('tve_k2_messages', array());

  return isset($error_messages[$error_code]) ?
    $error_messages[$error_code] :
    _tve_k2_get_default_error_message();
}

/**
 * Creates XML file.
 *
 * @param array $variables
 *   Associative array of XML nodes.
 *
 * @return string
 *   Xml prepared for request.
 */
function theme_tve_k2_xml_request($variables) {
  $dom = new DOMDocument('1.0', 'utf-8');
  $k2_data_collector = $dom->createElement('K2DATACOLLECTOR');

  foreach ($variables['xml_variables'] as $key => $val) {
    $child_value = htmlspecialchars(trim(check_plain($val)));
    $child = $dom->createElement(strtoupper($key), $child_value);
    $k2_data_collector->appendChild($child);
  }

  $dom->appendChild($k2_data_collector);
  $xmltext = $dom->saveXML();
  return $xmltext;
}
