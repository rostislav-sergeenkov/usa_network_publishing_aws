<?php
/**
 * @file
 * Code for the usanetwork_ads feature.
 */

include_once 'usanetwork_ads.features.inc';
include_once 'usanetwork_ads.pages.inc';

/**
 * Implements hook_init().
 */
function usanetwork_ads_init() {
  drupal_add_js(drupal_get_path('module', 'usanetwork_ads') . '/js/omniture.js', array('scope' => 'footer'));
}

/**
 * Helper that returns the tv_show node nid associated with a given node.
 */
function _usanetwork_ads_get_node_tv_show($node) {

  $tv_show_nid = NULL;

  if ($node->type == 'tv_show') {
    $tv_show_nid = $node->nid;
  }
  else if (isset($node->field_show)) {
    $field_show_items = field_get_items('node', $node, 'field_show');
    $tv_show_nid = $field_show_items[0]['target_id'];
  }

  return $tv_show_nid;
}


/**
 * Helper that converts menu item router paths to a more easily understood form.
 */
function _usanetwork_ads_clean_menu_item_path($path) {

  // Change "%node" to "[content id]" to be more easily understood by
  // non-Drupalists.
  $path = str_replace('%node', '[content id]', $path);

  return $path;
}


/**
 * Helper that returns menu paths (from hook_menu() implementations) for all
 * usanetwork_* modules.
 */
function _usanetwork_ads_get_usanetwork_menu_paths() {

  $menu_paths = array();
  $hook_menu_modules = module_implements('menu');

  foreach ($hook_menu_modules as $module) {
    if (strpos($module, 'usanetwork_') === 0) {
      $function_name = $module . '_menu';
      $module_menu_items = $function_name();
      foreach ($module_menu_items as $item_path => $item_data) {
        if (strpos($item_path, 'admin') === FALSE && $item_path != 'home') {
          $menu_paths[ $item_path ] = _usanetwork_ads_clean_menu_item_path($item_path);
        }
      }
    }
  }

  asort($menu_paths);

  return $menu_paths;
}


/**
 * Implements hook_permission().
 */
function usanetwork_ads_permission() {

  $permissions = array();
  $permissions['administer usanetwork dart settings'] = array(
    'title' => t('Administer USA Network DART Ad Settings'),
    'description' => '',
  );

  return $permissions;
}


/**
 * Implements hook_menu().
 */
function usanetwork_ads_menu() {

  $items = array();
  $items['admin/usanetwork/ads/site-metric-settings'] = array(
    #'type' => MENU_CALLBACK,
    'title' => t('USA Network Site Metric Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_usanetwork_ads_site_metric_settings_form'),
    'access arguments' => array('administer usanetwork dart settings'),
  );
  $items['custom-dart-iframe'] = array(
    'page callback' => 'usanetwork_ads_custom_dart_iframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function usanetwork_ads_block_info() {
  $blocks = array();
  $blocks['dart_floodlight'] = array(
    'info' => t('DART: Floodlight Tags for Show Homepages '),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function usanetwork_ads_block_view($delta) {
  $block = array();
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'dart_floodlight':
      $block['subject'] = '';
      $block['content'] = usanetwork_ads_dart_floodlight();
      break;
  }
  return $block;
}

/**
 * Implements hook_page_alter().
 */
function usanetwork_ads_page_alter(&$page) {
  // Disable omniture if needed
  if (isset($page['page_bottom']['sitecatalyst'])) {
    $current_path = current_path();
    $args = explode('/', $current_path);
    if (count($args) >=2 && $args[0] == 'node' && is_numeric($args[1])) {
      $node = node_load($args[1]);
      if (_usanetwork_ads_get_node_omniture_variables($node) == false) {
        unset($page['page_bottom']['sitecatalyst']);
      }
    }
  }
}

/**
 * Menu callback to output dart ad content without drupal theme
 */
function usanetwork_ads_custom_dart_iframe() {
  global $base_url;
  $jquery_path = $base_url .'/'. drupal_get_path('module', 'jquery_update') . '/replace/jquery/1.7/jquery.min.js?v=1.7.1';
  $file_path = $base_url . '/' . drupal_get_path('module', 'usanetwork_ads') . '/usa_files/custom_dart_iframe.html';
  $file = file_get_contents($file_path);
  $output  = '';

  $output .= str_replace('<title>Ad Iframe | USA Network</title>', '<title>Ad Iframe | USA Network</title>'."\n".'<script src="'.$jquery_path.'"></script>', $file);

  echo $output;
  exit;
}


/**
 * Helper that returns nodes of a given type.
 */
function _usanetwork_ads_get_nodes($node_type) {

  $tv_show_nodes_query = new EntityFieldQuery();
  $tv_show_nodes_query->entityCondition('entity_type', 'node');
  $tv_show_nodes_query->entityCondition('bundle', $node_type);
  $tv_show_nodes_query->propertyCondition('status', 1);
  $tv_show_nodes_query->propertyOrderBy('title', 'ASC');
  $tv_show_nodes_result = $tv_show_nodes_query->execute();

  $tv_show_nodes = array();

  if (isset($tv_show_nodes_result['node'])) {
    foreach ($tv_show_nodes_result['node'] as $result) {
      $tv_show_nodes[ $result->nid ] = node_load($result->nid, $result->vid);
    }
  }

  return $tv_show_nodes;
}


/**
 * Helper for adding omniture settings form elements.
 */
function _usanetwork_ads_omniture_site_metric_form_elements($id, $display_id, &$parent_element, &$existing_values, $clean_empty_values = FALSE) {

  $parent_element['omniture'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="' . $id . '-omniture-values"><div style="font-weight: bold;">' . t('Omniture Variables') . '</div>',
    '#suffix' => '</div>',
  );

  // Clean up empty values to avoid duplicate empty form elements.
  if ($clean_empty_values) {
    foreach ($existing_values as $delta => $values) {
      if (!$values['key'] && !$values['value']) {
        unset($existing_values[ $delta ]);
      }
    }
    $existing_values = array_values($existing_values);
  }

  // Add a new empty set of fields.
  $existing_values[] = array('key' => '', 'value' => '');

  // Now add all of the elements.
  foreach ($existing_values as $delta => $values) {
    $parent_element['omniture'][ $delta ] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
    );
    $parent_element['omniture'][ $delta ]['key'] = array(
      '#type' => 'textfield',
      '#title' => t('Variable Name'),
      '#default_value' => $values['key'],
    );
    $parent_element['omniture'][ $delta ]['value'] = array(
      '#type' => 'textfield',
      '#title' => t('Value'),
      '#default_value' => $values['value'],
    );
  }

  // Add the "Add Another" button.
  $parent_element['add_omniture'] = array(
    '#type' => 'button',
    '#value' => t('Add A "!id" Variable', array('!id' => $display_id)),
    '#href' => '',
    '#ajax' => array(
      'callback' => '_usanetwork_ads_add_omniture_value',
      'wrapper' => $id . '-omniture-values',
    ),
  );
}


/**
 * Helper that adds "sect", "sub" and "sub2" form elements.
 */
function _usanetwork_ads_dart_site_metric_form_elements($fieldset_title, &$base_element, &$default_settings) {

  $base_element = array(
    '#type' => 'fieldset',
    '#title' => $fieldset_title,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $base_element['sect'] = array(
    '#type' => 'textfield',
    '#title' => t('"sect" value'),
    '#default_value' => isset($default_settings['sect']) ?
        $default_settings['sect'] : '',
    '#description' => t('Setting a "sect" value here will over-ride value set for any associated TV Show.'),
  );
  $base_element['sub'] = array(
    '#type' => 'textfield',
    '#title' => t('"sub" value'),
    '#default_value' => isset($default_settings['sub']) ?
        $default_settings['sub'] : '',
  );
  $base_element['sub2'] = array(
    '#type' => 'textfield',
    '#title' => t('"sub2" value'),
    '#default_value' => isset($default_settings['sub2']) ?
        $default_settings['sub2'] : '',
  );
}


/**
 * Helper that returns the ad/tracking settings form elements for the homepage.
 */
function _usanetwork_ads_adobe_tagloader_site_metric_form_elements(&$parent_element, &$form_state) {

  $default_settings = variable_get('usanetwork_ads_adobe_tagloader_settings', array());

  $parent_element['usanetwork_ads_adobe_tagloader_settings'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Adobe TagLoader Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $parent_element['usanetwork_ads_adobe_tagloader_settings']['tag_container_dc'] = array(
    '#type' => 'textfield',
    '#title' => t('"tagContainerDC" value'),
    '#default_value' => isset($default_settings['tag_container_dc']) ?
        $default_settings['tag_container_dc'] : '',
  );
  $parent_element['usanetwork_ads_adobe_tagloader_settings']['tag_container_namespace'] = array(
    '#type' => 'textfield',
    '#title' => t('"tagContainerNamespace" value'),
    '#default_value' => isset($default_settings['tag_container_namespace']) ?
        $default_settings['tag_container_namespace'] : '',
  );
  $parent_element['usanetwork_ads_adobe_tagloader_settings']['tag_container_name'] = array(
    '#type' => 'textfield',
    '#title' => t('"tagContainerName" value'),
    '#default_value' => isset($default_settings['tag_container_name']) ?
        $default_settings['tag_container_name'] : '',
  );
}


/**
 * Helper that returns the ad/tracking settings form elements for the homepage.
 */
function _usanetwork_ads_homepage_site_metric_form_elements(&$parent_element, &$form_state) {

  $parent_element['home'] = array();

  $default_settings = isset($form_state['storage']['default_settings']['home']) ?
      $form_state['storage']['default_settings']['home'] : array();
  _usanetwork_ads_dart_site_metric_form_elements(t('Homepage Settings'), $parent_element['home'], $default_settings);

  // Omniture unlimited value form.
  $form_state['storage']['default_settings']['home']['omniture'] = isset($form_state['storage']['default_settings']['home']['omniture']) ?
      $form_state['storage']['default_settings']['home']['omniture'] : array();
  _usanetwork_ads_omniture_site_metric_form_elements('homepage', t('Homepage'), $parent_element['home'],
      $form_state['storage']['default_settings']['home']['omniture'], $form_state['new_form']);
}

/**
 * Helper that returns the ad/tracking settings form elements for custom paths.
 */
function _usanetwork_ads_custom_path_site_metric_form_elements(&$parent_element, &$form_state) {

  $parent_element['path'] = array(
    '#type' => 'fieldset',
    '#title' => t('Path Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  foreach (_usanetwork_ads_get_usanetwork_menu_paths() as $path => $clean_path) {
    // Set the base form element for this path.
    $parent_element['path'][ $path ] = array();
    // Add DART form elements.
    $fieldset_title = t('Path:  %path', array('%path' => $clean_path));
    $default_settings = isset($form_state['storage']['default_settings']['path'][ $path ]) ?
        $form_state['storage']['default_settings']['path'][ $path ] : array();
    _usanetwork_ads_dart_site_metric_form_elements($fieldset_title, $parent_element['path'][ $path ], $default_settings);
    // "Is Sponsored" checkbox.
    $parent_element['path'][ $path ]['is_sponsored'] = array(
      '#type' => 'checkbox',
      '#title' => t('Is Sponsored'),
      '#default_value' => isset($form_state['storage']['default_settings']['path'][ $path ]['is_sponsored']) ?
          $form_state['storage']['default_settings']['path'][ $path ]['is_sponsored'] : FALSE,
      '#weight' => -10,
    );
    // Omniture unlimited value form.
    $id_clean_path = preg_replace('|[^a-zA-Z0-9]+|', '-', $path);
    $id = 'custom-path-' . strtolower($id_clean_path);
    $display_id = t('@path', array('@path' => $clean_path));
    $form_state['storage']['default_settings']['path'][ $path ]['omniture'] = isset($form_state['storage']['default_settings']['path'][ $path ]['omniture']) ?
        $form_state['storage']['default_settings']['path'][ $path ]['omniture'] : array();
    _usanetwork_ads_omniture_site_metric_form_elements($id, $display_id, $parent_element['path'][ $path ],
        $form_state['storage']['default_settings']['path'][ $path ]['omniture'], $form_state['new_form']);
  }
}


/**
 * Form definition / page callback for ad settings admin page.
 */
function _usanetwork_ads_site_metric_settings_form($form, $form_state) {

  $form = array();
  $default_settings = variable_get('usanetwork_ads_site_metric_settings', array());
  $form_state['storage']['default_settings'] = isset($form_state['storage']['default_settings']) ?
      $form_state['storage']['default_settings'] : $default_settings;
  $form_state['new_form'] = isset($form_state['new_form']) ? FALSE : TRUE;

  // Adobe tag loader settings.
  _usanetwork_ads_adobe_tagloader_site_metric_form_elements($form, $form_state);

  // Set the base form element for the dart and omniture settings.
  $form['usanetwork_ads_site_metric_settings'] = array(
    '#tree' => TRUE,
  );

  // Homepage settings.
  _usanetwork_ads_homepage_site_metric_form_elements($form['usanetwork_ads_site_metric_settings'], $form_state);

  // Path based settings.
  _usanetwork_ads_custom_path_site_metric_form_elements($form['usanetwork_ads_site_metric_settings'], $form_state);

  $form = system_settings_form($form);
  array_unshift($form['#submit'], 'usanetwork_ads_site_metric_settings_form_submit');

  return $form;
}

/**
 * Submit callback
 */
function usanetwork_ads_site_metric_settings_form_submit($form, &$form_state) {
  if (isset($form_state['values']['usanetwork_ads_site_metric_settings'])) {
    $settings = variable_get('usanetwork_ads_site_metric_settings', array());
    $form_state['values']['usanetwork_ads_site_metric_settings']['node'] = $settings['node'];
  }
}

/**
 * AJAX callback for adding omniture key|value pairs.
 */
function _usanetwork_ads_add_omniture_value($form, $form_state) {

  // Ge the form element of the button that was clicked.
  $clicked_button_parents = $form_state['triggering_element']['#parents'];
  array_pop($clicked_button_parents);
  $container = $form[ array_shift($clicked_button_parents) ];
  foreach ($clicked_button_parents as $element) {
    $container = $container[ $element ];
  }
  $container = $container['omniture'];

  // Clean empty sets beyond the first.
  $skipped_first_empty_set = FALSE;
  foreach (element_children($container) as $delta) {
    if (!$container[ $delta ]['key']['#value'] && !$container[ $delta ]['value']['#value']) {
      if (!$skipped_first_empty_set) {
        $skipped_first_empty_set = TRUE;
        continue;
      }
      unset($container[ $delta ]);
    }
  }

  return $container;
}


/**
 * Implements hook_admin_paths().
 */
function usanetwork_ads_admin_paths() {

  $paths = array();
  $paths['admin/usanetwork-ads/dart-settings'] = TRUE;

  return $paths;
}


/**
 * Helper that returns DART ad settings for a given node.
 * @todo Add content type defaults
 */
function _usanetwork_ads_get_node_dart_settings($node) {
  $node_settings = _usanetwork_ads_node_settings($node);
  $node_dart_settings = array('sect' => NULL, 'sub' => NULL, 'sub2' => NULL);
  $tv_show_nid = _usanetwork_ads_get_node_tv_show($node);

  if (isset($node->page_collection_parent)) {
    // node has page collection parent
    $node_dart_settings = _usanetwork_ads_get_node_dart_settings($node->page_collection_parent);
  }
  else {
    // load content type defaults
    $type_settings = _usanetwork_ads_content_type_settings($node->type);
    foreach (array_keys($node_dart_settings) as $key) {
      if (isset($type_settings[$key])) {
        $node_dart_settings[$key] = $type_settings[$key];
      }
    }

    // node has show parent
    if ($tv_show_nid && $node->type != 'tv_show') {
      $show_settins = _usanetwork_ads_get_node_dart_settings(node_load($tv_show_nid));
      if (!empty($show_settins['sect'])) {
        $node_dart_settings['sect'] = $show_settins['sect'];
      }
    }
  }

  // Node uses default settings
  if (empty($node_settings) || $node_settings['default']) {
    return $node_dart_settings;
  }

  // override parent settings
  foreach(array_keys($node_dart_settings) as $variable) {
    if (!empty($node_settings[$variable])) {
      $node_dart_settings[$variable] = $node_settings[$variable];
    }
  }

  return $node_dart_settings;
}

/**
 * Helper that returns refresh settings for a given node.
 */
function _usanetwork_ads_get_node_refresh_settings($node) {
  $node_refresh_settings = array('isAutomaticRefresh' => NULL, 'refreshTime' => NULL);

  $node_refresh_settings['isAutomaticRefresh'] = !empty($node->field_automatic_refresh[$node->language]['0']['value']) ?
    $node->field_automatic_refresh[$node->language]['0']['value'] : '0';
  $node_refresh_settings['refreshTime'] = !empty($node->field_refresh_time[$node->language]['0']['value']) ?
    $node->field_refresh_time[$node->language]['0']['value'] : '';

  return $node_refresh_settings;
}

/**
 * Helper that determines if a node is sponsored.
 */
function _usanetwork_ads_is_node_sponsored($node) {
  $node_settings = _usanetwork_ads_node_settings($node);
  $node_is_sponsored = FALSE;
  $tv_show_nid = _usanetwork_ads_get_node_tv_show($node);

  if (empty($node_settings)
    || $node_settings['default']
    || !isset($node_settings['is_sponsored'])
    || $node_settings['is_sponsored'] == -1
  ) {
    if (isset($node->page_collection_parent)) {
      // node has page collection parent
      $node_is_sponsored = _usanetwork_ads_is_node_sponsored($node->page_collection_parent);
    }
    elseif ($tv_show_nid && $node->type != 'tv_show') {
      // node has tv show parent
      $node_is_sponsored = _usanetwork_ads_is_node_sponsored(node_load($tv_show_nid));
    }
  }
  else {
    $node_is_sponsored = $node_settings['is_sponsored'];
  }

  return (bool)$node_is_sponsored;
}


/**
 * Helper that determines if a node is sponsored.
 */
function _usanetwork_ads_is_path_sponsored($path) {

  $current_menu_item = menu_get_item();
  $site_metric_settings = variable_get('usanetwork_ads_site_metric_settings', array());

  $path_is_sponsored = isset($site_metric_settings['path'][ $current_menu_item['path'] ]['is_sponsored']) ?
      $site_metric_settings['path'][ $current_menu_item['path'] ]['is_sponsored'] : FALSE;

  return (bool)$path_is_sponsored;
}


/**
 * Helper that returns whether or not a page is sponsored given a page variables array.
 */
function _usanetwork_ads_is_page_sponsored($page_variables = array()) {

  $page_is_sponsored = FALSE;
  $current_menu_item = menu_get_item();
  $current_menu_item_path = $current_menu_item['path'];
  $current_menu_object = menu_get_object();

  // Node page based settings.
  if (isset($page_variables['node']) && is_object($page_variables['node']) && isset($page_variables['node']->nid)) {
    $page_is_sponsored = _usanetwork_ads_is_node_sponsored($page_variables['node']);
  }
  else if ($current_menu_item_path == 'node/%' &&
      is_object($current_menu_object) && isset($current_menu_object->nid)) {
    $page_is_sponsored = _usanetwork_ads_is_node_sponsored($current_menu_object);
  }
  // Path based settings.
  else {
    $page_is_sponsored = _usanetwork_ads_is_path_sponsored($current_menu_item_path);
  }

  return (bool)$page_is_sponsored;
}


/**
 * Implements hook_preprocess_page().
 */
function usanetwork_ads_preprocess_page(&$variables) {

  // Define DART ad settings via Drupal JS settings.
  $usa_dart_js_settings = array();
  $usa_dart_js_settings['USA']['DART']['values'] = array('sect' => NULL, 'sub' => NULL, 'sub2' => NULL);
  $site_metric_settings = variable_get('usanetwork_ads_site_metric_settings', array());
  $current_menu_item = menu_get_item();
  $current_menu_item_path = $current_menu_item['path'];
  $current_menu_object = menu_get_object();

  // Homepage specific settings.
  $current_menu_item = menu_get_item();
  $current_menu_object = menu_get_object();
  if (drupal_is_front_page()) {
    $usa_dart_js_settings['USA']['DART']['values']['sect'] = !empty($site_metric_settings['home']['sect']) ?
      $site_metric_settings['home']['sect'] : 'home';
    $usa_dart_js_settings['USA']['DART']['values']['sub'] = !empty($site_metric_settings['home']['sub']) ?
      $site_metric_settings['home']['sub'] : '';
    $usa_dart_js_settings['USA']['DART']['values']['sub2'] = !empty($site_metric_settings['home']['sub2']) ?
      $site_metric_settings['home']['sub2'] : '';
  }
  // Node page based settings.
  else if ($current_menu_item_path == 'node/%' &&
      is_object($current_menu_object) && isset($current_menu_object->nid)) {
    $usa_dart_js_settings['USA']['DART']['values'] = _usanetwork_ads_get_node_dart_settings($current_menu_object);
    $usa_dart_js_settings['USA']['refreshSettings'] = _usanetwork_ads_get_node_refresh_settings($current_menu_object);
  }
  // Path based settings.
  else {
    // If there is a node in $variables, get these values first.  Then over-ride
    // with the path specific values.
    if (isset($variables['node'])) {
      $usa_dart_js_settings['USA']['DART']['values'] = _usanetwork_ads_get_node_dart_settings($variables['node']);
      $usa_dart_js_settings['USA']['refreshSettings'] = _usanetwork_ads_get_node_refresh_settings($variables['node']);
    }

    // Match current path to how it is made available by the custom modules.
    $current_menu_item_path = str_replace('node/%/', 'node/%node/', $current_menu_item_path);

    $usa_dart_js_settings['USA']['DART']['values']['sect'] = !empty($site_metric_settings['path'][ $current_menu_item_path ]['sect']) ?
      $site_metric_settings['path'][ $current_menu_item_path ]['sect'] : $usa_dart_js_settings['USA']['DART']['values']['sect'];
    $usa_dart_js_settings['USA']['DART']['values']['sub'] = !empty($site_metric_settings['path'][ $current_menu_item_path ]['sub']) ?
      $site_metric_settings['path'][ $current_menu_item_path ]['sub'] : $usa_dart_js_settings['USA']['DART']['values']['sub'];
    $usa_dart_js_settings['USA']['DART']['values']['sub2'] = !empty($site_metric_settings['path'][ $current_menu_item_path ]['sub2']) ?
      $site_metric_settings['path'][ $current_menu_item_path ]['sub2'] : $usa_dart_js_settings['USA']['DART']['values']['sub2'];
  }

  // Ensure DART JS settings values.
  $usa_dart_js_settings['USA']['DART']['values']['sect'] = !empty($usa_dart_js_settings['USA']['DART']['values']['sect']) ?
      $usa_dart_js_settings['USA']['DART']['values']['sect'] : 'other';
  $usa_dart_js_settings['USA']['DART']['values']['sub'] = !empty($usa_dart_js_settings['USA']['DART']['values']['sub']) ?
      $usa_dart_js_settings['USA']['DART']['values']['sub'] : '';
  $usa_dart_js_settings['USA']['DART']['values']['sub2'] = !empty($usa_dart_js_settings['USA']['DART']['values']['sub2']) ?
      $usa_dart_js_settings['USA']['DART']['values']['sub2'] : '';

  // Set "is_sponsored" variable.
  $usa_dart_js_settings['USA']['DART']['is_sponsored'] = _usanetwork_ads_is_page_sponsored($variables);

  // Add Adobe TagLoader variables and script.
  $adobe_tagloader_settings = variable_get('usanetwork_ads_adobe_tagloader_settings', array());
  $usa_dart_js_settings['USA']['adobeTagLoader']['tagContainerDC'] = !empty($adobe_tagloader_settings['tag_container_dc']) ?
      $adobe_tagloader_settings['tag_container_dc'] : '';
  $usa_dart_js_settings['USA']['adobeTagLoader']['tagContainerNamespace'] = !empty($adobe_tagloader_settings['tag_container_namespace']) ?
      $adobe_tagloader_settings['tag_container_namespace'] : '';
  $usa_dart_js_settings['USA']['adobeTagLoader']['tagContainerName'] = !empty($adobe_tagloader_settings['tag_container_name']) ?
      $adobe_tagloader_settings['tag_container_name'] : '';
  #drupal_add_js(drupal_get_path('module', 'usanetwork_ads') . '/js/usanetwork_ads.s_code.js', array('scope' => 'footer', 'preprocess' => FALSE));

	// Set the JS device detection code
	drupal_add_js(drupal_get_path('module', 'usanetwork_ads') . '/js/device-detect.js', array('type' => 'file', 'scope' => 'header', 'every_page' => true, 'preprocess' => true));

  // Set the JS settings for ads.
  drupal_add_js($usa_dart_js_settings, 'setting');
}


/**
 * Implements form_sitecatalyst_admin_settings_alter().
 */
function usanetwork_ads_form_sitecatalyst_admin_settings_alter(&$form, &$form_state) {

  $form['general']['sitecatalyst_js_file_location']['#description'] =
      t('USANETWORK NOTE: This is the path to the custom version of this file that exists in the usanetwork_ads directory.');
}


/**
 * Helper tha returns omniture variables given an array of omniture settings.
 */
function _usanetwork_ads_get_omniture_variables($omniture_settings) {

  if (!is_array($omniture_settings)) {
    return array();
  }

  $omniture_variables = array();

  foreach ($omniture_settings as $delta => $setting) {
    $key = trim(check_plain($setting['key']));
    $value = trim(check_plain($setting['value']));
    if ($key && $value) {
      $omniture_variables[ $key ] = $value;
    }
  }

  return $omniture_variables;
}


/**
 * Helper that returns omniture variables for a given node.
 */
function _usanetwork_ads_get_node_omniture_variables($node) {
  $node_settings = _usanetwork_ads_node_settings($node);
  $node_omniture_variables = array();
  $variables = array();

  // Omniture disabled
  if (isset($node_settings['omniture']['disable']) && $node_settings['omniture']['disable']) {
    return false;
  }

  $tv_show_nid = _usanetwork_ads_get_node_tv_show($node);

  // node has tv show parent
  if ($tv_show_nid && $node->type != 'tv_show') {
    $variables[] = _usanetwork_ads_get_node_omniture_variables(node_load($tv_show_nid));
  }

  // load content type defaults
  $type_settings = _usanetwork_ads_content_type_settings($node->type);
  $variables[] = _usanetwork_ads_get_omniture_variables(isset($type_settings['omniture']['variables']) ? $type_settings['omniture']['variables'] : array());

  // node has page collection parent
  if (isset($node->page_collection_parent)) {
    $variables[] = _usanetwork_ads_get_node_omniture_variables($node->page_collection_parent);
  }

  if (!empty($node_settings) && !$node_settings['default']) {
    // override parent settings
    $variables[] = _usanetwork_ads_get_omniture_variables($node_settings['omniture']['variables']);
  }

  // merge variables
  foreach ($variables as $set) {
    foreach ($set as $key => $value) {
      $node_omniture_variables[$key] = $value;
    }
  }

  return $node_omniture_variables;
}


/**
 * Implements hook_sitecatalyst_variables().
 */
function usanetwork_ads_sitecatalyst_variables($page_variables) {

  $omniture_variables = array();
  $site_metric_settings = variable_get('usanetwork_ads_site_metric_settings', array());
  $current_menu_item = menu_get_item();
  $current_menu_item_path = $current_menu_item['path'];
  $current_menu_object = menu_get_object();

  // Homepage specific settings.
  if (drupal_is_front_page()) {
    $omniture_settings = isset($site_metric_settings['home']['omniture']) ?
        $site_metric_settings['home']['omniture'] : array();
    $omniture_variables = _usanetwork_ads_get_omniture_variables($omniture_settings);
  }
  // Node page based settings.
  else if ($current_menu_item_path == 'node/%' &&
      is_object($current_menu_object) && isset($current_menu_object->nid)) {
    $omniture_variables = _usanetwork_ads_get_node_omniture_variables($current_menu_object);
  }
  // Path based settings.
  else {
    // If there is a node in $variables, get these values first.  Then over-ride
    // with the path specific values.
    if (is_object($current_menu_object) && isset($current_menu_object->nid)) {
      $omniture_variables = _usanetwork_ads_get_node_omniture_variables($current_menu_object);
    }
    // Match current path to how it is made available by the custom modules.
    $current_menu_item_path = str_replace('node/%/', 'node/%node/', $current_menu_item_path);
    // Now over-ride node omniture variables with path variables.
    $path_omniture_settings = isset($site_metric_settings['path'][ $current_menu_item_path ]['omniture']) ?
        $site_metric_settings['path'][ $current_menu_item_path ]['omniture'] : array();
    $path_omniture_variables = _usanetwork_ads_get_omniture_variables($path_omniture_settings);
    $omniture_variables = $path_omniture_variables + $omniture_variables;
  }

  if ($omniture_variables) {
    return array('variables' => $omniture_variables);
  }
  else {
    return array();
  }
}

/**
 * Block callback for the dart floodlight show homepages block
 */
function usanetwork_ads_dart_floodlight() {
  $output = array();
  $flood_type = '';
  $flood_cat = '';
  $node = menu_get_object();

  // array of show paths with floodlight settings
  // not all shows have these
  $flooded_shows = array (
    'burnnotice' => array (
      'flood_type' => 'burnn832',
      'flood_cat' => 'burnn655',
    ),
    'covertaffairs' => array (
      'flood_type' => '2010a975',
      'flood_cat' => 'cover674',
    ),
    'graceland' => array (
      'flood_type' => '2012g832',
      'flood_cat' => 'grace041',
    ),
    'house' => array (
      'flood_type' => '2009o386',
      'flood_cat' => 'house033',
    ),
    'svu' => array (
      'flood_type' => '2011d848',
      'flood_cat' => 'losvu379',
    ),
    'modernfamily' => array (
      'flood_type' => '2013i356',
      'flood_cat' => 'moder594',
    ),
    'ncis' => array (
      'flood_type' => '2009o386',
      'flood_cat' => 'ncisv947',
    ),
    'necessaryroughness' => array (
      'flood_type' => '2011d848',
      'flood_cat' => 'neces763',
    ),
    'psych' => array (
      'flood_type' => '2011d848',
      'flood_cat' => 'psych222',
    ),
    'royalpains' => array (
      'flood_type' => '2009o386',
      'flood_cat' => 'royal068',
    ),
    'suits' => array (
      'flood_type' => '2011d848',
      'flood_cat' => 'suits889',
    ),
    'summercamp' => array (
      'flood_type' => '2012g832',
      'flood_cat' => 'summe869',
    ),
    'whitecollar' => array (
      'flood_type' => '2009o386',
      'flood_cat' => 'white368',
    ),
    'wwe' => array (
      'flood_type' => 'wwera869',
      'flood_cat' => 'wwera436',
    ),
  );

  // see if we are on a tv show node landing page
  if ($node && $node->type == 'tv_show' && arg(2) == '') {
    $custompath = drupal_get_path_alias('node/'.$node->nid);
    $path_parts = explode('/', $custompath);

    // if the show is not in our array
    // do not render this block
    if (!isset($flooded_shows[$path_parts['0']])) {
      return;
    }

    $show = $flooded_shows[$path_parts['0']];


    // code for the block
    $floodlight_js = '
    (function ($) {
      $(document).ready(function(){
      var axel = Math.random() + "";
      var a = axel * 10000000000000;
      $(\'body\').append(\'<iframe src="http://1445917.fls.doubleclick.net/activityi;src=1445917;type=' . $show['flood_type'] . ';cat=' . $show['flood_cat'] . ';ord=\' + a + \'?" width="1" height="1" frameborder="0" style="display:none"></iframe>\');
      });
    })(jQuery);
    ';
    drupal_add_js($floodlight_js, 'inline');
    $output[] = '<noscript>';
    $output[] = '<iframe src="http://1445917.fls.doubleclick.net/activityi;src=1445917;type=' . $show['flood_type'] . ';cat=' . $show['flood_cat'] . ';ord=1?" width="1" height="1" frameborder="0" style="display:none"></iframe>';
    $output[] = '</noscript>';

  }
  // exit if not a show landing
  else {
    return;
  }

  return implode("\n", $output);
}

/**
 * Implements template_preprocess_node().
 */
function usanetwork_ads_preprocess_node(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $node = $variables['node'];

  $types = array('usanetwork_aspot', 'usanetwork_promo');
  if (in_array($node->type, $types)) {
    $variables['attributes_array']['omniture-title'] = trim($node->title);
    $variables['attributes_array']['omniture-nid'] = $node->nid;
    $variables['attributes_array']['omniture-vid'] = $node->vid;
  }
}
