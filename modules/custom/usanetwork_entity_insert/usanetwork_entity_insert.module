<?php

define('USANETWORK_ENTITY_INSERT_CONFIG_NAMESPACE', 'usanetwork_entity_insert_');

/**
 * Implements hook_permission().
 */
function usanetwork_entity_insert_permission() {
  return array(
    'select view mode' => array(
      'title' => t('Select view mode'),
      'description' => t('Select view mode to display embedded entity'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function usanetwork_entity_insert_menu() {
  $items = array();
  $items['usanetwork_entity_insert/insert/%'] = array(
    'title' => 'Insert inline entity',
    'page callback' => 'usanetwork_entity_insert_dialog',
    'page arguments' => array(2),
    'access arguments' => array('administer nodes'),
    'delivery callback' => 'usanetwork_entity_insert_delivery',
    'file' => 'usanetwork_entity_insert.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['usanetwork_entity_insert/insert/%/autocomplete'] = array(
    'title' => 'Select content',
    'page callback' => 'usanetwork_entity_insert_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('administer nodes'),
    'delivery callback' => 'drupal_deliver_html_page',
    'file' => 'usanetwork_entity_insert.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/usanetwork_entity_insert'] = array(
    'title' => 'Entity insert',
    'description' => 'Manage entity types, bundles and view modes for inline inserting with WYSIWYG.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_entity_insert_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'usanetwork_entity_insert.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function usanetwork_entity_insert_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $entity_type => $info) {
    $entity_info[$entity_type]['view modes']['inline_content'] = array(
      'label' => t('Inline content'),
      'custom settings' => TRUE,
    );
  }
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function usanetwork_entity_insert_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return $type;
  }
}

/**
 * Implements hook_token_info()
 *
 * Adds a custom token to render a full entity using a display mode.
 */
function usanetwork_entity_insert_token_info() {
  $items = array();
  $items['types'] = array(
    'usa_embed' => array(
      'name' => t('USA embed content'),
      'description' => t('Inserts a fully rendered content using a view mode.'),
    )
  );
  $items['tokens'] = array(
    'usa_embed' => array(),
  );

  foreach (_usanetwork_entity_insert_types() as $type => $info) {
    $items['tokens']['usa_embed'][$type] = array(
      'name' => $info['name'],
      'description' => $info['description'],
    );
  }

  return $items;
}

/**
 * Implements hook_tokens().
 */
function usanetwork_entity_insert_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'usa_embed') {
    foreach ($tokens as $name => $original) {
      $content = '';
      $parts = explode(':', preg_replace('/(\[|\])/', '', $original));
      list(, $name, $entity_type, $entity_id, $view_mode) = $parts;
      if (in_array($name, array_keys(_usanetwork_entity_insert_types()))) {
        $enabled = _usanetwork_entity_insert_enabled_entities($name);
        $view_mode = $view_mode ? $view_mode : _usanetwork_entity_insert_default_view_mode($name);
        if (in_array($entity_type, array_keys($enabled)) && in_array($view_mode, array_keys(_usanetwork_entity_insert_view_modes($name)))) {
          $entity = entity_load_single($entity_type, $entity_id);
          if ($entity) {
            $rendered_entity = entity_view($entity_type, array($entity), $view_mode);
            if ($rendered_entity) {
              $content = drupal_render($rendered_entity);
            }
          }
        }
      }

      $replacements[$original] = $content;
    }
  }

  return $replacements;
}

/**
 * Implements hook_preprocess_node().
 */
function usanetwork_entity_insert_preprocess_node(&$vars) {
  $vars['content'][] = array(
    '#markup' => 'test'
  );
}

/**
 * Delivery callback for dialog.
 */
function usanetwork_entity_insert_delivery($page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print drupal_json_encode($page_callback_result);

  // Perform end-of-request tasks.
  ajax_footer();
}

/**
 * Returns suggestions for content titles.
 */
function _usanetwork_entity_insert_suggestions($type, $title = '') {
  $enabled_entities = _usanetwork_entity_insert_enabled_entities($type);
  $suggestions = array();
  foreach ($enabled_entities as $entity_type => $bundles) {
    // settings for entityrefference selection handler
    $settings = array(
      'settings' => array(
        'handler' => 'base',
        'target_type' => $entity_type,
        'handler_settings' => array(
          'target_bundles' => $bundles,
        ),
      ),
    );
    $handler = entityreference_get_selection_handler($settings);
    $entity_labels = $handler->getReferencableEntities($title, 'CONTAINS', 10);
    $entity_info = entity_get_info($entity_type);

    // Loop through the products and convert them into autocomplete output.
    foreach ($entity_labels as $bundle => $values) {
      foreach ($values as $entity_id => $label) {
        $key = "$label [$entity_type:$entity_id]";
        // Strip things like starting/trailing white spaces, line breaks and tags.
        $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
        // Names containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
          $key = '"' . str_replace('"', '""', $key) . '"';
        }
        if (isset($entity_info['bundles'][$bundle]['label'])) {
          $label = $entity_info['bundles'][$bundle]['label'] . ': ' . $label;
        }
        $suggestions[$key] = $entity_info['label'] . ': ' .  $label;
      }
    }
  }

  return array_slice($suggestions, 0, 10);
}

/**
 * Returns list of plugin types.
 */
function _usanetwork_entity_insert_types() {
  return array(
    'video' => array(
      'name' => t('Video'),
      'description' => t('Rendered video'),
    ),
    'gallery' => array(
      'name' => t('Media gallery'),
      'description' => t('Rendered media gallery')
    )
  );
}

/**
 * Return renderable entities.
 */
function _usanetwork_entity_insert_renderable_entities() {
  $entities = array(
    'node',
    'file',
    'user',
  );
  drupal_alter('usanetwork_entity_insert_renderable', $entities);

  return $entities;
}

/**
 * Returns entity types/bundles for plugin type.
 */
function _usanetwork_entity_insert_enabled_entities($type) {
  $result = variable_get(USANETWORK_ENTITY_INSERT_CONFIG_NAMESPACE . $type . '_enabled', array());
  return $result;
}

/**
 * Returns enabled view modes for plugin type.
 */
function _usanetwork_entity_insert_view_modes($type) {
  $view_modes = variable_get(USANETWORK_ENTITY_INSERT_CONFIG_NAMESPACE . $type . '_view_modes', array());
  $entity_info = entity_get_info();
  foreach (_usanetwork_entity_insert_enabled_entities($type) as $entity_type => $bundles) {
    foreach ($view_modes as $view_mode => $name) {
      if (isset($entity_info[$entity_type]['view modes'][$view_mode])) {
        $view_modes[$view_mode] = $entity_info[$entity_type]['view modes'][$view_mode]['label'];
      }
    }
  }
  if (isset($view_modes['full'])) {
    $view_modes['full'] = t('Full content');
  }
  return $view_modes;
}

/**
 * Return default view mode for plugin type.
 */
function _usanetwork_entity_insert_default_view_mode($type) {
  $view_mode = variable_get(USANETWORK_ENTITY_INSERT_CONFIG_NAMESPACE . $type . '_default_view_mode', '');
  return $view_mode;
}
