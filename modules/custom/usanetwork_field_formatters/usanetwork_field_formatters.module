<?php

/**
 * Implements hook_field_formatter_info().
 */
function usanetwork_field_formatters_field_formatter_info() {

  // Below is the list of all the custom formatters we have in system
  $custom_formatters['raw_formatter'] = array(
    'label' => t('Raw Formatter'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting raw html markup inserted in a long text/plain text field.'),
  );
  $custom_formatters['custom_css'] = array(
    'label' => t('Custom CSS'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting custom css inserted in a long text/plain text field.'),
  );
  $custom_formatters['custom_js'] = array(
    'label' => t('Custom JS'),
    'field types' => array('text_long'), //This will only be available to long text fields
    'description' => t('This formatter should be used for outputting custom js inserted in a long text/plain text field.'),
  );

  return $custom_formatters;
}

/**
 * Implements hook_field_formatter_view().
 *
 * $entity_type     The type of $entity.
 * $entity          The entity being displayed.
 * $field           The field structure.
 * $instance        The field instance.
 * $langcode        The language associated with $items.
 * $items           Array of values for this field.
 * $display         The display settings to use, as found in the "display" entry of instance definitions.
                    The array notably contains the following keys and values;
    * type:     The name of the formatter to use.
    * settings: The array of formatter settings.
 */
function usanetwork_field_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    // raw field data
    case 'raw_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'raw_formatter', 
          '#data' => $item['value'], 
        );
      }
      break;
    // css field data
    case 'custom_css':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#data' => drupal_add_css(
            $item['value'], 
            array(
              'group' => CSS_THEME,
              'type' => 'inline',
              'media' => 'screen',
              'preprocess' => FALSE,
              'weight' => '9999',
            )),
        );
      }
      break;
    // js field data
    case 'custom_js':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
        '#data' => drupal_add_js($item['value'], array('type' => 'inline', 'scope' => 'header', 'preprocess' => FALSE)),
        );
      }
      break;
  }

  return $element;
}

/**
* Implements hook_theme().
*/
function usanetwork_field_formatters_theme() {
  $items = array();
  
  $items['raw_formatter'] = array(
    'template'  => 'templates/raw-formatter',
    'variables' => array('data' => ''),
  );
  return $items;
}

/**
 * Implements hook_element_info_alter().
 *
 * Adds our wrapper function to the processing of media fields on forms.
 */
function usanetwork_field_formatters_element_info_alter(&$type) {
  if (isset($type['media'])) {
    $type['media']['#process'][] = 'usanetwork_field_formatters_element_process';
  }
}

/**
 * #process callback for the media form element.
 *
 * Display files added to Catchall-Page & Snipe node forms as links to the public URI of
 * the file next to the image thumbnail
 */
function usanetwork_field_formatters_element_process(&$element, &$form_state, $form) {
  if (isset($element['#file']) && (strpos($form['#id'], 'catchall-page-node-form') === 0 || strpos($form['#id'], 'snipe-node-form') === 0)) {
    $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
    $file = $fid ? file_load($fid) : FALSE;
    if (isset($file->uri)) {
      $element['filename']['#markup'] = '<div style="float: left">' . t('Uploaded File URL: ') . file_create_url($file->uri) . '</div>';
      $element['filename']['#weight'] = 101;
    }
  }

  return $element;
}
