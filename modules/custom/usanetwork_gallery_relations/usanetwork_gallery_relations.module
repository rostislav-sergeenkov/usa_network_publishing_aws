<?php
/**
 * @file
 * Code for the USA Network gallery relationships back to show/season/episode, yo.
 */

/**
  * Implements hook_form_FORM_ID_alter
  * this is a straight rip from pub_tv with the addition of the episode field and lookup
  */
function usanetwork_gallery_relations_form_media_gallery_node_form_alter(&$form, &$form_state) {

  $form['#attached']['css'][] = drupal_get_path('module', 'usanetwork_gallery_relations') . '/usanetwork-gallery-relations.css';

  // Add AJAX handling to the the show field so that users only see seasons for
  // the selected show.
  $form['field_show'][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'usanetwork_gallery_relations_season_option_populate_js',
    'wrapper' => 'season-wrapper',
    'effect' => 'fade',
  );
  $form['field_show'][LANGUAGE_NONE]['#prefix'] = '<div id="show-wrapper">';
  $form['field_show'][LANGUAGE_NONE]['#suffix'] = '</div>';

  // Hide the seasons field until the user has selected a show.
  $form['field_season'][LANGUAGE_NONE]['#states'] = array(
    'disabled' => array(
      ':input[name="field_show[' . LANGUAGE_NONE . ']"]' => array(
        'value' => '_none',
      ),
    ),
  );

  // Add AJAX handling to the the season field so that users only see episodes for
  // the selected season.
  $form['field_season'][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'usanetwork_gallery_relations_episode_option_populate_js',
    'wrapper' => 'episode-wrapper',
    'effect' => 'fade',
  );

  // Hide the seasons field until the user has selected a show.
  $form['field_episode'][LANGUAGE_NONE]['#states'] = array(
    'disabled' => array(
      ':input[name="field_season[' . LANGUAGE_NONE . ']"]' => array(
        'value' => '_none',
      ),
    ),
  );

  $form['field_season'][LANGUAGE_NONE]['#description'] = t('You must select a TV Show before selecting a season.');
  $form['field_season'][LANGUAGE_NONE]['#prefix'] = '<div id="season-wrapper">';
  $form['field_season'][LANGUAGE_NONE]['#suffix'] = '</div>';

  // Hide the episode field until the user has selected a show.
  $form['field_episode'][LANGUAGE_NONE]['#states'] = array(
    'disabled' => array(
      ':input[name="field_show[' . LANGUAGE_NONE . ']"]' => array(
        'value' => '_none',
      ),
    ),
  );

  $form['field_episode'][LANGUAGE_NONE]['#description'] = t('You must select a TV season before selecting an episode.');
  $form['field_episode'][LANGUAGE_NONE]['#prefix'] = '<div id="episode-wrapper">';
  $form['field_episode'][LANGUAGE_NONE]['#suffix'] = '</div>';

  // Check if a value for show has already been provided.
  $selected_show = '';
  if (isset($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (isset($form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'])) {
    $selected_show = $form_state['node']->field_show[LANGUAGE_NONE][0]['target_id'];
  }

  // If a value for show has already been provided, reset the form accordingly.
  if (!empty($selected_show)) {
    // Get the list of seasons based on the user-entered show value.
    $query = new EntityFieldQuery('entity_type', 'node');
    $query->entityCondition('bundle', 'tv_season');
    $query->fieldCondition('field_show', 'target_id', $selected_show);
    $result = $query->execute();

    // If the first element of the options aray is "- Select -" (et. al.) then
    // add it to the beginning of our new options array.
    $keys = array_keys($form['field_season'][LANGUAGE_NONE]['#options']);
    if (!is_null($keys[0]) && !is_numeric($keys[0])) {
      $options = array_slice($form['field_season'][LANGUAGE_NONE]['#options'], 0, 1);
    }
    else {
      $options = array();
    }

    // Add each season that belongs to the user-selected show to the options
    // array.
    if (isset($result['node'])) {
      $news_items_nids = array_keys($result['node']);
      $nodes = entity_load('node', $news_items_nids);
      foreach ($nodes as $node) {
        $options[$node->nid] = check_plain($node->title);
      }
    }
    else {
      drupal_set_message(t('There are no seasons associated with the show you selected. Please !url first.', array('!url' => l(t('create a season'), 'node/add/tv-season'))), 'error');
      watchdog('pub_tv', 'While creating an episode, a user chose a season that does not belong to the selected show.', array(), WATCHDOG_WARNING);
    }
    $form['field_season'][LANGUAGE_NONE]['#description'] = '';
    $form['field_season'][LANGUAGE_NONE]['#options'] = $options;
  }
  
  // Check if a value for season has already been provided.
  $selected_season = '';
  if (isset($form_state['values']['field_season'][LANGUAGE_NONE][0]['target_id'])) {
    $selected_season = $form_state['values']['field_season'][LANGUAGE_NONE][0]['target_id'];
  }
  elseif (isset($form_state['node']->field_season[LANGUAGE_NONE][0]['target_id'])) {
    $selected_season = $form_state['node']->field_season[LANGUAGE_NONE][0]['target_id'];
  }

  // If a value for season has already been provided, reset the form accordingly.
  if (!empty($selected_season)) {
    // Get the list of seasons based on the user-entered show value.
    $query = new EntityFieldQuery('entity_type', 'node');
    $query->entityCondition('bundle', 'tv_episode');
    $query->fieldCondition('field_season', 'target_id', $selected_season);
    $result = $query->execute();

    // If the first element of the options aray is "- Select -" (et. al.) then
    // add it to the beginning of our new options array.
    $keys = array_keys($form['field_episode'][LANGUAGE_NONE]['#options']);
    if (!is_null($keys[0]) && !is_numeric($keys[0])) {
      $options = array_slice($form['field_episode'][LANGUAGE_NONE]['#options'], 0, 1);
    }
    else {
      $options = array();
    }

    // Add each season that belongs to the user-selected show to the options
    // array.
    if (isset($result['node'])) {
      $news_items_nids = array_keys($result['node']);
      $nodes = entity_load('node', $news_items_nids);
      foreach ($nodes as $node) {
        $options[$node->nid] = check_plain($node->title);
      }
    }
    else {
      drupal_set_message(t('There are no episodes associated with the season you selected. Please !url first.', array('!url' => l(t('create an episode'), 'node/add/tv-episode'))), 'error');
      watchdog('pub_tv', 'While creating an episode, a user chose a season that does not belong to the selected show.', array(), WATCHDOG_WARNING);
    }
    $form['field_episode'][LANGUAGE_NONE]['#description'] = '';
    $form['field_episode'][LANGUAGE_NONE]['#options'] = $options;
  }  

  // If a user re-selects "- Select a value -" on the node add form, or if the
  // slected show has no seasons, make sure the season field is re-disabled.
  if ((isset($form_state['values']['field_show']) && is_null($form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'])) || (!empty($selected_show) && !isset($result['node']))) {
    $form['field_season'][LANGUAGE_NONE]['#disabled'] = TRUE;
  }
  // If a user re-selects "- Select a value -" on the node add form, or if the
  // slected season has no episodes, make sure the season field is re-disabled.
  if ((isset($form_state['values']['field_season']) && is_null($form_state['values']['field_season'][LANGUAGE_NONE][0]['target_id'])) || (!empty($selected_season) && !isset($result['node']))) {
    $form['field_episode'][LANGUAGE_NONE]['#disabled'] = TRUE;
  }
  // Add a form validator.
  $form['#validate'][] = 'usanetwork_gallery_relations_gallery_form_validate';
}


/**
 * AJAX callback function that populates the "season" entity reference field
 * with seasons for the user specifid show.
 *
 * @see usanetwork_gallery_relations_form_media_gallery_node_form_alter()
 */
function usanetwork_gallery_relations_season_option_populate_js($form, $form_state) {
  return $form['field_season'];
}

/**
 * AJAX callback function that populates the "episode" entity reference field
 * with episode for the user specifid show season.
 *
 * @see usanetwork_gallery_relations_form_media_gallery_node_form_alter()
 */
function usanetwork_gallery_relations_episode_option_populate_js($form, $form_state) {
  return $form['field_episode'];
}

/**
 * Form validation for the episode node form.
 */
function usanetwork_gallery_relations_gallery_form_validate($form, &$form_state) {
  $selected_episode = $form_state['values']['field_episode'][LANGUAGE_NONE][0]['target_id'];
  $selected_season = $form_state['values']['field_season'][LANGUAGE_NONE][0]['target_id'];
  $selected_show = $form_state['values']['field_show'][LANGUAGE_NONE][0]['target_id'];

  if ($selected_season) {
    $season_node = node_load($selected_season);
    if ($season_node->field_show[LANGUAGE_NONE][0]['target_id'] !== $selected_show) {
      form_set_error('field_season', t('The season you selected belongs to a different show than the show you selected on this form.'));
    }
  }
  if ($selected_episode) {
    $episode_node = node_load($selected_episode);
    if ($episode_node->field_season[LANGUAGE_NONE][0]['target_id'] !== $selected_season) {
      form_set_error('field_episode', t('The episode you selected belongs to a different season than the one you selected on this form.'));
    }
  }
}