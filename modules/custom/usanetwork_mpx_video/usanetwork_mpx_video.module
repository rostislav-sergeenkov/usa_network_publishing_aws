<?php
/**
 * @file
 * Code for the usanetwork_mpx_video feature.
 */

include_once 'usanetwork_mpx_video.features.inc';

define('USA_MPX_VIDEO_DEFAULT_MPX_FIELD_INDICATOR', '[default mpx field]');

/**
 * Implementation of hook_menu().
 */
function usanetwork_mpx_video_menu() {
  // global videos page
  $items['videos'] = array(
    'title' => t('Videos'),
    'page callback' => 'usanetwork_mpx_video_global_videos_page',
    'access arguments' => array('access content'),
  );
  $items['videos/ajax'] = array(
    'title' => 'MPX Video View',
    'page callback' => 'usanetwork_mpx_video_views_ajax',
    'delivery callback' => 'ajax_deliver',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function usanetwork_mpx_video_block_info() {
  $blocks = array();
  $blocks['usa_global_mpx_video_nav'] = array(
    'info' => t('USA: global MPX video navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['usa_show_mpx_video_nav'] = array(
    'info' => t('USA: show MPX video navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['usa_mpx_video_views'] = array(
    'info' => t('USA: video MPX views'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function usanetwork_mpx_video_block_view($delta) {
  $block = array();
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'usa_global_mpx_video_nav':
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => usanetwork_mpx_video_global_nav(),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'usanetwork_mpx_video') . '/js/usanetwork_mpx_video_ajax.js',
          ),
        ),
      );
      break;
    case 'usa_show_mpx_video_nav':
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => usanetwork_mpx_video_show_nav(),
        '#attached' => array(
          'js' => array(
              drupal_get_path('module', 'usanetwork_mpx_video') . '/js/usanetwork_mpx_video_ajax.js',
          ),
        ),
      );
      break;
    case 'usa_mpx_video_views':
      $block['subject'] = '';
      $block['content'] = usanetwork_mpx_video_views();
      break;
  }

  return $block;
}

/**
 * Generates the global video navigation
 */
function usanetwork_mpx_video_global_nav() {
  $output = '';
  $items = array();
  $items[] = array('data' => '<span>select a show</span>', 'class' => array('all-shows'));
  $lang = LANGUAGE_NONE;
  $arg = arg();
  if (isset($arg[1]) && !empty($arg[1])) {
    $node = node_load($arg[1]);
  }

  $query = new EntityFieldQuery();

  // Fetch all the video node associated with any show
  $query->entityCondition('entity_type', 'file')
    ->entityCondition('bundle', _usanetwork_mpx_video_get_all_file_types())
    ->propertyCondition('published', 1)
    ->fieldCondition('field_show', 'target_id', 'NULL', '!=');

  $result = $query->execute();
  
  if (isset($result['file'])) {
    $videos = entity_load('file', array_keys($result['file']));
    
    $fids = array();
    foreach ($videos as $video) {
      // Get all the unique tv shows nodes
      if (!in_array($video->field_show[$lang][0]['target_id'], $fids)) {
        $fids[] = $video->field_show[$lang][0]['target_id'];
        $show = array_values(entity_load('node', array($video->field_show[$lang][0]['target_id'])));

        // Add all the published tv show nodes
        if (isset($show[0]) && !empty($show[0])) {
          $title = '<span>'.$show[0]->field_display_title[$lang][0]['value'].'</span>';
          $path = drupal_get_path_alias('node/'.$video->field_show[$lang][0]['target_id'].'/videos');
          $items[0]['children'][] = l($title, $path, array('html' => true));
        }
      }
    }
  }

  // sort the shows alphabetically
  asort($items[0]['children']);

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('shows'))));
  $items = array();

  if (($arg[0] == 'videos' && !isset($arg[1])) || (isset($arg[1]) && $arg[1] == 'full-episodes') ||
    (isset($node->field_mpx_full_episode[$lang][0]['value']) && !empty($node->field_mpx_full_episode[$lang][0]['value']))) {
    $items[] = array('data' => l('<span>full episodes</span>', 'videos/full-episodes', array('html' => true)), 'class' => array('full-episodes', 'active'));
    $items[] = array('data' => l("<span>what's hot</span>", 'videos/whats-hot', array('html' => true)), 'class' => array('whats-hot'));
  } else {
    $items[] = array('data' => l('<span>full episodes</span>', 'videos/full-episodes', array('html' => true)), 'class' => array('full-episodes'));
    $items[] = array('data' => l("<span>what's hot</span>", 'videos/whats-hot', array('html' => true)), 'class' => array('whats-hot', 'active'));
  }

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('categories'))));
  return $output;
}

/**
 * Generates the show video navigation
 */
function usanetwork_mpx_video_show_nav() {
  $output = '';
  $items = array();
  $arg = arg();
  $lang = LANGUAGE_NONE;
  $file = file_load($arg[1]);
  $tid = isset($_GET['tid']) ? $_GET['tid'] : 0;

  if (isset($file->fid)) {
    $cpath = drupal_get_path_alias('file/' . $file->fid);
  } else {
    $cpath = current_path();
  }

  // return empty block if the url is invalid or global video url
  if (!isset($arg[1]) || empty($arg[1]) || !isset($file->field_show[$lang][0]['target_id']) || empty($file->field_show[$lang][0]['target_id'])) {
    return '';
  }
  $query = new EntityFieldQuery();

  // Fetch all the video node associated with any show
  $query->entityCondition('entity_type', 'file')
    ->entityCondition('bundle', _usanetwork_mpx_video_get_all_file_types())
    ->propertyCondition('published', 1)
    ->fieldCondition('field_show', 'target_id', 'NULL', '!=');

  $result = $query->execute();

  if (isset($result['file'])) {
    $videos = entity_load('file', array_keys($result['file']));

    $fids = array();
    foreach ($videos as $video) {
      // Get all the unique tv shows nodes
      if (!in_array($video->field_show[$lang][0]['target_id'], $fids)) {
        $fids[] = $video->field_show[$lang][0]['target_id'];
        $show = array_values(entity_load('node', array($video->field_show[$lang][0]['target_id'])));

        // Add all the published tv show nodes
        if (isset($show[0]) && !empty($show[0])) {
          $title = '<span>'.$show[0]->field_display_title[$lang][0]['value'].'</span>';
          $path = drupal_get_path_alias('node/'.$video->field_show[$lang][0]['target_id'].'/videos');
          if ($file->field_show[$lang][0]['target_id'] == $video->field_show[$lang][0]['target_id']) {
            $items[0]['data'] = $title;
            $items[0]['class'] = array(str_replace(' ', '-', strtolower($show[0]->field_display_title[$lang][0]['value'])));
            $items[0]['children'][] = l($title, $path, array('html' => true));
          } else  {
            $items[0]['children'][] = l($title, $path, array('html' => true));
          }
        }
      }
    }
  }

  // sort the shows alphabetically
  asort($items[0]['children']);

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('shows'))));
  $items = array();

  $classes = array('full-episodes');
  if (empty($tid) && ((isset($arg[2]) && $arg[2] == 'full-episodes') ||
    (isset($file->field_mpx_full_episode[$lang][0]['value']) && !empty($file->field_mpx_full_episode[$lang][0]['value'])))) {
    $classes[] = 'active';
  }

  // show the full episodes links iff there are full episodes for that tv show
  if (_usanetwork_mpx_video_full_episodes_exist($file->field_show[$lang][0]['target_id'])) {
    $items[] = array('data' => l('<span>full episodes</span>', $cpath.'/full-episodes', array('html' => true)), 'class' => $classes);
  }

  $active_tids = array();
  if (isset($file->field_mpx_media_categories[$lang][0]['value']) && !empty($file->field_mpx_media_categories[$lang][0]['value'])) {
    foreach ($file->field_mpx_media_categories[$lang] as $categories_mpx) {
      $categories = explode('/', $categories_mpx['value']);
      foreach ($categories as $category) {
        $term_mpx_array = taxonomy_get_term_by_name($category, 'usa_video_terms');
        $term_mpx = current($term_mpx_array);
        $parent = array_values(taxonomy_get_parents($term_mpx->tid));
      if (isset($parent[0]) && $parent[0]->name == 'Series') {
          $term = taxonomy_term_load($term_mpx->tid);
      }
        $active_tids[] = $term_mpx->tid;
      }
    }

    if (!isset($term->tid)) {
      $categories = explode('/', $file->field_mpx_media_categories[$lang][0]['value']);
      $term_mpx_array = taxonomy_get_term_by_name($categories[0], 'usa_video_terms');
      $term_mpx = current($term_mpx_array);
      $parents = array_values(taxonomy_get_parents_all($term_mpx->tid));
      foreach ($parents as $i => $pterm) {
        if (isset($pterm->name) && $pterm->name == 'Series') {
          $term = $parents[$i-1];
          break;
        }
      }
    }

    if (isset($term->tid)) {
      $terms = taxonomy_get_children($term->tid, $term->vid);
      $i=1;
      foreach ($terms as $term1) {
        $class = array(str_replace(' ', '-', strtolower($term1->name)));
        if (!in_array('active', $classes) && (($tid == $term1->tid) || in_array($term1->tid, $active_tids))) {
          $class[] = 'active';
        }
        $terms1 = taxonomy_get_children($term1->tid, $term1->vid);
        if ($i == 4) {
          $items[$i] = array('data' => '<span>more</span>', 'class' => array('more'));
        }
        if ($i >= 4) {
          $items[4]['children'][$i-4] = array('data' => l('<span>'.$term1->name.'</span>', $cpath, array('query' => array('tid' => $term1->tid), 'html' => true)), 'class' => $class);
          foreach ($terms1 as $term2) {
            if ($tid == $term2->tid || in_array($term2->tid, $active_tids)) {
              $class[] = 'active';
            }
            $class = array(str_replace(' ', '-', strtolower($term2->name)));
            $items[4]['children'][$i-4]['children'][] = array('data' => l('<span>'.$term2->name.'</span>', $cpath, array('query' => array('tid' => $term2->tid), 'html' => true)), 'class' => $class);
          }
        } else {
          $items[$i] = array('data' => l('<span>'.$term1->name.'</span>', $cpath, array('query' => array('tid' => $term1->tid), 'html' => true)), 'class' => $class);
          $first = true;
          foreach ($terms1 as $term2) {
            if ($tid == $term2->tid || in_array($term2->tid, $active_tids)) {
              $class[] = 'active';
            }
            $class = array(str_replace(' ', '-', strtolower($term2->name)));
            $items[$i]['children'][] = array('data' => l('<span>'.$term2->name.'</span>', $cpath, array('query' => array('tid' => $term2->tid), 'html' => true)), 'class' => $class);
            if ($first) {
              $first = false;
              $items[$i]['class'][] = 'more';
            }
          }
        }
        $i++;
      }
    }
  }

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('categories'))));
  return $output;
}

/**
 * renders the correct video view based upon the argument
 */
function usanetwork_mpx_video_views($arg = null) {
  if (!isset($arg)) {
    $arg = arg();
  }
  $output = '';
  $lang = LANGUAGE_NONE;
  $tid = isset($_GET['tid']) ? $_GET['tid'] : 0;

  // we need these js files and headers for video player integration
  drupal_add_js(drupal_get_path('module', 'usanetwork_mpx_video') . '/js/tpPdkController.js');
   $meta_video_tag = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' =>  'tp:EnableExternalController',
      'content' => 'true',
    )
  );
  // Add header meta tag for video integration
  drupal_add_html_head($meta_video_tag, 'meta_video_tag');

  if (!empty($tid)) {
    $output = views_embed_view('usa_mpx_video', 'category_mpx_videos', $tid);
  } else if ($arg[0] == 'videos') {
    if (!isset($arg[1]) || (isset($arg[1]) && $arg[1] == 'full-episodes')) {
      $output = views_embed_view('usa_mpx_video', 'global_full_mpx_episode');
    } else if ($arg[1] == 'whats-hot') {
      $output = views_embed_view('whats_hot_file', 'whats_hot_file');
    }
  } else if ($arg[0] == 'file' && isset($arg[1]) && is_numeric($arg[1])) {
    $file = file_load($arg[1]);

    // video node with a show association
    if (isset($file->field_show[$lang][0]['target_id']) && !empty($file->field_show[$lang][0]['target_id'])) {
      $show_nid = $file->field_show[$lang][0]['target_id'];
      $full_episode = isset($file->field_mpx_full_episode[$lang][0]['value']) ? $file->field_mpx_full_episode[$lang][0]['value'] : 0;
      if ($full_episode || (isset($arg[2]) && $arg[2] == 'full-episodes')) {
        $output = views_embed_view('usa_mpx_video', 'show_full_mpx_episode', $show_nid);
      } else {
        foreach ($file->field_mpx_media_categories[$lang] as $categories_mpx) {
          $categories = explode('/', $categories_mpx['value']);
          foreach ($categories as $category) {
            $term_mpx_array = taxonomy_get_term_by_name($category, 'usa_video_terms');
            $term_mpx = current($term_mpx_array);
            $parent = array_values(taxonomy_get_parents($term_mpx->tid));
            if (isset($parent[0]) && $parent[0]->name == 'Series') {
              $term = taxonomy_term_load($term_mpx->tid);
              break;
            }
          }
        }
        if (isset($term->tid) && !empty($term->tid)) {
          $output = views_embed_view('usa_mpx_video', 'category_mpx_videos', $term->tid);
        }

        // the last term is the correct term id of the category
        $categories = explode('/', $file->field_mpx_media_categories[$lang][0]['value']);
        $count = count($categories);
        $term_mpx_array = taxonomy_get_term_by_name($categories[$count-1], 'usa_video_terms');
        $term_mpx = current($term_mpx_array);
        if (empty($output) && isset($term_mpx->tid)) {
          $output = views_embed_view('usa_mpx_video', 'category_mpx_videos', $term_mpx->tid);
        }
      }
    } else {
      $query = new EntityFieldQuery();

      // Fetch the what's hot queue id
      $query->entityCondition('entity_type', 'queues')
        ->entityCondition('bundle', array('video_mpx_queue'))
        ->propertyCondition('title', "What's Hot File")
        ->range(0, 1);

      if (isset($result['queues'])) {
        $qid = array_keys($result['queues']);

        $queue = db_select('field_data_field_qt_file', 'q')
          ->fields('q', array('entity_id'))
          ->condition('entity_id', $qid[0], '=')
          ->condition('field_qt_file_target_id', $node->nid, '=')
          ->execute()
          ->fetchField();

        if (!empty($queue)) {
          $output = views_embed_view('whats_hot_file', 'whats_hot_file');
        }
      }
    }

    if (isset($file->field_mpx_media_categories[$lang][0])) {
      // the last term is the correct term id of the category
      $categories = explode('/', $file->field_mpx_media_categories[$lang][0]['value']);
      $count = count($categories);
      $term_mpx_array = taxonomy_get_term_by_name($categories[$count-1], 'usa_video_terms');
      $term_mpx = current($term_mpx_array);
      if (empty($output) && isset($term_mpx->tid)) {
        $output = views_embed_view('usa_mpx_video', 'category_mpx_videos', $term_mpx->tid);
      }
    }
  }

  return '<div class="ajax-content">' . $output . '</div>';
}

/**
 * Ajax callback for video views
 */
function usanetwork_mpx_video_views_ajax() {
  $commands = array();
  if (isset($_POST['path'])) {
    $path = drupal_get_normal_path($_POST['path']); // get system path from alias
    $arg = explode('/', $path);
    $commands[] = ajax_command_replace('#block-usanetwork-mpx-video-usa-mpx-video-views .ajax-content', usanetwork_mpx_video_views($arg));
  }
  return  array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Renders the global video page
 */
function usanetwork_mpx_video_global_videos_page() {
  return views_embed_view('usa_mpx_video', 'global_latest_full_episode_video_mpx');
}

/**
 * Helper function to check if a show has full episodes
 */
function _usanetwork_mpx_video_full_episodes_exist($show_nid) {
  if (empty($show_nid)) {
    return false;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'file');
  $query->entityCondition('bundle',  _usanetwork_mpx_video_get_all_file_types(), 'IN');
  $query->propertyCondition('published', 1);
  $query->fieldCondition('field_show', 'target_id', $show_nid);
  $query->fieldCondition('field_mpx_full_episode', 'value', '1', '=');
  $query->count();
  
  // execute the query
  $count = intval($query->execute());

  return  $count > 0 ? true : false;
}

/**
 * Helper function; Load node by title
 */
function _usanetwork_mpx_video_node_load_by_title($title, $node_type) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $node_type)
    ->propertyCondition('title', $title)
    ->propertyCondition('status', 1)
    ->range(0,1)
    ->execute();
  if(!empty($entities)) {
    return node_load(array_shift(array_keys($entities['node'])));
  }
}

/**
 * Implements hook_file_presave().
 */
function usanetwork_mpx_video_file_presave($file) {
  
  //saving show  
  if (strpos($file->type, 'mpx_video') !== 0) {
    return;
  }
  $categories_mpx = _pub_mpx_get_default_mpx_values('field_mpx_media_categories', $file);
  foreach ($categories_mpx as $categories_mpx_value) {
    $categories = explode('/', $categories_mpx_value);
    if (count($categories) == 2) {
    $node = _usanetwork_mpx_video_node_load_by_title($categories[1], 'tv_show'); 
    if (isset($node->nid)) {
      $file->field_show[LANGUAGE_NONE]['0']['target_id'] = $node->nid;
        break;
  }
  } else {
      continue;
    }
  }
}

/**
 * Helper function for getting all file types
 */
function _usanetwork_mpx_video_get_all_file_types() {
  $file_types = array();
  foreach (_media_theplatform_mpx_get_account_data() as $account) {
    $file_types[] = 'mpx_video_' . $account->id;
  }

  return $file_types;
}

/**
 * Gets the 'pl%d' pattern prefix.
 *
 * @param $media_data
 * @return string
 */
function _usanetwork_mpx_video_parse_pl_prefix($media_data) {
  if (isset($media_data['$xmlns'])) {
    foreach ($media_data['$xmlns'] as $key => $data) {
      if (preg_match('/pl\d/', $key)) {
        return $key . '$';
      }
    }
  }

  return 'pl1$';
}

function _usanetwork_mpx_video_parse_data($path, $data) {
  $result = array();

  if (!is_array($path)) {
    $path = explode('/', $path);
  }

  while ($path) {
    $step = array_shift($path);

    if (!isset($data[$step])) {
      continue;
    }

    if (is_array($data[$step])) {
      foreach ($data[$step] as $data_unit) {
        if (is_array($data_unit)) {
          $result[] = _usanetwork_mpx_video_parse_data($path, $data_unit);
        }
        else {
          $result[] = $data_unit;
        }
      }
    }
    else {
      $result = $data[$step];
    }
  }

  return $result;
}

/**
 * Prepares ingested metadata to be saved into file entity.
 * Implements hook_media_theplatform_mpx_media_import_item_alter().
 */
function usanetwork_mpx_video_media_theplatform_mpx_media_import_item_alter(&$media_item, &$media_data, $account){
  if (!isset($media_item['field_data'])) {
    $media_item['field_data'] = array();
  }
 
  foreach (_pub_mpx_get_mpx_account_video_file_types() as $file_bundle_name => $file_type) {
    foreach (field_info_instances('file', $file_bundle_name) as $field) {
      
      if (!isset($field['widget']['settings']['pub_mpx']['media_data_fieldpath']) ||
          $field['widget']['settings']['pub_mpx']['media_data_fieldpath'] == USA_MPX_VIDEO_DEFAULT_MPX_FIELD_INDICATOR) {
        continue;
      }
      
      $field_pattern = $field['widget']['settings']['pub_mpx']['media_data_fieldpath'];
      $pl_prefix = _usanetwork_mpx_video_parse_pl_prefix($media_data);
      $pattern = str_replace('pl1$', $pl_prefix, $field_pattern);
      $value = _usanetwork_mpx_video_parse_data($pattern, $media_data);
      
      if ($field['field_name'] == 'field_mpx_full_episode') {
        $media_item['field_data'][$field['field_name']] = (int) ($value == 'true');
      } else {
        $media_item['field_data'][$field['field_name']] = $value;
      }
    }
  }
}

/**
 * Implements hook_pub_mpx_player_id_rulesets_info().
 *
 * Define rules for choosing players 
 */
function usanetwork_mpx_video_pub_mpx_player_id_rulesets_info() {
  $rulesets = array();
  $rulesets[] = array(
      'fields' => array(
        'fullEpisode' => FALSE,
      ),
      'guid' => '3uWVG4mcXhSeetRhwnSOVQTuA0roKWZz',
    );
  
  if ((_usanetwork_widget_get_environment() == 'prod')){
    $rulesets[] = array(
      'fields' => array(
        'entitlement' => 'auth',
        'fullEpisode' => '1',
      ),
      'guid' => 'sXd2mWVlXSeVzlp87VIyaGBcrPW6YRig',
    );
    $rulesets[] = array(
      'fields' => array(
        'entitlement' => 'free',
        'fullEpisode' => '1',
      ),
      'guid' => 'GlApLjKdYMfOQXa8NC_sKWoJtBeqXt1L',
    );
    $rulesets[] = array(
      'fields' => array(
        'media$name' => 'Live',
      ),
      'guid' => 'eaVyQVIaegQArVW_QZ7kL7R072ZruGAq',
    );
  } else {
    $rulesets[] = array(
      'fields' => array(
        'entitlement' => 'auth',
        'fullEpisode' => '1',
      ),
      'guid' => 'zfoUj0XwllWKTTfQ_V_5Kp84RmjUhcjJ',
    );
    $rulesets[] = array(
      'fields' => array(
        'entitlement' => 'free',
        'fullEpisode' => '1',
      ),
      'guid' => 'Vfu3SHfT0GBBgK068N_iVhm1ZP4tWbPL',
    );
    $rulesets[] = array(
      'fields' => array(
        'media$name' => 'Live',
      ),
      'guid' => 'MX_EZuC00kfqiQcMAKf_FlyQdvmKFOIX',
    );
  }
  return $rulesets;
}
