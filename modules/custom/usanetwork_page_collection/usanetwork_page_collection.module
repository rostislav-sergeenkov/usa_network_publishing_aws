<?php

// usanetwork_page_collection_

define('USANETOWRK_PAGE_COLLECTION_NAMESPACE', 'usanetwork_page_collection');
include_once('usanetwork_page_collection.field.inc');

/**
 * Implements hook_theme().
 */
function usanetwork_page_collection_theme() {
  return array(
    'usanetwork_page_collection_relation_table' => array(
      'render element' => 'element',
      'file' => 'usanetwork_page_collection.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function usanetwork_page_collection_menu() {
  $items = array();

  $items['admin/config/content/page_collection'] = array(
    'title' => 'Page collection settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of page collections functionality.',
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/types/manage/%/page_collection'] = array(
    'title' => 'Page collection',
    'description' => 'Per content type page collection configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_content_type_settings', 4),
    'access callback' => '_usanetwork_page_collection_content_type_access',
    'access arguments' => array('administer site configuration', 4),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/page_collection'] = array(
    'title' => 'Page collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_node_form', 1),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['node/%node/page_collection/add'] = array(
    'title' => 'Add new content',
    'page callback' => 'usanetwork_page_collection_node_add',
    'page arguments' => array(1),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['node/%node/page_collection/add/autocomplete'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'usanetwork_page_collection_node_autocomplete',
    'page arguments' => array(1),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/page_collection/%node/remove'] = array(
    'title' => 'Remove item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_node_remove', 1, 3),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function usanetwork_page_collection_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/page_collection' => TRUE,
      'node/*/page_collection/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_node_load().
 */
function usanetwork_page_collection_node_load($nodes, $types) {
  // use cache to prevent recursive node_load
  $cache = &drupal_static(__FUNCTION__, array());
  if (count(array_intersect(array_keys(_usanetwork_page_collection_content_types()), $types))) {
    $relations = db_select('page_collection_relations', 'pc')
      ->fields('pc')
      ->condition('pcid', array_keys($nodes), 'IN')
      ->orderBy('weight')
      ->execute()
      ->fetchAllAssoc('id');

    foreach ($nodes as $nid => $node) {
      $cache['page_collection'][$nid] = $node;
      $node->page_collection = _usanetwork_page_collection_node_tree($nid, $relations);
    }
  }
  else {
    $pcids = db_select('page_collection_relations', 'pc')
      ->fields('pc', array('nid', 'pcid'))
      ->condition('nid', array_keys($nodes), 'IN')
      ->execute()
      ->fetchAllKeyed();

    foreach ($pcids as $nid => $pcid) {
      if (isset($cache['page_collection'][$pcid])) {
        $nodes[$nid]->page_collection_parent = $cache['page_collection'][$pcid];
      }
      else {
        $nodes[$nid]->page_collection_parent = node_load($pcid);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function usanetwork_page_collection_node_insert($node) {
  if (isset($node->page_collection_parent)) {
    // add relation
    db_insert('page_collection_relations')
      ->fields(array(
        'pcid' => $node->page_collection_parent->nid,
        'nid' => $node->nid,
      ))
      ->execute();

    // clear cache
    $nids = array($node->page_collection_parent->nid);
    if (isset($node->original->page_collection_parent)) {
      $nids[] = $node->original->page_collection_parent->nid;
    }

    entity_get_controller('node')->resetCache($nids);
  }
}

/**
 * Implements hook_node_update().
 */
function usanetwork_page_collection_node_update($node) {
  if (isset($node->page_collection_parent)) {
    // update relation
    db_merge('page_collection_relations')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'pcid' => $node->page_collection_parent->nid,
        'nid' => $node->nid,
      ))
      ->execute();
  }
  elseif (isset($node->original->page_collection_parent)) {
    // delete relation
    db_delete('page_collection_relations')
      ->condition('nid', $node->nid, '=')
      ->execute();
  }

  // clear cache
  $nids = array();
  if (isset($node->page_collection_parent)) {
    $nids[$node->page_collection_parent->nid] = $node->page_collection_parent->nid;
  }
  if (isset($node->original->page_collection_parent)) {
    $nids[$node->original->page_collection_parent->nid] = $node->original->page_collection_parent->nid;
  }

  if (isset($node->page_collection)) {
    $relations = new RecursiveIteratorIterator(new RelationsRecursiveIterator($node->page_collection), RecursiveIteratorIterator::SELF_FIRST);
    foreach ($relations as $relation) {
      $nids[$relation->node->nid] = $relation->node->nid;
    }
  }

  entity_get_controller('node')->resetCache($nids);
}

/**
 * Implements hook_node_delete().
 */
function usanetwork_page_collection_node_delete($node) {
  // delete relations for page collection
  if (in_array($node->type, array_keys(_usanetwork_page_collection_content_types()))) {
    db_delete('page_collection_relations')
      ->condition('pcid', $node->nid, '=')
      ->execute();
  }

  // get page collections for cache reset
  $pc_nids = db_select('page_collection_relations', 'pc')
    ->fields('pc', array('pcid'))
    ->condition('pnid', $node->nid, '=')
    ->groupBy('pnid')
    ->execute()
    ->fetchCol();

  // update relations, set parent to 0 where parent was deleted
  db_update('page_collection_relations')
    ->fields(array(
      'pnid' => 0,
    ))
    ->condition('pnid', $node->nid, '=')
    ->execute();

  if (count($pc_nids) > 0) {
    // clear cache
    entity_get_controller('node')->resetCache($pc_nids);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter node edit form.
 */
function usanetwork_page_collection_form_node_form_alter(&$form, $form_state) {
  $node = $form_state['node'];
  $pc_options = _usanetwork_page_collection_by_child_content_type($node->type);

  if (isset($node->page_collection_parent)) {
    $page_collection = $node->page_collection_parent;
  }
  else {
    if (isset($_GET['page_collection']) && in_array($_GET['page_collection'], array_keys($pc_options))) {
      $page_collection = node_load($_GET['page_collection']);
    }
    if (!isset($page_collection) || $page_collection == false) {
      $page_collection = _usanetwork_page_collection_by_child($node);
    }

    if (isset($page_collection) && $page_collection) {
      $node->page_collection_parent = $page_collection;
    }
    else {
      return;
    }
  }

  $form['page_collection'] = array(
    '#type' => 'fieldset',
    '#title' => t('Page collection'),
    '#collapsible' => true,
    '#collapsed' => true,
    '#weight' => 100,
    '#group' => 'additional_settings',
    '#tree' => true,
  );

  $pc_options = _usanetwork_page_collection_by_child_content_type($node->type);
  $pc_options = array(0 => t('- none -')) + $pc_options;
  $form['page_collection']['page_collection'] = array(
    '#type' => 'select',
    '#title' => t('Page collection'),
    '#options' => $pc_options,
    '#default_value' => $page_collection ? $page_collection->nid : 0,
  );
  if (!isset($node->nid)) {
    $form['page_collection']['page_collection']['#disabled'] = true;
  }

  // Add resources
  if ($page_collection) {
    $form['page_collection_resources'] = array(
      '#type' => 'fieldset',
      '#title' => t('Page collection resources'),
      '#collapsible' => true,
      '#collapsed' => true,
      '#weight' => -100,
    );

    $form['page_collection_resources']['resources'] = node_view($page_collection, 'page_collection_resources');
  }
}

/**
 * Implements hook_node_submit().
 */
function usanetwork_page_collection_node_submit($node, $form, &$form_state) {
  if (!empty($form_state['values']['page_collection']['page_collection'])
      && $form_state['values']['page_collection']['page_collection'] != 0) {
    $page_collection = node_load($form_state['values']['page_collection']['page_collection']);
    if ($page_collection) {
      $node->page_collection_parent = $page_collection;
    }
  }
  elseif (isset($form_state['values']['page_collection']['page_collection']) && $form_state['values']['page_collection']['page_collection'] == 0) {
    unset($node->page_collection_parent);
  }
}

/**
 * Implements hook_node_view().
 */
function usanetwork_page_collection_node_view($node, $view_mode, $langcode) {
  if (isset($node->page_collection_parent)) {
    $page_collection = $node->page_collection_parent;
    // Attach Javascript and CSS files
    $attach_files = array();
    $attach_files['js'] = field_get_items('node', $page_collection, 'field_usa_pc_javascript', $langcode);
    if (!$attach_files['js']) {
      unset($attach_files['js']);
    }
    $attach_files['css'] = field_get_items('node', $page_collection, 'field_usa_pc_css', $langcode);
    if (!$attach_files['css']) {
      unset($attach_files['css']);
    }
    foreach ($attach_files as $type => $files) {
      foreach ($files as $file) {
        $node->content['#attached'][$type][] = file_create_url($file['uri']);
      }
    }

    // Attach inline Javascript and CSS
    $attach_inline = array();
    $attach_inline['js'] = field_get_items('node', $page_collection, 'field_usa_pc_javascript_inline', $langcode);
    if (!$attach_inline['js']) {
      unset($attach_inline['js']);
    }
    $attach_inline['css'] = field_get_items('node', $page_collection, 'field_usa_pc_css_inline', $langcode);
    if (!$attach_inline['css']) {
      unset($attach_inline['css']);
    }
    foreach ($attach_inline as $type => $items) {
      foreach ($items as $item) {
        $node->content['#attached'][$type][] = array(
          'data' => $item['value'],
          'type' => 'inline',
        );
      }
    }

    // Add overall and afterall content
    $overall = field_get_items('node', $page_collection, 'field_usa_pc_overall_content', $langcode);
    if ($overall) {
      $node->content['overall_content'] = array(
        '#weight' => -100,
        '#markup' => '',
      );
      foreach ($overall as $content) {
        $node->content['overall_content']['#markup'] .= $content['value'];
      }
    }

    $afterall = field_get_items('node', $page_collection, 'field_usa_pc_afterall_content', $langcode);
    if ($afterall) {
      $node->content['afterall_content'] = array(
        '#weight' => 100,
        '#markup' => '',
      );
      foreach ($afterall as $content) {
        $node->content['afterall_content']['#markup'] .= $content['value'];
      }
    }
  }
}

/**
 * Autocomplete callback
 */
function usanetwork_page_collection_node_autocomplete($page_collection, $title = "") {
  $matches = array();
  if ($title) {
    $types = _usanetwork_page_collection_node_content_types($page_collection->type);

    $query = db_select('node', 'n')
      ->fields('n', array('title', 'nid', 'type'))
      ->fields('pc', array('nid'))
      ->condition('title', db_like($title) . '%', 'LIKE')
      ->condition('type', array_keys($types), 'IN')
      ->condition('n.nid', $page_collection->nid, '<>')
      ->isNull('pc.nid');
    $query->leftJoin('page_collection_relations', 'pc', 'n.nid = pc.nid');
    $result = $query->range(0, 10)
      ->execute();
    foreach ($result as $node) {
      $matches[$types[$node->type] . ': ' . $node->title . ' (' . $node->nid . ')'] = check_plain($types[$node->type]) . ': ' . check_plain($node->title);
    }
  }
  drupal_json_output($matches);
}

/**
 * Builds page collection tree
 */
function _usanetwork_page_collection_node_tree($pcid, $relations, $parent = 0) {
  $page_collection = array();
  foreach ($relations as $item) {
    if ($item->pcid == $pcid && $item->pnid == $parent) {
      $page = new stdClass();
      $page->node = node_load($item->nid);
      if ($page->node) {
        $page->id = $item->id;
        $page->pcid = $item->pcid;
        $page->weight = $item->weight;
        $page->parent = node_load($item->pnid);
        $page->children = _usanetwork_page_collection_node_tree($pcid, $relations, $item->nid);
        $page_collection[] = $page;
      }
    }
  }
  return $page_collection;
}

/**
 * Access callback for per content type configuration page
 */
function _usanetwork_page_collection_content_type_access($string, $content_type) {
  $content_types = array_keys(_usanetwork_page_collection_content_types());
  if (in_array($content_type, $content_types)) {
    return user_access($string);
  }
  return false;
}

/**
 * Access callback for page collection node form
 */
function _usanetwork_page_collection_node_access($op, $node) {
  $content_types = array_keys(_usanetwork_page_collection_content_types());
  if (in_array($node->type, $content_types)) {
    return node_access($op, $node);
  }
  return false;
}

/**
 * Helper function. Returns page collection content types
 */
function _usanetwork_page_collection_content_types() {
  $namespace = USANETOWRK_PAGE_COLLECTION_NAMESPACE;
  $content_types = variable_get($namespace . '_content_types', array());

  $result = array();
  $names = node_type_get_names();
  foreach ($content_types as $content_type => $enabled) {
    if ($enabled) {
      $result[$content_type] = $names[$content_type];
    }
  }

  return $result;
}

/**
 * Helper function. Returns items content type for page collection
 */
function _usanetwork_page_collection_node_content_types($content_type) {
  $namespace = USANETOWRK_PAGE_COLLECTION_NAMESPACE;
  $content_types = variable_get($namespace . '_' . $content_type . '_content_types', array());

  $result = array();
  $names = node_type_get_names();
  foreach ($content_types as $content_type => $enabled) {
    if ($enabled) {
      $result[$content_type] = $names[$content_type];
    }
  }

  return $result;
}

/**
 * Helper functions. Returns list of page collections that have $content_type as child content type
 */
function _usanetwork_page_collection_by_child_content_type($content_type) {
  $pc_content_types = _usanetwork_page_collection_content_types();
  foreach ($pc_content_types as $pc_content_type => $title) {
    if (!in_array($content_type, array_keys(_usanetwork_page_collection_node_content_types($pc_content_type)))) {
      unset($pc_content_types[$pc_content_type]);
    }
  }

  if (empty($pc_content_types)) {
    return array();
  }

  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', array_keys($pc_content_types), 'IN')
    ->execute()
    ->fetchAllKeyed();

  return $result;
}

/**
 * Helper function. Returns page collection for a child node
 */
function _usanetwork_page_collection_by_child($node) {
  $pcid = db_select('page_collection_relations', 'pc')
    ->fields('pc', array('pcid'))
    ->condition('nid', $node->nid, '=')
    ->execute()
    ->fetchField();

  return $pcid ? node_load($pcid) : false;
}

class RelationsRecursiveIterator implements RecursiveIterator {
  private $_data;
  private $_position = 0;

  public function __construct(array $data) {
    $this->_data = $data;
  }

  public function valid() {
    return isset($this->_data[$this->_position]);
  }

  public function hasChildren() {
    return is_array($this->_data[$this->_position]->children) && count($this->_data[$this->_position]->children);
  }

  public function next() {
    $this->_position++;
  }

  public function current() {
    return $this->_data[$this->_position];
  }

  public function getChildren() {
    return new RelationsRecursiveIterator($this->_data[$this->_position]->children);
  }

  public function rewind() {
    $this->_position = 0;
  }

  public function key() {
    return $this->_position;
  }
}