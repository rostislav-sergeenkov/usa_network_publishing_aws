<?php

// usanetwork_page_collection_

define('USANETOWRK_PAGE_COLLECTION_NAMESPACE', 'usanetwork_page_collection');
include_once('usanetwork_page_collection.field.inc');

/**
 * Implements hook_theme().
 */
function usanetwork_page_collection_theme() {
  return array(
    'usanetwork_page_collection_relation_table' => array(
      'render element' => 'element',
      'file' => 'usanetwork_page_collection.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function usanetwork_page_collection_menu() {
  $items = array();

  $items['admin/config/content/page_collection'] = array(
    'title' => 'Page collection settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of page collections functionality.',
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/types/manage/%/page_collection'] = array(
    'title' => 'Page collection',
    'description' => 'Per content type page collection configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_content_type_settings', 4),
    'access callback' => '_usanetwork_page_collection_content_type_access',
    'access arguments' => array('administer site configuration', 4),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/page_collection'] = array(
    'title' => 'Page collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_node_form', 1),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['node/%node/page_collection/add'] = array(
    'title' => 'Add new content',
    'page callback' => 'usanetwork_page_collection_node_add',
    'page arguments' => array(1),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['node/%node/page_collection/add/autocomplete'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'usanetwork_page_collection_node_autocomplete',
    'page arguments' => array(1),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/page_collection/%node/remove'] = array(
    'title' => 'Remove item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usanetwork_page_collection_node_remove', 1, 3),
    'access callback' => '_usanetwork_page_collection_node_access',
    'access arguments' => array('update', 1),
    'file' => 'usanetwork_page_collection.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function usanetwork_page_collection_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/page_collection' => TRUE,
      'node/*/page_collection/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_node_load().
 */
function usanetwork_page_collection_node_load($nodes, $types) {
  // use cache to prevent recursive node_load
  $cache = &drupal_static(__FUNCTION__, array());
  // load page collection
  if (count(array_intersect(array_keys(_usanetwork_page_collection_content_types()), $types))) {
    $relations = db_select('page_collection_relations', 'pc')
      ->fields('pc')
      ->condition('pcid', array_keys($nodes), 'IN')
      ->orderBy('weight')
      ->execute()
      ->fetchAllAssoc('id');

    foreach ($nodes as $nid => $node) {
      $cache['page_collection'][$nid] = $node;
      $node->page_collection = _usanetwork_page_collection_node_tree($nid, $relations);
    }
  }

  // load page collection parents
  $pcids = db_select('page_collection_relations', 'pc')
    ->fields('pc', array('nid', 'pcid'))
    ->condition('nid', array_keys($nodes), 'IN')
    ->execute()
    ->fetchAllKeyed();

  foreach ($pcids as $nid => $pcid) {
    if (!isset($cache['page_collection'][$pcid])) {
      node_load($pcid);
    }
    $nodes[$nid]->page_collection_parent = &$cache['page_collection'][$pcid];
  }

  foreach ($nodes as $nid => $node) {
    if (isset($node->page_collection_parent)) {
      $nodes[$nid]->page_collection_relation = &$cache['pages'][$nid];

      // sync fields
      $parent = $node->page_collection_parent;
      while(isset($parent->page_collection_parent)) {
        $parent = $parent->page_collection_parent;
      }
      $field_sync = _usanetwork_page_collection_sync_fields_load($parent->type, $parent->nid);
      foreach ($field_sync as $field_name => $enabled) {
        if ($enabled) {
          if (isset($parent->{$field_name})) {
            $node->{$field_name} = $parent->{$field_name};
          }
          else {
            unset($node->{$field_name});
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function usanetwork_page_collection_node_insert($node) {
  if (isset($node->page_collection_parent)) {
    // add relation
    db_insert('page_collection_relations')
      ->fields(array(
        'pcid' => $node->page_collection_parent->nid,
        'nid' => $node->nid,
        'prepend_parent_path' => isset($node->path['prepend_parent_path']) ? $node->path['prepend_parent_path'] : 1,
      ))
      ->execute();

    // clear cache
    $nids = array($node->page_collection_parent->nid);
    if (isset($node->original->page_collection_parent)) {
      $nids[] = $node->original->page_collection_parent->nid;
    }

    entity_get_controller('node')->resetCache($nids);
  }
}

/**
 * Implements hook_node_update().
 */
function usanetwork_page_collection_node_update($node) {
  if (isset($node->page_collection_parent)) {
    // update relation
    db_merge('page_collection_relations')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'pcid' => $node->page_collection_parent->nid,
        'nid' => $node->nid,
      ))
      ->execute();
  }
  elseif (isset($node->original->page_collection_parent)) {
    // delete relation
    db_delete('page_collection_relations')
      ->condition('nid', $node->nid, '=')
      ->execute();
  }

  $nids = array();
  if (isset($node->page_collection_parent)) {
    $nids[$node->page_collection_parent->nid] = $node->page_collection_parent->nid;
  }
  if (isset($node->original->page_collection_parent)) {
    $nids[$node->original->page_collection_parent->nid] = $node->original->page_collection_parent->nid;
  }

  if (isset($node->page_collection)) {
    if (isset($node->original) && isset($node->original->page_collection)) {
      if (module_exists('path')) {
        $paths = array();
        $relations = new RecursiveIteratorIterator(new RelationsRecursiveIterator($node->original->page_collection), RecursiveIteratorIterator::SELF_FIRST);
        foreach ($relations as $relation) {
          if ($relation->prepend_parent_path) {
            $path = path_load(array(
              'source' => 'node/' . $relation->node->nid,
            ));
            if ($path) {
              $pnid = $relation->parent ? $relation->parent->nid : $node->nid;
              $parent_path = drupal_get_path_alias('node/' . $pnid);
              if ($parent_path != 'node/' . $pnid) {
                if (strpos($path['alias'] . '/', $parent_path) === 0) {
                  $paths[$relation->id] = substr($path['alias'], strlen($parent_path) + 1);
                }
                else {
                  $paths[$relation->id] = $path['alias'];
                }
              }
            }
          }
        }
      }
    }
    $relations = new RecursiveIteratorIterator(new RelationsRecursiveIterator($node->page_collection), RecursiveIteratorIterator::SELF_FIRST);
    foreach ($relations as $relation) {
      // update relations
      db_update('page_collection_relations')
        ->fields(array(
          'pnid' => $relation->parent ? $relation->parent->nid : 0,
          'weight' => $relation->weight,
        ))
        ->condition('id', $relation->id, '=')
        ->execute();

      if ($relation->prepend_parent_path && isset($paths[$relation->id])) {
        $path = path_load(array(
          'source' => 'node/' . $relation->node->nid,
        ));
        if ($path) {
          $pnid = $relation->parent ? $relation->parent->nid : $node->nid;
          $parent_path = drupal_get_path_alias('node/' . $pnid);
          if ($parent_path != 'node/' . $pnid) {
            $path['alias'] = $parent_path . '/' . $paths[$relation->id];
            path_save($path);
          }
          else {
            path_delete(array(
              'pid' => $path['pid'],
            ));
          }
        }
      }

      $nids[$relation->node->nid] = $relation->node->nid;
    }
  }

  // clear cache
  entity_get_controller('node')->resetCache($nids);
}

/**
 * Implements hook_node_presave().
 */
function usanetwork_page_collection_node_presave($node) {
  if (module_exists('path')
    && isset($node->page_collection_parent)
    && isset($node->page_collection_relation->prepend_parent_path)
    && $node->page_collection_relation->prepend_parent_path)
  {
    $pnid = db_select('page_collection_relations', 'pc')
      ->fields('pc',  array('pnid'))
      ->condition('nid', $node->nid)
      ->execute()
      ->fetchField();

    if ($pnid) {
      $parent = node_load($pnid);
    }
    else {
      $parent = $node->page_collection_parent;
    }

    $lang = entity_language('node', $parent);
    $parent_alias = drupal_get_path_alias('node/' . $parent->nid, $lang);
    if ($parent_alias != 'node/' . $parent->nid) {
      $old_path = path_load(array('pid' => $node->path['pid']));
      $old_alias = $old_path['alias'];
      if (!empty($node->path['alias']) && strpos($node->path['alias'], $parent_alias . '/') !== 0) {
        $node->path['alias'] = $parent_alias . '/' . $node->path['alias'];
      }

      // update children aliases
      $children = array();
      if (!isset($node->page_collection_parent->page_collection)) {
        $node->page_collection_parent = node_load($node->page_collection_parent->nid, $node->page_collection_parent->vid, true);
      }
      foreach (new RecursiveIteratorIterator(new RelationsRecursiveIterator($node->page_collection_parent->page_collection), RecursiveIteratorIterator::SELF_FIRST) as $relation) {
        if ($relation->node->nid == $node->nid) {
          $children = $relation->children;
          break;
        }
      }
      foreach (new RecursiveIteratorIterator(new RelationsRecursiveIterator($children), RecursiveIteratorIterator::SELF_FIRST) as $relation) {
        if ($relation->prepend_parent_path) {
          $path = path_load(array(
            'source' => 'node/' . $relation->node->nid,
          ));
          if ($path) {
            if (empty($node->path['alias'])) {
              path_delete(array(
                'pid' => $path['pid'],
              ));
            }
            else {
              if (!empty($old_alias) && strstr($path['alias'], $old_alias . '/')) {
                $path['alias'] = preg_replace('|^' . preg_quote($old_alias . '/') . '|', $node->path['alias'] . '/', $path['alias'], 1);
              }
              elseif (empty($old_alias)) {
                $path['alias'] = $node->path['alias'] . '/' . $path['alias'];
              }
              path_save($path);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function usanetwork_page_collection_node_delete($node) {
  // get nids for cache reset
  $nids = array();
  $conditions = db_or();
  $conditions->condition('nid', $node->nid, '=');
  $conditions->condition('pnid', $node->nid, '=');
  $result = db_select('page_collection_relations', 'pc')
    ->fields('pc', array('id', 'pcid', 'nid'))
    ->condition($conditions)
    ->execute()
    ->fetchAllAssoc('id');
  foreach($result as $item) {
    $nids[$item->pcid] = $item->pcid;
    $nids[$item->nid] = $item->nid;
  }

  // delete relations
  $conditions = db_or();
  $conditions->condition('pcid', $node->nid, '=');
  $conditions->condition('nid', $node->nid, '=');
  db_delete('page_collection_relations')
    ->condition($conditions)
    ->execute();

  // update relations, set parent to 0 where parent was deleted
  db_update('page_collection_relations')
    ->fields(array(
      'pnid' => 0,
    ))
    ->condition('pnid', $node->nid, '=')
    ->execute();

  if (count($nids) > 0) {
    // clear cache
    entity_get_controller('node')->resetCache($nids);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter node edit form.
 */
function usanetwork_page_collection_form_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];

  if (isset($node->page_collection_parent)) {
    $page_collection = $node->page_collection_parent;
  }
  else {
    if (isset($_GET['page_collection']) && in_array($_GET['page_collection'], array_keys(_usanetwork_page_collection_by_child_content_type($node->type)))) {
      $page_collection = node_load($_GET['page_collection']);
    }
    if (!isset($page_collection) || $page_collection == false) {
      $page_collection = _usanetwork_page_collection_by_child($node);
    }

    if (isset($page_collection) && $page_collection) {
      $node->page_collection_parent = $page_collection;
    }
  }

  if (isset($node->page_collection) || isset($node->page_collection_parent)) {
    $file_folder = isset($node->field_usa_pc_file_folder) ? $node->field_usa_pc_file_folder : array();
    if (empty($node->field_usa_pc_file_folder) && isset($node->page_collection_parent)) {
      $parent = $node->page_collection_parent;
      while (empty($parent->field_usa_pc_file_folder) && isset($parent->page_collection_parent)) {
        $parent = $parent->page_collection_parent;
      }
      $file_folder = $parent->field_usa_pc_file_folder;
    }
    // change #upload_location
    $lang = $form['language']['#value'];
    if (!empty($file_folder)) {
      $file_folder = reset($file_folder[$lang]);
      $file_folder = $file_folder['value'];
    }
    foreach (_usanetwork_page_collection_field_bases() as $field_name => $field) {
      if (isset($form[$field_name]) && ($field['type'] == 'file' || $field['type'] == 'image')) {
        foreach (element_children($form[$field_name][$lang]) as $key) {
          if (isset($form[$field_name][$lang][$key]['#upload_location'])) {
            list($scheme, $location) = explode('://', $form[$field_name][$lang][$key]['#upload_location']);
            if (empty($location)) {
              $location = $file_folder;
            }
            else {
              $location = trim($location, '/\\') . '/' . trim($file_folder, '/\\');
            }
            $form[$field_name][$lang][$key]['#upload_location'] = $scheme . '://' . $location;
          }
        }
      }
    }
  }

  if (isset($node->page_collection_parent)) {
    if (isset($node->nid)) {
      $relations = new RecursiveIteratorIterator(new RelationsRecursiveIterator($page_collection->page_collection), RecursiveIteratorIterator::SELF_FIRST);
      foreach ($relations as $relation) {
        if ($node->nid == $relation->node->nid) {
          break;
        }
      }
      $form_state['#page_collection_relation'] = $relation;
    }

    $form['page_collection'] = array(
      '#type' => 'fieldset',
      '#title' => t('Page collection'),
      '#collapsible' => true,
      '#collapsed' => true,
      '#weight' => 100,
      '#group' => 'additional_settings',
      '#tree' => true,
    );

    $pc_options = _usanetwork_page_collection_by_child_content_type($node->type, $node);
    $form['page_collection']['page_collection'] = array(
      '#type' => 'select',
      '#title' => t('Page collection'),
      '#options' => array(0 => t('- None -')) + $pc_options,
      '#default_value' => $page_collection ? $page_collection->nid : 0,
    );
    if (!isset($node->nid)) {
      $form['page_collection']['page_collection']['#disabled'] = true;
    }

    if ($page_collection) {
      // Add resources
      $form['page_collection_resources'] = array(
        '#type' => 'fieldset',
        '#title' => t('Page collection resources'),
        '#collapsible' => true,
        '#collapsed' => true,
        '#weight' => -100,
      );

      $form['page_collection_resources']['resources'] = node_view($page_collection, 'page_collection_resources');

      // sync fields
      $field_sync = _usanetwork_page_collection_sync_fields_load($page_collection->type, $page_collection->nid);
      foreach ($field_sync as $field_name => $enabled) {
        if ($enabled) {
          if (isset($page_collection->{$field_name})) {
            $node->{$field_name} = $page_collection->{$field_name};
          }
          else {
            unset($node->{$field_name});
          }
        }
      }

      // hide synchronized fields
      $fields = _usanetwork_page_collection_sync_fields_load($page_collection->type, $page_collection->nid);
      foreach ($fields as $field_name => $enabled) {
        if ($enabled && isset($form[$field_name])) {
          $form[$field_name]['#access'] = false;
        }
      }

      // add path options
      if (module_exists('path')) {
        $form['path']['prepend_parent_path'] = array(
          '#type' => 'checkbox',
          '#title' => t('Prepend parent path'),
          '#default_value' => isset($relation) ? $relation->prepend_parent_path : 1,
        );
        $form['path']['alias']['#element_validate'] = array('usanetwork_page_collection_path_form_element_validate');
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function usanetwork_page_collection_node_submit($node, $form, &$form_state) {
  $relation = isset($form_state['#page_collection_relation']) ? $form_state['#page_collection_relation'] : false;
  if (!empty($form_state['values']['page_collection']['page_collection'])
      && $form_state['values']['page_collection']['page_collection'] != 0) {
    $page_collection = node_load($form_state['values']['page_collection']['page_collection']);
    if ($page_collection) {
      $node->page_collection_parent = $page_collection;
    }
  }
  elseif (isset($form_state['values']['page_collection']['page_collection']) && $form_state['values']['page_collection']['page_collection'] == 0) {
    unset($node->page_collection_parent);
  }

  if (isset($node->path) && isset($form_state['values']['path']['prepend_parent_path'])) {
    if (!isset($node->page_collection_relation)) {
      $node->page_collection_relation = new stdClass();
    }
    $node->page_collection_relation->prepend_parent_path = $form_state['values']['path']['prepend_parent_path'] ? true : false;
  }
}

function usanetwork_page_collection_path_form_element_validate($element, &$form_state, $complete_form) {
  if (!isset($form_state['values']['path']['prepend_parent_path']) || !$form_state['values']['path']['prepend_parent_path']) {
    path_form_element_validate($element, $form_state, $complete_form);
  }
}

/**
 * Implements hook_node_view().
 */
function usanetwork_page_collection_node_view($node, $view_mode, $langcode) {
  if (isset($node->page_collection_parent)) {
    $page_collection = $node->page_collection_parent;
    // Attach Javascript and CSS files
    $attach_files = array();
    $attach_files['js'] = field_get_items('node', $page_collection, 'field_usa_pc_javascript', $langcode);
    if (!$attach_files['js']) {
      unset($attach_files['js']);
    }
    $attach_files['css'] = field_get_items('node', $page_collection, 'field_usa_pc_css', $langcode);
    if (!$attach_files['css']) {
      unset($attach_files['css']);
    }
    foreach ($attach_files as $type => $files) {
      foreach ($files as $file) {
        $node->content['#attached'][$type][] = file_create_url($file['uri']);
      }
    }

    // Attach inline Javascript and CSS
    $attach_inline = array();
    $attach_inline['js'] = field_get_items('node', $page_collection, 'field_usa_pc_javascript_inline', $langcode);
    if (!$attach_inline['js']) {
      unset($attach_inline['js']);
    }
    $attach_inline['css'] = field_get_items('node', $page_collection, 'field_usa_pc_css_inline', $langcode);
    if (!$attach_inline['css']) {
      unset($attach_inline['css']);
    }
    foreach ($attach_inline as $type => $items) {
      foreach ($items as $item) {
        $node->content['#attached'][$type][] = array(
          'data' => $item['value'],
          'type' => 'inline',
        );
      }
    }

    // Add overall and afterall content
    $overall = field_get_items('node', $page_collection, 'field_usa_pc_overall_content', $langcode);
    if ($overall) {
      $node->content['overall_content'] = array(
        '#weight' => -100,
        '#markup' => '',
      );
      foreach ($overall as $content) {
        $node->content['overall_content']['#markup'] .= $content['value'];
      }
    }

    $afterall = field_get_items('node', $page_collection, 'field_usa_pc_afterall_content', $langcode);
    if ($afterall) {
      $node->content['afterall_content'] = array(
        '#weight' => 100,
        '#markup' => '',
      );
      foreach ($afterall as $content) {
        $node->content['afterall_content']['#markup'] .= $content['value'];
      }
    }
  }
}

/**
 * Autocomplete callback
 */
function usanetwork_page_collection_node_autocomplete($page_collection, $title = "") {
  $matches = array();
  if ($title) {
    $types = _usanetwork_page_collection_node_content_types($page_collection->type);

    $exclude = array($page_collection->nid);
    $query = db_select('node', 'n')
      ->fields('n', array('title', 'nid', 'type'))
      ->fields('pc', array('nid'))
      ->condition('title', db_like($title) . '%', 'LIKE')
      ->condition('type', array_keys($types), 'IN')
      ->isNull('pc.nid');

    if (isset($page_collection->page_collection_parent)) {
      $exclude[] = $page_collection->page_collection_parent->nid;
      $parent = $page_collection->page_collection_parent;
      while (isset($parent->page_collection_parent)) {
        $parent = $parent->page_collection_parent;
        $exclude[] = $parent->nid;
      }
    }
    $query->leftJoin('page_collection_relations', 'pc', 'n.nid = pc.nid');
    $query->condition('n.nid', $exclude, 'NOT IN');
    $result = $query->range(0, 10)
      ->execute();
    foreach ($result as $node) {
      $matches[$types[$node->type] . ': ' . $node->title . ' (' . $node->nid . ')'] = check_plain($types[$node->type]) . ': ' . check_plain($node->title);
    }
  }
  drupal_json_output($matches);
}

/**
 * Builds page collection tree
 */
function _usanetwork_page_collection_node_tree($pcid, $relations, $parent = 0) {
  $cache = &drupal_static('usanetwork_page_collection_node_load', array());
  $page_collection = array();
  foreach ($relations as $item) {
    if ($item->pcid == $pcid && $item->pnid == $parent) {
      $page = new stdClass();
      $page->node = node_load($item->nid);
      if ($page->node) {
        $page->id = $item->id;
        $page->pcid = $item->pcid;
        $page->weight = $item->weight;
        $page->parent = node_load($item->pnid);
        $page->prepend_parent_path = $item->prepend_parent_path ? true: false;
        $cache['pages'][$page->node->nid] = $page;
        $page->children = _usanetwork_page_collection_node_tree($pcid, $relations, $item->nid);
        $page_collection[] = $page;
      }
    }
  }
  return $page_collection;
}

/**
 * Access callback for per content type configuration page
 */
function _usanetwork_page_collection_content_type_access($string, $content_type) {
  $content_types = array_keys(_usanetwork_page_collection_content_types());
  if (in_array($content_type, $content_types)) {
    return user_access($string);
  }
  return false;
}

/**
 * Access callback for page collection node form
 */
function _usanetwork_page_collection_node_access($op, $node) {
  $content_types = array_keys(_usanetwork_page_collection_content_types());
  if (in_array($node->type, $content_types)) {
    return node_access($op, $node);
  }
  return false;
}

/**
 * Helper function. Returns page collection content types
 */
function _usanetwork_page_collection_content_types() {
  $namespace = USANETOWRK_PAGE_COLLECTION_NAMESPACE;
  $content_types = variable_get($namespace . '_content_types', array());

  $result = array();
  $names = node_type_get_names();
  foreach ($content_types as $content_type => $enabled) {
    if ($enabled) {
      $result[$content_type] = $names[$content_type];
    }
  }

  return $result;
}

/**
 * Helper function. Returns items content type for page collection
 */
function _usanetwork_page_collection_node_content_types($content_type) {
  $namespace = USANETOWRK_PAGE_COLLECTION_NAMESPACE;
  $content_types = variable_get($namespace . '_' . $content_type . '_content_types', array());

  $result = array();
  $names = node_type_get_names();
  foreach ($content_types as $content_type => $enabled) {
    if ($enabled) {
      $result[$content_type] = $names[$content_type];
    }
  }

  return $result;
}

/**
 * Helper functions. Returns list of page collections that have $content_type as child content type
 */
function _usanetwork_page_collection_by_child_content_type($content_type, $node = null) {
  $pc_content_types = _usanetwork_page_collection_content_types();
  foreach ($pc_content_types as $pc_content_type => $title) {
    if (!in_array($content_type, array_keys(_usanetwork_page_collection_node_content_types($pc_content_type)))) {
      unset($pc_content_types[$pc_content_type]);
    }
  }

  if (empty($pc_content_types)) {
    return array();
  }

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', array_keys($pc_content_types), 'IN');

  if (isset($node) && isset($node->nid)) {
    $exclude = array(
      $node->nid => $node->nid,
    );
    if (isset($node->page_collection)) {
      _usanetwork_page_collection_by_child_content_type_exclude_nested($node, $exclude);
    }
    if (!empty($exclude)) {
      $query->condition('nid', $exclude, 'NOT IN');
    }
  }

  $result = $query->execute()
    ->fetchAllKeyed();

  return $result;
}

/**
 * Helper function. Excludes nested page collections.
 */
function _usanetwork_page_collection_by_child_content_type_exclude_nested($node, &$exclude) {
  if (!isset($node->page_collection)) {
    return;
  }

  $relations = new RecursiveIteratorIterator(new RelationsRecursiveIterator($node->page_collection), RecursiveIteratorIterator::SELF_FIRST);
  foreach ($relations as $relation) {
    $exclude[$relation->node->nid] = $relation->node->nid;
    _usanetwork_page_collection_by_child_content_type_exclude_nested($relation->node, $exclude);
  }
}

/**
 * Helper function. Returns page collection for a child node
 */
function _usanetwork_page_collection_by_child($node) {
  if (!isset($node->nid)) {
    return false;
  }
  $pcid = db_select('page_collection_relations', 'pc')
    ->fields('pc', array('pcid'))
    ->condition('nid', $node->nid, '=')
    ->execute()
    ->fetchField();

  return $pcid ? node_load($pcid) : false;
}

/**
 * Helper function. Returns list of synchronized fields.
 */
function _usanetwork_page_collection_sync_fields_load($type, $nid = 0) {
  $query = db_select('page_collection_field_sync', 'pf')
    ->fields('pf', array('field_name', 'enabled'))
    ->condition('type', $type, '=');

  if ($nid) {
    $max_nid = db_query('SELECT MAX(nid) FROM {page_collection_field_sync} WHERE type = :type AND (nid = :nid OR nid = 0)', array(
      ':type' => $type,
      ':nid' => $nid,
    ))->fetchField();
  }
  else {
    $max_nid = $nid;
  }

  $query->condition('nid', $max_nid, '=');
  $fields = $query->execute()
    ->fetchAllKeyed();

  return $fields;
}

/**
 * Helper function. Checks if page collection uses default settings for field sync.
 */
function _usanetwork_page_collection_sync_fields_default($nid) {
  $result = db_select('page_collection_field_sync', 'pf')
    ->fields('pf', array('nid'))
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchField();

  return $result ? false : true;
}

/**
 * Helper function. Saves list of synchronized fields.
 */
function _usanetwork_page_collection_sync_fields_save($fields, $type, $nid = 0) {
  if ($fields == null) {
    // remove from database
    db_delete('page_collection_field_sync')
      ->condition('type', $type, '=')
      ->condition('nid', $nid, '=')
      ->execute();
  }
  else {
    // update database
    foreach ($fields as $field_name => $enabled) {
      db_merge('page_collection_field_sync')
        ->key(array(
          'nid' => $nid,
          'type' => $type,
          'field_name' => $field_name,
        ))
        ->fields(array(
          'nid' => $nid,
          'type' => $type,
          'field_name' => $field_name,
          'enabled' => $enabled ? 1 : 0,
        ))
        ->execute();

      db_delete('page_collection_field_sync')
        ->condition('type', $type, '=')
        ->condition('nid', $nid, '=')
        ->condition('field_name', array_keys($fields), 'NOT IN')
        ->execute();
    }
  }
}

function _usanetwork_page_collection_rebuild_paths($page_collection) {
  $relations = new RecursiveIteratorIterator(new RelationsRecursiveIterator($page_collection->page_collection), RecursiveIteratorIterator::SELF_FIRST);
  foreach ($relations as $relation) {

  }
}

class RelationsRecursiveIterator implements RecursiveIterator {
  private $_data;
  private $_position = 0;

  public function __construct(array $data) {
    $this->_data = $data;
  }

  public function valid() {
    return isset($this->_data[$this->_position]);
  }

  public function hasChildren() {
    return is_array($this->_data[$this->_position]->children) && count($this->_data[$this->_position]->children);
  }

  public function next() {
    $this->_position++;
  }

  public function current() {
    return $this->_data[$this->_position];
  }

  public function getChildren() {
    return new RelationsRecursiveIterator($this->_data[$this->_position]->children);
  }

  public function rewind() {
    $this->_position = 0;
  }

  public function key() {
    return $this->_position;
  }
}