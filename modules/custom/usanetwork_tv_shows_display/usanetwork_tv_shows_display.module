<?php

/**
 * Implements hook_field_formatter_info().
 */
function usanetwork_tv_shows_display_field_formatter_info() {
  return array(
    'usanetwork_tv_shows_display_entity_view' => array(
      'label' => t('TV Shows Featured'),
      'description' => t('Display the referenced entities rendered by entity_view() with custom display options.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'view_mode' => '',
        'view_mode_large' => '',
        'links' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function usanetwork_tv_shows_display_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'usanetwork_tv_shows_display_entity_view') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $options = array();
    if (!empty($entity_info['view modes'])) {
      foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
        $options[$view_mode] = $view_mode_settings['label'];
      }
    }

    if (count($options) > 1) {
      $element['view_mode'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('View mode'),
        '#default_value' => $settings['view_mode'],
      );
      $element['view_mode_large'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('View mode for large item'),
        '#default_value' => $settings['view_mode_large'],
      );
    }

    $element['links'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show links'),
      '#default_value' => $settings['links'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function usanetwork_tv_shows_display_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'usanetwork_tv_shows_display_entity_view') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $summary[] = t('Rendered as @mode', array('@mode' => isset($entity_info['view modes'][$settings['view_mode']]['label']) ? $entity_info['view modes'][$settings['view_mode']]['label'] : $settings['view_mode']));
    $summary[] = !empty($settings['links']) ? t('Display links') : t('Do not display links');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function usanetwork_tv_shows_display_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Let the entity reference module load data
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function usanetwork_tv_shows_display_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  // Check if first promo should be large
  $promo_large = reset(field_get_items($entity_type, $entity, 'field_usa_tv_promo_large'));
  $promo_large = (isset($promo_large['value']) && $promo_large['value']) ? true : false;

  switch ($display['type']) {
    case 'usanetwork_tv_shows_display_entity_view':
      foreach ($items as $delta => $item) {
        // Protect ourselves from recursive rendering.
        static $depth = 0;
        $depth++;
        if ($depth > 20) {
          throw new EntityReferenceRecursiveRenderingException(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array('@entity_type' => $entity_type, '@entity_id' => $item['target_id'])));
        }

        $entity = clone $item['entity'];
        unset($entity->content);
        // Select view mode according promo large option and item delta
        $view_mode = ($promo_large && $delta == 0) ? $settings['view_mode_large'] : $settings['view_mode'];
        $result[$delta] = entity_view($field['settings']['target_type'], array($item['target_id'] => $entity), $view_mode, $langcode, FALSE);

        if (empty($settings['links']) && isset($result[$delta][$field['settings']['target_type']][$item['target_id']]['links'])) {
          $result[$delta][$field['settings']['target_type']][$item['target_id']]['links']['#access'] = FALSE;
        }
        $depth = 0;
      }
      break;
  }

  $result['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'usanetwork_tv_shows_display') . '/usanetwork_tv_shows_display.js',
  );

  return $result;
}

/**
 * Implements hook_preprocess_field()
 */
function usanetwork_tv_shows_display_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_name'] == 'field_usa_tv_promo') {
    $field = &$variables['element'];
    $field['#attached']['js'][] = drupal_get_path('module', 'usanetwork_tv_shows_display') . '/usanetwork_tv_shows_display.js';
    $entity = $field['#object'];

    // Check if first promo should be large
    $promo_large = reset(field_get_items($field['#entity_type'], $entity, 'field_usa_tv_promo_large'));
    $promo_large = (isset($promo_large['value']) && $promo_large['value']) ? true : false;
    if ($promo_large) {
      // Add class to the field
      $variables['classes_array'][] = 'first-promo-large';
    }
  }
}

/**
 * Implements hook_node_view()
 */
function usanetwork_tv_shows_display_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'tv_show') {
    $promo_rows = field_get_items('node', $node, 'field_usa_tv_promo_rows');
    if ($promo_rows && !empty($promo_rows)) {
      $promo_rows = reset($promo_rows);
      // Provide field value to javascript
      drupal_add_js(array(
        'usanetwork_tv_shows' => array(
          'promo_rows' => $promo_rows['value'],
        ),
      ), array('type' => 'setting'));
    }
  }
}