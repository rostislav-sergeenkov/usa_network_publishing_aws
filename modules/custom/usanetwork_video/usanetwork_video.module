<?php
/**
 * @file
 * Code for the usanetwork_video feature.
 */

include_once 'usanetwork_video.features.inc';

/**
 * Implementation of hook_menu().
 */
function usanetwork_video_menu() {
  // global videos page
  $items['videos'] = array(
    'title' => t('Videos'),
    'page callback' => 'usanetwork_video_global_videos_page',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function usanetwork_video_block_info() {
  $blocks = array();
  $blocks['usa_global_video_nav'] = array(
    'info' => t('USA: global video navigation'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['usa_show_video_nav'] = array(
    'info' => t('USA: show video navigation'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['usa_video_views'] = array(
    'info' => t('USA: video views'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function usanetwork_video_block_view($delta) {
  $block = array();
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'usa_global_video_nav':
      $block['subject'] = '';
      $block['content'] = usanetwork_video_global_nav();
      break;
    case 'usa_show_video_nav':
      $block['subject'] = '';
      $block['content'] = usanetwork_video_show_nav();
      break;
    case 'usa_video_views':
      $block['subject'] = '';
      $block['content'] = usanetwork_video_views();
      break;
  }

  return $block;
}

/**
 * Generates the global video navigation
 */
function usanetwork_video_global_nav() {
  $output = '';
  $items = array();
  $items[] = array('data' => '<span>all shows</span>', 'class' => array('all-shows'));
  $lang = LANGUAGE_NONE;

  $query = new EntityFieldQuery();

  // Fetch all the video node associated with any show
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('usa_video', 'usa_tve_video'))
    ->propertyCondition('status', 1)
    ->fieldCondition('field_show', 'target_id', 'NULL', '!=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $videos = entity_load('node', array_keys($result['node']));

    $nids = array();
    foreach ($videos as $video) {
      // Get all the unique tv shows nodes
      if (!in_array($video->field_show[$lang][0]['target_id'], $nids)) {
        $nids[] = $video->field_show[$lang][0]['target_id'];
        $show = array_values(entity_load('node', array($video->field_show[$lang][0]['target_id'])));

        // Add all the published tv show nodes
        if (isset($show[0]) && !empty($show[0])) {
          $title = '<span>'.$show[0]->field_display_title[$lang][0]['value'].'</span>';
          $path = drupal_get_path_alias('node/'.$video->field_show[$lang][0]['target_id'].'/videos');
          $items[0]['children'][] = l($title, $path, array('html' => true));
        }
      }
    }
  }
  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('shows'))));
  $items = array();

  $items[] = array('data' => l('<span>full episodes</span>', 'videos/full-episodes', array('html' => true)), 'class' => array('full-episodes'));
  $items[] = array('data' => l('<span>whats hot</span>', 'videos/whats-hot', array('html' => true)), 'class' => array('whats-hot'));

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('categories'))));
  return $output;
}

/**
 * Generates the show video navigation
 */
function usanetwork_video_show_nav() {
  $output = '';
  $items = array();
  $arg = arg();
  $lang = LANGUAGE_NONE;
  $node = node_load($arg[1]);

  if (isset($node->nid)) {
    $cpath = drupal_get_path_alias('node/'.$node->nid);
  } else {
    $cpath = current_path();
  }

  // return empty block if the url is invalid
  if (!isset($arg[1]) || empty($arg[1])) {
    return '';
  }
  $query = new EntityFieldQuery();

  // Fetch all the video node associated with any show
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('usa_video', 'usa_tve_video'))
    ->propertyCondition('status', 1)
    ->fieldCondition('field_show', 'target_id', 'NULL', '!=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $videos = entity_load('node', array_keys($result['node']));

    $nids = array();
    foreach ($videos as $video) {
      // Get all the unique tv shows nodes
      if (!in_array($video->field_show[$lang][0]['target_id'], $nids)) {
        $nids[] = $video->field_show[$lang][0]['target_id'];
        $show = array_values(entity_load('node', array($video->field_show[$lang][0]['target_id'])));

        // Add all the published tv show nodes
        if (isset($show[0]) && !empty($show[0])) {
          $title = '<span>'.$show[0]->field_display_title[$lang][0]['value'].'</span>';
          $path = drupal_get_path_alias('node/'.$video->field_show[$lang][0]['target_id'].'/videos');
          if ($node->field_show[$lang][0]['target_id'] == $video->field_show[$lang][0]['target_id']) {
            $items['data'] = $title;
            $items['class'] = array(str_replace(' ', '-', strtolower($show[0]->field_display_title[$lang][0]['value'])));

            $items['children'][] = array('data' => l($title, $path, array('html' => true)), 'class' => array('active'));
          } else  {
            $items['children'][] = l($title, $path, array('html' => true));
          }
        }
      }
    }
  }

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('shows'))));
  $items = array();

  $classes = array('full-episodes');
  if ((isset($arg[2]) && $arg[2] == 'full-episodes') || 
    (isset($node->field_full_episode[$lang][0]['value']) && $node->field_full_episode[$lang][0]['value'] == 1)) {
    $classes[] = 'active';
  }
  $items[] = array('data' => l('<span>full episodes</span>', $cpath.'/full-episodes', array('html' => true)), 'class' => $classes); 

  $active_tids = array();
  if (isset($node->field_usa_video_terms[$lang][0]['target_id']) || !empty($node->field_usa_video_terms[$lang][0]['target_id'])) {
    foreach ($node->field_usa_video_terms[$lang] as $tids) {
      $parent = array_values(taxonomy_get_parents($tids['target_id']));
      if (isset($parent[0]) && $parent[0]->name == 'Series') { 
        $term = taxonomy_term_load($tids['target_id']);
      }
      $active_tids[] = $tids['target_id'];
    }

    $terms = taxonomy_get_children($term->tid, $term->vid);
    $i=1;
    foreach ($terms as $term1) {
      $class = array(str_replace(' ', '-', strtolower($term1->name)));
      if (!in_array('active', $classes) && ((isset($_GET['tid']) && $_GET['tid'] == $term1->tid) || in_array($term1->tid, $active_tids))) {
        $class[] = 'active';
      }
      $terms1 = taxonomy_get_children($term1->tid, $term1->vid);
      if ($i == 3) {
        $items[$i] = array('data' => '<span>more</span>', 'class' => array('more'));
      } 
      if ($i >= 3) {
        $items[3]['children'][$i-3] = array('data' => l('<span>'.$term1->name.'</span>', $cpath, array('query' => array('tid' => $term1->tid), 'html' => true)), 'class' => $class);
        foreach ($terms1 as $term2) {
          if ((isset($_GET['tid']) && $_GET['tid'] == $term2->tid) || in_array($term2->tid, $active_tids)) {
            $class[] = 'active';
          }
          $class = array(str_replace(' ', '-', strtolower($term2->name)));
          $items[3]['children'][$i-3]['children'][] = array('data' => l('<span>'.$term2->name.'</span>', $cpath, array('query' => array('tid' => $term2->tid), 'html' => true)), 'class' => $class);
        }
      } else {
        $items[$i] = array('data' => l('<span>'.$term1->name.'</span>', $cpath, array('query' => array('tid' => $term1->tid), 'html' => true)), 'class' => $class);
        $first = true;
        foreach ($terms1 as $term2) {
          if ((isset($_GET['tid']) && $_GET['tid'] == $term2->tid) || in_array($term2->tid, $active_tids)) {
            $class[] = 'active';
          }
          $class = array(str_replace(' ', '-', strtolower($term2->name)));
          $items[$i]['children'][] = array('data' => l('<span>'.$term2->name.'</span>', $cpath, array('query' => array('tid' => $term2->tid), 'html' => true)), 'class' => $class);
          if ($first) {
            $first = false;
            $items[$i]['class'][] = 'more';
          }
        }
      }
      $i++;
    }
  }

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('categories'))));
  return $output;
}

/**
 * renders the correct video view based upon the argument
 */
function usanetwork_video_views() {
  $arg = arg();
  $output = '';
  $lang = LANGUAGE_NONE;
  $tid = isset($_GET['tid']) ? $_GET['tid'] : 0;
   
  if (!empty($tid)) {
    $output = views_embed_view('usa_video', 'category_videos', $tid);
  } else if ($arg[0] == 'videos') {
    if (!isset($arg[1]) || (isset($arg[1]) && $arg[1] == 'full-episodes')) {
      $output = views_embed_view('usa_video', 'global_full_episode');
    } else if ($arg[1] == 'whats-hot') {
      $output = views_embed_view('whats_hot', 'whats_hot');
    }
  } else if ($arg[0] == 'node' && isset($arg[1]) && is_numeric($arg[1])) {
    $node = node_load($arg[1]);

    // video node with a show association
    if (isset($node->field_show[$lang][0]['target_id']) && !empty($node->field_show[$lang][0]['target_id'])) {
      $show_nid = $node->field_show[$lang][0]['target_id'];
      $full_episode = isset($node->field_full_episode[$lang][0]['value']) ? $node->field_full_episode[$lang][0]['value'] : 0; 
      if ($full_episode || (isset($arg[2]) && $arg[2] == 'full-episodes')) {
        $output = views_embed_view('usa_video', 'show_full_episode', $show_nid);
      } else {
        foreach ($node->field_usa_video_terms[$lang] as $tids) {
          $parent = array_values(taxonomy_get_parents($tids['target_id']));
          if (isset($parent[0]) && $parent[0]->name != 'Series') { 
            $term = taxonomy_term_load($tids['target_id']);
            break;
          }
        }
        if (isset($term->tid) && !empty($term->tid)) {
          $output = views_embed_view('usa_video', 'category_videos', $term->tid);
        }
        if (isset($node->field_usa_video_terms[$lang][0]['target_id'])) {
          $output = views_embed_view('usa_video', 'category_videos', $node->field_usa_video_terms[$lang][0]['target_id']);
        }
      } 
    } else if (isset($node->field_usa_video_terms[$lang][0]['target_id'])) {
      $output = views_embed_view('usa_video', 'category_videos', $node->field_usa_video_terms[$lang][0]['target_id']);
    }
  }

  //TODO: change the whats hot logic with queues api
  if (empty($output)) {
    $output = views_embed_view('whats_hot', 'whats_hot');
  }

  return $output;
}

/**
 * Renders the global video page
 */
function usanetwork_video_global_videos_page() {
  return views_embed_view('usa_video', 'global_latest_full_episode_video');
}


/**
 * Helper function that will load file IDs from a video node item's GUID.
 * we stole this method from pub_theplatform
 * altered to dynamically pass guid and feed url
 * we pass these values via our ds layout which lives in the theme 
 * aurora_usa/ds_layouts/usa_video/usa_home.tpl.php
 *
 * @TODO: have someone smarter than suzi look at this :)
 *
 */
function _usanetwork_video_platform_get_file_id($guid, $feed_url) {
  require_once('usanetwork_video_theplatform.api.inc');

  $api = new usaPlatformAPIRequest($feed_url);

  //  Load the file info for the item we're trying to view, and cur us down to the media$content items.
  $file_info = $api->addField('media:content')->setID($guid)->execute();
  
  //  Handle error conditions, we may have nothing come back.
  if(!is_array($file_info) || empty($file_info) || !is_object($file_info[0]) || !isset($file_info[0]->{'media$content'}))
    return False;
  $file_info = $file_info[0]->{'media$content'};

  //  Run through everything and grab the first video in the feed.
  foreach($file_info as $file) {
    // our feed does not have this
    //if(in_array('Video', $file->{'plfile$assetTypes'}))
    //  break;
  }

  //  Extract the file id from the URL
  list($file_id) = explode('?', $file->{'plfile$url'}); //  The part before the ?
  $file_id = explode('/', $file_id);  //  Get the parts of the url.
  $file_id = array_pop($file_id); //  And just last part of the URL's path.

  return $file_id;
}
