<?php
/**
 * @file
 * Code for the usanetwork_video feature.
 */

include_once 'usanetwork_video.features.inc';

/**
 * Implementation of hook_menu().
 */
function usanetwork_video_menu() {
  // global videos page
  $items['videos'] = array(
    'title' => t('Videos'),
    'page callback' => 'usanetwork_video_global_videos_page',
    'access arguments' => array('access content'),
  );
  $items['admin/usanetwork/video'] = array(
    'title' => t('USA videos'),
    'description' => t('debug helpers for USA Network TVE and MPX videos.'),
    'access arguments' => array('administer usanetwork'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'management',
  );
  $items['admin/usanetwork/video/debug/debug-titles'] = array(
    'title' => t('Video shows and categories'),
    'description' => t('Video Debug - shows and categories for MPX and TVE'),
    'page callback' => 'usanetwork_video_admin_debug_titles',
    'access arguments' => array('administer usanetwork'),
  );
  $items['admin/usanetwork/video/debug/debug-feeds'] = array(
    'title' => t('Video feeds'),
    'description' => t('Video Debug - links for checking the feeds'),
    'page callback' => 'usanetwork_video_admin_debug_feeds',
    'access arguments' => array('administer usanetwork'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function usanetwork_video_block_info() {
  $blocks = array();
  $blocks['usa_global_video_nav'] = array(
    'info' => t('USA: global video navigation'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['usa_show_video_nav'] = array(
    'info' => t('USA: show video navigation'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['usa_video_views'] = array(
    'info' => t('USA: video views'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function usanetwork_video_block_view($delta) {
  $block = array();
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'usa_global_video_nav':
      $block['subject'] = '';
      $block['content'] = usanetwork_video_global_nav();
      break;
    case 'usa_show_video_nav':
      $block['subject'] = '';
      $block['content'] = usanetwork_video_show_nav();
      break;
    case 'usa_video_views':
      $block['subject'] = '';
      $block['content'] = usanetwork_video_views();
      break;
  }

  return $block;
}

/**
 * Generates the global video navigation
 */
function usanetwork_video_global_nav() {
  $output = '';
  $items = array();
  $items[] = array('data' => '<span>select a show</span>', 'class' => array('all-shows'));
  $lang = LANGUAGE_NONE;
  $arg = arg();
  if (isset($arg[1]) && !empty($arg[1])) {
    $node = node_load($arg[1]);
  }

  $query = new EntityFieldQuery();

  // Fetch all the video node associated with any show
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('usa_video', 'usa_tve_video'))
    ->propertyCondition('status', 1)
    ->fieldCondition('field_show', 'target_id', 'NULL', '!=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $videos = entity_load('node', array_keys($result['node']));

    $nids = array();
    foreach ($videos as $video) {
      // Get all the unique tv shows nodes
      if (!in_array($video->field_show[$lang][0]['target_id'], $nids)) {
        $nids[] = $video->field_show[$lang][0]['target_id'];
        $show = array_values(entity_load('node', array($video->field_show[$lang][0]['target_id'])));

        // Add all the published tv show nodes
        if (isset($show[0]) && !empty($show[0])) {
          $title = '<span>'.$show[0]->field_display_title[$lang][0]['value'].'</span>';
          $path = drupal_get_path_alias('node/'.$video->field_show[$lang][0]['target_id'].'/videos');
          $items[0]['children'][] = l($title, $path, array('html' => true));
        }
      }
    }
  }

  // sort the shows alphabetically
  asort($items[0]['children']);

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('shows'))));
  $items = array();

  if (($arg[0] == 'videos' && !isset($arg[1])) || (isset($arg[1]) && $arg[1] == 'full-episodes') ||
    (isset($node->field_full_episode[$lang][0]['value']) && !empty($node->field_full_episode[$lang][0]['value']))) {
    $items[] = array('data' => l('<span>full episodes</span>', 'videos/full-episodes', array('html' => true)), 'class' => array('full-episodes', 'active'));
    $items[] = array('data' => l("<span>what's hot</span>", 'videos/whats-hot', array('html' => true)), 'class' => array('whats-hot'));
  } else {
    $items[] = array('data' => l('<span>full episodes</span>', 'videos/full-episodes', array('html' => true)), 'class' => array('full-episodes'));
    $items[] = array('data' => l('<span>whats hot</span>', 'videos/whats-hot', array('html' => true)), 'class' => array('whats-hot', 'active'));
  }

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('categories'))));
  return $output;
}

/**
 * Generates the show video navigation
 */
function usanetwork_video_show_nav() {
  $output = '';
  $items = array();
  $arg = arg();
  $lang = LANGUAGE_NONE;
  $node = node_load($arg[1]);
  $tid = isset($_GET['tid']) ? $_GET['tid'] : 0;

  if (isset($node->nid)) {
    $cpath = drupal_get_path_alias('node/'.$node->nid);
  } else {
    $cpath = current_path();
  }

  // return empty block if the url is invalid or global video url
  if (!isset($arg[1]) || empty($arg[1]) || !isset($node->field_show[$lang][0]['target_id']) || empty($node->field_show[$lang][0]['target_id'])) {
    return '';
  }
  $query = new EntityFieldQuery();

  // Fetch all the video node associated with any show
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('usa_video', 'usa_tve_video'))
    ->propertyCondition('status', 1)
    ->fieldCondition('field_show', 'target_id', 'NULL', '!=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $videos = entity_load('node', array_keys($result['node']));

    $nids = array();
    foreach ($videos as $video) {
      // Get all the unique tv shows nodes
      if (!in_array($video->field_show[$lang][0]['target_id'], $nids)) {
        $nids[] = $video->field_show[$lang][0]['target_id'];
        $show = array_values(entity_load('node', array($video->field_show[$lang][0]['target_id'])));

        // Add all the published tv show nodes
        if (isset($show[0]) && !empty($show[0])) {
          $title = '<span>'.$show[0]->field_display_title[$lang][0]['value'].'</span>';
          $path = drupal_get_path_alias('node/'.$video->field_show[$lang][0]['target_id'].'/videos');
          if ($node->field_show[$lang][0]['target_id'] == $video->field_show[$lang][0]['target_id']) {
            $items[0]['data'] = $title;
            $items[0]['class'] = array(str_replace(' ', '-', strtolower($show[0]->field_display_title[$lang][0]['value'])));
            $items[0]['children'][] = l($title, $path, array('html' => true));
          } else  {
            $items[0]['children'][] = l($title, $path, array('html' => true));
          }
        }
      }
    }
  }

  // sort the shows alphabetically
  asort($items[0]['children']);

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('shows'))));
  $items = array();

  $classes = array('full-episodes');
  if (empty($tid) && ((isset($arg[2]) && $arg[2] == 'full-episodes') ||
    (isset($node->field_full_episode[$lang][0]['value']) && !empty($node->field_full_episode[$lang][0]['value'])))) {
    $classes[] = 'active';
  }

  // show the full episodes links iff there are full episodes for that tv show
  if (_usanetwork_video_full_episodes_exist($node->field_show[$lang][0]['target_id'])) {
    $items[] = array('data' => l('<span>full episodes</span>', $cpath.'/full-episodes', array('html' => true)), 'class' => $classes);
  }

  $active_tids = array();
  if (isset($node->field_usa_video_terms[$lang][0]['target_id']) && !empty($node->field_usa_video_terms[$lang][0]['target_id'])) {
    foreach ($node->field_usa_video_terms[$lang] as $tids) {
      $parent = array_values(taxonomy_get_parents($tids['target_id']));
      if (isset($parent[0]) && $parent[0]->name == 'Series') {
        $term = taxonomy_term_load($tids['target_id']);
      }
      $active_tids[] = $tids['target_id'];
    }

    if (!isset($term->tid)) {
      $parents = array_values(taxonomy_get_parents_all($node->field_usa_video_terms[$lang][0]['target_id']));
      foreach ($parents as $i => $pterm) {
        if (isset($pterm->name) && $pterm->name == 'Series') {
          $term = $parents[$i-1];
          break;
        }
      }
    }

    if (isset($term->tid)) {
      $terms = taxonomy_get_children($term->tid, $term->vid);
      $i=1;
      foreach ($terms as $term1) {
        $class = array(str_replace(' ', '-', strtolower($term1->name)));
        if (!in_array('active', $classes) && (($tid == $term1->tid) || in_array($term1->tid, $active_tids))) {
          $class[] = 'active';
        }
        $terms1 = taxonomy_get_children($term1->tid, $term1->vid);
        if ($i == 4) {
          $items[$i] = array('data' => '<span>more</span>', 'class' => array('more'));
        }
        if ($i >= 4) {
          $items[4]['children'][$i-4] = array('data' => l('<span>'.$term1->name.'</span>', $cpath, array('query' => array('tid' => $term1->tid), 'html' => true)), 'class' => $class);
          foreach ($terms1 as $term2) {
            if ($tid == $term2->tid || in_array($term2->tid, $active_tids)) {
              $class[] = 'active';
            }
            $class = array(str_replace(' ', '-', strtolower($term2->name)));
            $items[4]['children'][$i-4]['children'][] = array('data' => l('<span>'.$term2->name.'</span>', $cpath, array('query' => array('tid' => $term2->tid), 'html' => true)), 'class' => $class);
          }
        } else {
          $items[$i] = array('data' => l('<span>'.$term1->name.'</span>', $cpath, array('query' => array('tid' => $term1->tid), 'html' => true)), 'class' => $class);
          $first = true;
          foreach ($terms1 as $term2) {
            if ($tid == $term2->tid || in_array($term2->tid, $active_tids)) {
              $class[] = 'active';
            }
            $class = array(str_replace(' ', '-', strtolower($term2->name)));
            $items[$i]['children'][] = array('data' => l('<span>'.$term2->name.'</span>', $cpath, array('query' => array('tid' => $term2->tid), 'html' => true)), 'class' => $class);
            if ($first) {
              $first = false;
              $items[$i]['class'][] = 'more';
            }
          }
        }
        $i++;
      }
    }
  }

  $output .= theme('item_list', array('items' => $items, 'attributes' => array('class' => array('categories'))));
  return $output;
}

/**
 * renders the correct video view based upon the argument
 */
function usanetwork_video_views() {
  $arg = arg();
  $output = '';
  $lang = LANGUAGE_NONE;
  $tid = isset($_GET['tid']) ? $_GET['tid'] : 0;

  // we need these js files and headers for video player integration
  drupal_add_js(drupal_get_path('module', 'usanetwork_video') . '/js/tpPdkController.js');
   $meta_video_tag = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' =>  'tp:EnableExternalController',
      'content' => 'true',
    )
  );
  // Add header meta tag for video integration
  drupal_add_html_head($meta_video_tag, 'meta_video_tag');

  if (!empty($tid)) {
    $output = views_embed_view('usa_video', 'category_videos', $tid);
  } else if ($arg[0] == 'videos') {
    if (!isset($arg[1]) || (isset($arg[1]) && $arg[1] == 'full-episodes')) {
      $output = views_embed_view('usa_video', 'global_full_episode');
    } else if ($arg[1] == 'whats-hot') {
      $output = views_embed_view('whats_hot', 'whats_hot');
    }
  } else if ($arg[0] == 'node' && isset($arg[1]) && is_numeric($arg[1])) {
    $node = node_load($arg[1]);

    // video node with a show association
    if (isset($node->field_show[$lang][0]['target_id']) && !empty($node->field_show[$lang][0]['target_id'])) {
      $show_nid = $node->field_show[$lang][0]['target_id'];
      $full_episode = isset($node->field_full_episode[$lang][0]['value']) ? $node->field_full_episode[$lang][0]['value'] : 0;
      if ($full_episode || (isset($arg[2]) && $arg[2] == 'full-episodes')) {
        $output = views_embed_view('usa_video', 'show_full_episode', $show_nid);
      } else {
        foreach ($node->field_usa_video_terms[$lang] as $tids) {
          $parent = array_values(taxonomy_get_parents($tids['target_id']));
          if (isset($parent[0]) && $parent[0]->name != 'Series') {
            $term = taxonomy_term_load($tids['target_id']);
            break;
          }
        }
        if (isset($term->tid) && !empty($term->tid)) {
          $output = views_embed_view('usa_video', 'category_videos', $term->tid);
        }

        // the last term is the correct term id of the category
        $count = count($node->field_usa_video_terms[$lang]);
        if (empty($output) && isset($node->field_usa_video_terms[$lang][$count-1]['target_id'])) {
          $output = views_embed_view('usa_video', 'category_videos', $node->field_usa_video_terms[$lang][$count-1]['target_id']);
        }
      }
    } else {
      $query = new EntityFieldQuery();

      // Fetch the what's hot queue id
      $query->entityCondition('entity_type', 'queues')
        ->entityCondition('bundle', array('video_queue'))
        ->propertyCondition('title', "What's Hot")
        ->range(0, 1);

      $result = $query->execute();
      if (isset($result['queues'])) {
        $qid = array_keys($result['queues']);

        $queue = db_select('field_data_field_qt_node', 'q')
          ->fields('q', array('entity_id'))
          ->condition('entity_id', $qid[0], '=')
          ->condition('field_qt_node_target_id', $node->nid, '=')
          ->execute()
          ->fetchField();

        if (!empty($queue)) {
          $output = views_embed_view('whats_hot', 'whats_hot');
        }
      }
    }

    if (isset($node->field_usa_video_terms[$lang])) {
      // the last term is the correct term id of the category
      $count = count($node->field_usa_video_terms[$lang]);
      if (empty($output) && isset($node->field_usa_video_terms[$lang][$count-1]['target_id'])) {
        $output = views_embed_view('usa_video', 'category_videos', $node->field_usa_video_terms[$lang][$count-1]['target_id']);
      }
    }
  }

  return $output;
}

/**
 * Renders the global video page
 */
function usanetwork_video_global_videos_page() {
  return views_embed_view('usa_video', 'global_latest_full_episode_video');
}


/**
 * Helper function that will load file IDs from a video node item's GUID.
 * we stole this method from pub_theplatform
 * altered to dynamically pass guid and feed url
 * we pass these values via our ds layout which lives in the theme
 * aurora_usa/ds_layouts/usa_video/usa_home.tpl.php
 *
 */
function _usanetwork_video_platform_get_file_id($guid, $feed_url) {
  require_once('usanetwork_video_theplatform.api.inc');

  $api = new usaPlatformAPIRequest($feed_url);

  //  Load the file info for the item we're trying to view, and cur us down to the media$content items.
  $file_info = $api->addField('media:content')->setID($guid)->execute();

  //  Handle error conditions, we may have nothing come back.
  if(!is_array($file_info) || empty($file_info) || !is_object($file_info[0]) || !isset($file_info[0]->{'media$content'}))
    return False;

  $file_info = $file_info[0]->{'media$content'};

  // Run through everything and grab the MPEG4 video with the highest bit rate from the feed.
  $highest_bit_rate = 0;
  $selected_video = $file_info[0];
  foreach($file_info as $file) {
    if (isset($file->{'plfile$format'}) && $file->{'plfile$format'} == 'MPEG4' &&
        isset($file->{'plfile$bitrate'}) && $file->{'plfile$bitrate'} > $highest_bit_rate) {
      $highest_bit_rate = $file->{'plfile$bitrate'};
      $selected_video = $file;
    }
    // our feed does not have this
    //if(in_array('Video', $file->{'plfile$assetTypes'}))
    //  break;
  }

  //  Extract the file id from the URL
  list($file_id) = explode('?', $selected_video->{'plfile$url'}); //  The part before the ?
  $file_id = explode('/', $file_id);  //  Get the parts of the url.
  $file_id = array_pop($file_id); //  And just last part of the URL's path.

  return $file_id;
}

/**
 * Helper function to check if a show has full episodes
 */
function _usanetwork_video_full_episodes_exist($show_nid) {
  if (empty($show_nid)) {
    return false;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', array('usa_video'));
  $query->propertyCondition('status', 1);
  $query->fieldCondition('field_show', 'target_id', $show_nid);
  $query->fieldCondition('field_full_episode', 'value', '1', '=');
  $query->fieldOrderBy('field_video_air_date', 'value', 'desc');
  $query->count();
  // execute the query
  $count = intval($query->execute());

  return  $count > 0 ? true : false;
}

/**
 * Menu callback of video categories and titles
 */
function usanetwork_video_admin_debug_titles() {
  $render = array();
  $type = 'tv_show';
  $nodes = node_load_multiple(array(), array('type' => $type));
  foreach($nodes as $shows) {
    $showtitles[] = '<tr><td>' . $shows->title . '</td>';
  }
  asort($showtitles);

  $render['vid'] = array(
    '#prefix' => '<div style="clear: both;"><h1>' . t('Both lists should match - show or term titles in MPX or TVE may need editing') . '</h1>',
    '#suffix' => '</div>',
  );
  $render['vid']['shows'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="shows" style="float: left;display: block; margin-right: 20px; padding-right: 20px; border-right: #ccc solid 1px;"><h2>' . t('Show titles in the CMS - full title field') . '</h2>',
    '#markup' => theme('item_list', array('items' => $showtitles)),
    '#suffix' => '</div>',
  );
  $voc = taxonomy_vocabulary_machine_name_load('usa_video_terms');
  $parentterm = taxonomy_get_term_by_name('series');
  foreach ($parentterm as $series => $tid) {
    $series_tid[] = $series;
  }
  $terms = taxonomy_get_tree($voc->vid, $parent = $series_tid[0], $max_depth = 1, $load_entities = FALSE);
  foreach ($terms as $termtitle) {
    $term_titles[] = $termtitle->name;
  }
  asort($term_titles);

  $render['vid']['terms'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="terms" style="float: left;display: block; margin-right: 20px"><h2>' . t('Terms listed under MPX and TVE SERIES category') . '</h2>',
    '#markup' => theme('item_list', array('items' => $term_titles)),
    '#suffix' => '</div>',
  );

  return $render;
}


/**
 * Menu callback of video feed debug helpers
 */
function usanetwork_video_admin_debug_feeds() {
  $render = array();
  $updated_date = date('c', strtotime('-1 hour'));

  // mpx debug
  $mpx_url = variable_get('usanetwork_theplatform_mpx_feed_url', 'http://feed.theplatform.com/f/OyMl-B/UPo0Hq');
  // not cron
  $mpx_url_ingest = $mpx_url . '?range=1-1000';
  // cron
  $mpx_url_cron = $mpx_url . '?byUpdated=' . $updated_date . '~' . '&sort=updated|desc&range=1-100';
//http://feed.theplatform.com/f/OyMl-B/8IyhuVgUXDd_?byUpdated=2013-05-07T00:00:00Z~&sort=updated|desc&range=1-10&fields=guid,title,description,media:,:fullEpisode&fileFields=url,bitrate&byCustomValue={fullEpisode}{false}&byCategories=Series/Graceland
  $mpx_url_test = $mpx_url . '?sort=updated|desc&range=1-100&byCategories=Series/Graceland';
  $mpx_url_test2 = $mpx_url . '?sort=updated|desc&range=1-100&&byTitle=Commentary: Hair Of The Dog';

  // tve debug
  $tve_url = variable_get('usanetwork_theplatform_tve_feed_url', 'http://feed.theplatform.com/f/HNK2IC/v_LMXFxZY7Z2');
  // not cron
  $tve_url_ingest = $tve_url . '?range=1-500&byCustomValue={fullEpisode}{true},{entitlement}{auth}';
  // Append query parameters to only retrieve video data updated within the
  // last 24 hours.
  $tve_url_cron = $tve_url . '?&byCustomValue={fullEpisode}{true},{entitlement}{auth}&byUpdated=' . $updated_date . '~&sort=updated|desc&range=1-100';

  // mpx
  $render['debug']['mpx'] = array(
    '#type' => 'markup',
    '#prefix' => '<h1>' . t('MPX') . '</h1>',
    '#suffix' => '<br /><br />',
  );
  $render['debug']['mpx']['cron'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>' . t('MPX feed during cron') . '</h3>',
    '#markup' => l($mpx_url_cron, $mpx_url_cron),
    '#suffix' => '<p>' . t('Limited to elements updated within the last hour') . '</p>',
  );
  $render['debug']['mpx']['ingest'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>' . t('MPX feed for first migration') . '</h3>',
    '#markup' => l($mpx_url_ingest, $mpx_url_ingest),
  );
  $render['debug']['mpx']['examples'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>' . t('filter by show') . '</h3>',
    '#markup' => l($mpx_url_test, $mpx_url_test),
    '#suffix' => '<p>' . t('added &byCategories=Series/Graceland to the end of the url to filter by "Graceland" shows') . '</p>',

  );
  $render['debug']['mpx']['examples_more'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>' . t('filter by title') . '</h3>',
    '#markup' => l($mpx_url_test2, $mpx_url_test2),
    '#suffix' => '<p>' . t('added "&byTitle=Commentary: Hair Of The Dog" to the end of the url to filter by a specific title') . '</p>',

  );

  $render['debug']['tve'] = array(
    '#type' => 'markup',
    '#prefix' => '<h1>' . t('TVE') . '</h1>',
    '#suffix' => '<br /><br /><br />',
  );
  $render['debug']['tve']['cron'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>' . t('TVE feed during cron') . '</h3>',
    '#markup' => l($tve_url_cron, $tve_url_cron),
    '#suffix' => '<p>' . t('Limited to elements updated within the last hour') . '</p>',
  );
  $render['debug']['tve']['ingest'] = array(
    '#type' => 'markup',
    '#prefix' => '<h3>' . t('TVE feed for first migration') . '</h3>',
    '#markup' => l($tve_url_ingest, $tve_url_ingest),
  );

  return $render;
}

