<?php

/**
 * @file
 * tve_auth module.
 *
 * Main TVE authentication flow functionality.
 */

define('TVE_AUTH_PREFIX_DRAFT', 'tve_auth_draft_');
define('TVE_AUTH_PREFIX_PUBLISHED', 'tve_auth_published_');
define('TVE_AUTH_WELCOME_WINDOW_ORIGINAL_TYPE', 'orig');
define('TVE_AUTH_WELCOME_WINDOW_AUTH_TYPE', 'auth');
define('TVE_AUTH_AUTH_FLOW_WITH_IDX', 'idx');
define('TVE_AUTH_AUTH_FLOW_WITHOUT_IDX', 'mvpd');
define('TVE_AUTH_STATUS_NOT_SAVED', t('Settings were never saved and published. Enter values, save them, and publish.'));
define('TVE_AUTH_STATUS_NOT_PUBLISHED', t('Settings are saved in draft state, but not published.'));
define('TVE_AUTH_STATUS_DIFFERENT', t('Draft and published settings are different. Fieldsets with different values are marked with asterisk (*).'));
define('TVE_AUTH_STATUS_EQUAL', t('Draft and published settings are equal.'));
define('TVE_AUTH_FLASH_HEADER_TITLE', "Oops! Your device isn't currently configured to play our videos.");
define('TVE_AUTH_FLASH_BODY_TEXT', 'Our native app is coming soon.');
define('TVE_AUTH_ADOBE_HEADER_TITLE', "Sorry! There's a problem.");
define('TVE_AUTH_ADOBE_BODY_TEXT', 'Sorry about that! The login is not available now. Please try again later.');
define('TVE_AUTH_GENERIC_ERROR_HEADER', "Sorry! There's a problem.");
define('TVE_AUTH_GENERIC_ERROR_TEXT', 'Sorry about that! We seem to be experiencing a technical issue right now. Please try again later.');
define('TVE_AUTH_FLASH_ERROR_IMAGE', 0);
define('TVE_AUTH_ADOBE_ERROR_IMAGE', 0);
define('TVE_AUTH_WISYWYG_FORMAT', 'wysiwyg_full');
define('TVE_AUTH_IMAGE_DIMENSION', '290x350');

// Include helper functions.
module_load_include('inc', 'tve_auth', 'tve_auth.helpers');
// Include TVE Auth features.
module_load_include('inc', 'tve_auth', 'tve_auth.features');

/**
 * Implements hook_menu().
 */
function tve_auth_menu() {
  $items['admin/tve'] = array(
    'title' => 'TVE',
    'description' => 'TVE settings',
    'access arguments' => array('administer tve'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_tve_auth_admin_form'),
    'file' => 'tve_auth.admin.inc',
  );
  // Settings for normal ("Welcome", "Step #1" etc.) modal windows.
  $items['admin/tve/modal-windows'] = array(
    'title' => 'Auth Flow',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Settings for error modal windows.
  $items['admin/tve/errors'] = array(
    'title' => 'Error messages',
    'description' => 'TVE Errors windows settings',
    'access arguments' => array('administer tve'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_tve_auth_errors_modal_windows_admin_form'),
    'file' => 'tve_auth.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['tve/errors/modal/%'] = array(
    'page callback' => '_tve_auth_error_modal_page_callback',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'delivery callback' => 'drupal_json_output',
    'file' => 'tve_auth.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tve_auth_permission() {
  return array(
    'administer tve' => array(
      'title' => t('Administer TVE authentication'),
      'description' => t('Perform administration tasks for TVE Auth Flow.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function tve_auth_block_info() {
  $blocks['tve_auth_header'] = array(
    'info' => t('TVE Sign In Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'region' => 'header',
    'status' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tve_auth_block_view($delta = '') {
  $block = array();
  if ('tve_auth_header' == $delta) {
    $block['content'] = theme('tve_auth_signin_menu');
  }

  return $block;
}

/**
 * Implements hook_library().
 */
function tve_auth_library() {
  $items['tve_vendors'] = array(
    'title' => t('TVE core'),
    'version' => '1.0',
    'js' => array(
      libraries_get_path('tve-core') . '/dist/tve-core.js' => array(),
    ),
  );

  $path_prefix = drupal_get_path('module', 'tve_auth');

  $items['tve_auth'] = array(
    'title' => t('TVE Auth'),
    'version' => '1.0',
    'js' => array(
      $path_prefix . '/js/tve-auth.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      'http://pdk.theplatform.com/pdk/tpPdkController.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/services/idx-service.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/services/auth-service.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/services/errors-service.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/services/helper.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/services/modal-window.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/services/data-provider.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/directives/adobe-pass-container.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/directives/screen-size.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/directives/sign-in-button.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/directives/tve-player-directive.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/directives/reflow-directive.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/directives/ng-html-unsafe-directive.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/controllers/modal/welcome-controller.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/controllers/modal/errors-controller.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/controllers/modal/adobe-pass-controller.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/controllers/modal/k2-controller.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
      $path_prefix . '/js/controllers/modal/login-controller.js' => array(
        'scope' => 'footer',
        'weight' => -1,
      ),
    ),
  );

  if (!_tve_auth_tve_theme_exists()) {
    // Add pre-compiled CSS if there is no TVE-based (or parent "TVE")
    // theme found.
    $css_path = $path_prefix . '/css/auth-modals.css';
    $items['tve_auth']['css'][$css_path] = array(
      'type' => 'file',
    );
  }

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function tve_auth_page_alter(&$page) {
  if (path_is_admin(current_path())) {
    // Prevent from adding extra js and css files for admin area.
    return;
  }

  _tve_auth_add_page_js_settings();

  // Attach hidden modal windows to the bottom of the page.
  $auth_modal_windows_html = theme('tve_auth_signin_blocks');
  $page['page_bottom']['tve_auth_modal_windows'] = array(
    '#markup' => $auth_modal_windows_html,
  );

  $page['page_bottom']['tve_auth'] = array(
    '#attached' => array(
      'library' => array(
        array('tve_auth', 'tve_vendors'),
        array('tve_auth', 'tve_auth'),
        array('system', 'jquery.cookie'),
      ),
    ),
  );
}

/**
 * Adds TVE Auth specific JS settings.
 */
function _tve_auth_add_page_js_settings() {
  // Array of saved and published auth flow settings.
  $variables = _tve_auth_get_published_variables();

  $auth_flow = isset($variables['auth_settings']['auth_flow']) ?
    $variables['auth_settings']['auth_flow'] :
    TVE_AUTH_AUTH_FLOW_WITH_IDX;

  $window_type = isset($variables['welcome_modal']['variant']) ?
    $variables['welcome_modal']['variant'] :
    TVE_AUTH_WELCOME_WINDOW_AUTH_TYPE;

  global $theme_key;
  $params = array(
    'tve_auth' => array(
      'theme' => $theme_key,
      'k2_enabled' => module_exists('tve_k2'),
      'is_tve' => (int) theme_get_setting('is_tve', $theme_key),
    ),
    'auth' => $auth_flow,
    'tve_auth_windows' => drupal_json_encode(_tve_auth_get_windows_data()),
    'windowType' => $window_type,
  );

  drupal_add_js($params, 'setting');
}

/**
 * Implements hook_theme().
 */
function tve_auth_theme() {
  return array(
    'tve_auth_signin_menu' => array(
      'variables' => array(),
    ),
    'tve_auth_signin_blocks' => array(
      'variables' => array(),
    ),
    'tve_auth_idx_toolbar' => array(
      'template' => 'templates/tve_auth_idx_toolbar',
    ),
    'tve_auth_welcome_window' => array(
      'template' => 'templates/tve_auth_welcome_window',
    ),
    'tve_auth_errors_window' => array(
      'template' => 'templates/tve_auth_errors_window',
    ),
    'tve_auth_login_window' => array(
      'template' => 'templates/tve_auth_login_window',
    ),
    'tve_auth_k2_window' => array(
      'template' => 'templates/tve_auth_k2_window',
    ),
    'tve_auth_adobe_pass_window' => array(
      'template' => 'templates/tve_auth_adobe_pass_window',
    ),
  );
}

/**
 * Renders Sign In menu items.
 *
 * @return string
 *   Prepared item list.
 */
function theme_tve_auth_signin_menu() {
  $menu_items = _tve_auth_prepare_menu_items();
  $links = array(
    '#theme' => 'item_list',
    '#items' => $menu_items,
    '#attributes' => array('class' => array('tve-header-links', 'inline')),
    '#prefix' => '<div class="links-wrapper">',
    '#suffix' => '</div>',
  );

  return drupal_render($links);
}

/**
 * Renders Sign In blocks.
 *
 * @return string
 *   Returns modal windows to page.
 */
function theme_tve_auth_signin_blocks() {
  $idx_toolbar = theme('tve_auth_idx_toolbar');
  $welcome_window = theme('tve_auth_welcome_window');
  $errors_window = theme('tve_auth_errors_window');
  $login_window = theme('tve_auth_login_window');
  $k2_window = theme('tve_auth_k2_window');
  $adobe_pass_window = theme('tve_auth_adobe_pass_window');

  return
    $idx_toolbar .
    $welcome_window .
    $errors_window .
    $login_window .
    $k2_window .
    $adobe_pass_window;
}

/**
 * Returns array of menu items for Sign In block.
 *
 * @return array
 *   Menu items for render.
 */
function _tve_auth_prepare_menu_items() {
  $menu_items = array();

  $login_link_image_url = _tve_auth_get_login_link_image_url();

  // Link or image link.
  if ($login_link_image_url) {
    $menu_items[] = theme('image', array(
        'path' => $login_link_image_url,
        'alt' => t('Login'),
        'attributes' => array(
          'class' => 'loginButtonImg clean',
          'data-ng-if' => '!global.isAuthN',
          'data-ng-click' => 'openLoginWindow()',
          'data-ng-cloak' => '',
        ),
      )
    );
  }
  else {
    $menu_items[] = l(t('Sign In'), 'javascript:void(0)', array(
      'external' => TRUE,
      'attributes' => array(
        'class' => 'loginButton clean',
        'data-ng-if' => '!global.isAuthN',
        'data-ng-click' => 'openLoginWindow()',
        'data-ng-cloak' => '',
      ),
    ));
  }

  $image = theme('image', array(
      'attributes' => array(
        'data-ng-src' => "{{global.currentProvider.mvpd_color}}",
      ),
    )
  );

  $menu_items[] = l($image, '', array(
    'attributes' => array(
      'class' => 'clean providerLogo',
      'data-ng-if' => 'global.isAuthN',
      'data-ng-href' => "{{global.currentProvider.mvpd_url}}",
      'target' => '_blank',
      'data-ng-cloak' => '',
    ),
    'html' => TRUE,
  ));

  $menu_items[] = '<div data-tve-auth-menu data-ng-if="global.isAuthN"></div>';

  return $menu_items;
}

/**
 * Returns auth windows data array.
 *
 * @return array
 *   Associative array with draft and published data.
 */
function _tve_auth_get_windows_data() {
  if (user_access('administer tve')) {
    $draft_variables = _tve_auth_get_draft_variables();
    _tve_auth_prepare_file_urls($draft_variables);
  }

  $published_variables = _tve_auth_get_published_variables();
  _tve_auth_prepare_file_urls($published_variables);

  return array(
    'draft' => (isset($draft_variables)) ? _tve_auth_prepare_array_for_json($draft_variables) : NULL,
    'published' => _tve_auth_prepare_array_for_json($published_variables),
  );
}

/**
 * Prepares array structure.
 *
 * @param $variables
 *   Array of modal window variables.
 *
 * @return array
 *   Prepared array for JSON.
 */
function _tve_auth_prepare_array_for_json($variables) {
  return array(
    'welcome_window' => isset($variables['welcome_window']) ? $variables['welcome_window'] : array(),
    'login' => array(
      'login_link' => isset($variables['login_link']) ? $variables['login_link'] : array(),
      'login_window_1' => isset($variables['login_window_1']) ? $variables['login_window_1'] : array(),
      'login_window_2' => isset($variables['login_window_2']) ? $variables['login_window_2'] : array(),
      'login_window_3' => isset($variables['login_window_3']) ? $variables['login_window_3'] : array(),
    ),
  );
}

/**
 * Returns login link image url if configured, or NULL.
 *
 * @return string|null
 */
function _tve_auth_get_login_link_image_url() {
  $draft_variables = _tve_auth_get_published_variables();
  _tve_auth_prepare_file_urls($draft_variables);

  return isset($draft_variables['login_link']['image']['url']) ?
    $draft_variables['login_link']['image']['url'] :
    NULL;
}

/**
 * Determines if at least one TVE-based theme exists and enabled.
 *
 * @return bool
 */
function _tve_auth_tve_theme_exists() {
  $themes = list_themes();
  foreach ($themes as $theme_name => $theme) {
    if ($theme->status
      && ((isset($theme->base_theme) && $theme->base_theme == 'tve') || $theme_name == 'tve')
    ) {
      // Return TRUE if base TVE or at least one parent theme (enabled) found.
      return TRUE;
    }
  }

  return FALSE;
}
