<?php
/**
 * @file tve_errors_browser.module
 *
 * Provides functions for displaying errors for incorrect browsers.
 */

/**
 * Defines area.
 *
 * Set up version of unsupported browsers.
 */
define('TVE_ERRORS_SUPPORTED_IE_VERSION', 9);
define('TVE_ERRORS_SUPPORTED_FF_VERSION', 13);
define('TVE_ERRORS_SUPPORTED_CHROME_VERSION', 10);
define('TVE_ERRORS_SUPPORTED_SAFARI_VERSION', 5);

/**
 * Implements hook_tve_admin_ui_info_alter().
 */
function tve_errors_browsers_tve_admin_ui_info_alter(&$items) {
  // Deprecated module.
  return;
  // Extends errors admin page with special variables for unsupported browsers.
  if (isset($items['errors']['variables'])) {
    $items['errors']['variables']['browser_section'] = array(
      'header_title' => "Sorry! There's a problem.",
      'body_text' => array(
        'value' => 'Your browser needs a tune up...',
        'format' => 'wysiwyg_full',
      ),
      'firefox_link' => 'http://www.mozilla.org/en-US/firefox/new/',
      'safari_link' => 'http://support.apple.com/downloads/#safari',
      'chrome_link' => 'https://www.google.com/intl/en/chrome/browser/',
      'ie9_error_msg' => array(
        'format' => 'wysiwyg_full',
        'value' => _tve_errors_ie9_error_msg_default(),
      )
    );
  }
}

/**
 * Implements hook_form_form_id_alter().
 */
function tve_errors_browsers_form__tve_admin_ui_section_form_alter(&$form, &$form_state) {
  // Deprecated module.
  return;
  // Extends TVE errors page.
  if (isset($form_state['build_info']['args'][1]['form callback'])
    && ($form_state['build_info']['args'][1]['form callback'] == '_tve_errors_settings_form')
  ) {
    $defaults = $form_state['build_info']['args'][0];
    // Browser support form.
    _tve_errors_browsers_error_form($form, $defaults);
    if (isset($form['description'])) {
      unset($form['description']);
    }
    // Set submit button to the bottom of form.
    $form['submit']['#weight'] = 10;
  }
}

/**
 * Implements hook_page_alter().
 */
function tve_errors_browsers_page_alter(&$page) {
  // Deprecated module.
  return;
  global $theme_key;
  // Setting list of unsupported pages.
  $unsupported_page_array = array(
    'user',
    'faq_old_browsers',
  );

  if (in_array(arg(0), $unsupported_page_array) || path_is_admin(current_path())) {
    // Prevent from adding extra js and css files for admin area.
    return;
  }

  $is_desktop = TRUE;
  $old_browser = FALSE;
  if (module_exists('tve_mobile')) {
    // Get device data.
    $detect = _tve_mobile_get_device_data();
    if ($detect['isMobile']) {
      $is_desktop = FALSE;
    }
  }
  if ($is_desktop) {
    $is_appear = FALSE;
    $browser = _tve_errors_get_browser();
    // Add data into JS for test.
    drupal_add_js(array('browserData' => $browser), 'setting');
    switch ($browser['browser']) {
      case 'ie':
        if ($browser['version'] < TVE_ERRORS_SUPPORTED_IE_VERSION) {
          $is_appear = TRUE;
        }
        break;
      case 'chrome':
        if ($browser['version'] < TVE_ERRORS_SUPPORTED_CHROME_VERSION) {
          $is_appear = TRUE;
        }
        break;
      case 'safari':
        if ($browser['version'] < TVE_ERRORS_SUPPORTED_SAFARI_VERSION) {
          $is_appear = TRUE;
        }
        break;
      case 'ff':
        if ($browser['version'] < TVE_ERRORS_SUPPORTED_FF_VERSION) {
          $is_appear = TRUE;
        }
        break;
      default:
        $is_appear = TRUE;
    }

    if ($is_appear) {
      $old_browser = TRUE;
      // Get browser variables.
      $browser_vars = _tve_admin_ui_variable_get('browser_section', array(), TVE_ERRORS_VARIABLE_PREFIX);

      // Get body data.
      if (!empty($browser_vars) && isset($browser_vars['body_text'])) {
        $browser_vars['body_text'] = $browser_vars['body_text']['value'];
      }
      // Check if IE9.
      $browser_vars['is_ie9'] = FALSE;
      if ($browser['browser'] == 'ie' && $browser['version'] == 7) {
        // Check if IE9 compatibility view is enabled.
        if (substr_count(strtolower($_SERVER['HTTP_USER_AGENT']), 'trident') > 0) {
          $browser_vars['is_ie9'] = TRUE;
          $browser_vars['ie9_error_msg'] = $browser_vars['ie9_error_msg']['value'];
        }
      }
      // Get FAQ page URL.
      if (module_exists('tve_faq')) {
        $browser_vars['faq_link'] = l(t('FAQ'), 'faq_old_browsers');
      }
      // Get url to images.
      $browser_vars['image_path'] = drupal_get_path('theme', $theme_key);
      // Remove page data if not IE9-10.
      if (!$browser_vars['is_ie9']) {
        foreach (element_children($page) as $key) {
          unset($page[$key]);
        }
      }
      // Render.
      $page['page_bottom']['tve_mobile'] = array(
        '#markup' => theme('tve_error_window', $browser_vars),
      );
    }
  }
  // Add info to front-end.
  drupal_add_js(array('isOldBrowser' => $old_browser), 'setting');
}

/**
 * Form build helper function.
 */
function _tve_errors_browsers_error_form(&$form, $defaults) {
  $form['browser_section'] = array(
    '#type' => 'fieldset',
    '#title' => t('Browser Not Supported'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#weight' => 9,
  );

  $form['browser_section']['header_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Error header title'),
    '#description' => t('Fill a text of a header title.'),
    '#default_value' => $defaults['browser_section']['header_title'],
  );

  $form['browser_section']['body_text'] = array(
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#title' => t('Error body'),
    '#description' => t('The body text of the error message.'),
    '#rows' => 15,
    '#default_value' => $defaults['browser_section']['body_text']['value'],
    '#format' => $defaults['browser_section']['body_text']['format'],
  );
  $form['browser_section']['ie9_error_msg'] = array(
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#title' => t('IE 9 error message'),
    '#description' => t('IE 9 error message.'),
    '#rows' => 15,
    '#default_value' => $defaults['browser_section']['ie9_error_msg']['value'],
    '#format' => $defaults['browser_section']['ie9_error_msg']['format'],
  );
  // Firefox link.
  $form['browser_section']['firefox_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Firefox download link'),
    '#description' => t('Fill a link for download.'),
    '#required' => TRUE,
    '#default_value' => $defaults['browser_section']['firefox_link'],
  );
  // Safari link.
  $form['browser_section']['safari_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Safari download link'),
    '#description' => t('Fill a link for download.'),
    '#required' => TRUE,
    '#default_value' => $defaults['browser_section']['safari_link'],
  );
  // Chrome link.
  $form['browser_section']['chrome_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Chrome download link'),
    '#description' => t('Fill a link for download.'),
    '#required' => TRUE,
    '#default_value' => $defaults['browser_section']['chrome_link'],
  );
}

/**
 * Detect browser. Finds supported browsers only.
 *
 * @return array of detected platforms
 */
function _tve_errors_get_browser() {
  $agent = strtolower($_SERVER["HTTP_USER_AGENT"]);
  $data = array(
    'browser' => 'Unsupported',
    'version' => 0,
  );
  if (stristr($agent, 'msie')) {
    $data['browser'] = 'ie';
    // Add ie extra class with the version number.
    $pattern = '/.*msie ([0-9]*)\..*/';
    preg_match($pattern, $agent, $matches);
    if (isset($matches[1])) {
      $data['version'] = $matches[1];
    }
  }
  // Check on IE11.
  if (stristr($agent, 'trident')) {
    $data['browser'] = 'ie';
    $agent_result = explode('/', stristr($agent, 'trident'));
    if (isset($agent_result[1])) {
      $agent_version = explode(' ', $agent_result[1]);
      if (isset($agent_version[0])) {
        $trident_version = _tve_errors_clear_version($agent_version[0]);
        // IE11 browser.
        if ($trident_version == 7) {
          $data['version'] = 11;
        }
      }
    }
  }
  if (stristr($agent, 'chrome')) {
    $data['browser'] = 'chrome';
    $agent_result = explode('/', stristr($agent, 'chrome'));
    if (isset($agent_result[1])) {
      $agent_version = explode(' ', $agent_result[1]);
      if (isset($agent_version[0])) {
        $data['version'] = _tve_errors_clear_version($agent_version[0]);
      }
    }
  }
  elseif (stristr($agent, 'safari')) {
    $data['browser'] = 'safari';
    $agent_result = explode('/', stristr($agent, 'version'));
    if (isset($agent_result[1])) {
      $agent_version = explode(' ', $agent_result[1]);
      if (isset($agent_version[0])) {
        $data['version'] = _tve_errors_clear_version($agent_version[0]);
      }
    }
  }
  if (stristr($agent, 'firefox')) {
    $data['browser'] = 'ff';
    if (preg_match("/firefox[\/ \(]([^ ;\)]+)/", $agent, $matches)) {
      $data['version'] = _tve_errors_clear_version($matches[1]);
    }
  }
  if (stristr($agent, 'opera') || stristr($agent, 'opr')) {
    // OPR for version 15 and beyond.
    $data['browser'] = 'opera';
    $agent_result = explode('/', stristr($agent, 'version'));
    if (isset($agent_result[1])) {
      $agent_version = explode(' ', $agent_result[1]);
      if (isset($agent_version[0])) {
        $data['version'] = _tve_errors_clear_version($agent_version[0]);
      }
    }
  }

  return $data;
}

/**
 * Default message for IE 9 window.
 *
 * @return string
 *  message for IE9.
 *
 */
function _tve_errors_ie9_error_msg_default() {
  $items = array(
    t('Select Tool form the Menu Bar (if its not visible, press Alt on your keyboard).'),
    t('Select Compatibility View Settings. A panel will open. Uncheck all 3 options at the bottom of the panel.'),
    t('Select the Close button to save your changes.'),
    t('Reload the page, and enjoy.'),
  );
  $message = '<p>' . t('For IE9 users - IE9 is supported, but its Compatibility View feature is not. The fix is simple - turn off Compatibility View mode. Here is how:') . '</p>';
  $message = $message . theme('item_list', array('items' => $items));

  return $message;
}

/**
 * Remove not supported characters from version.
 *
 * @param string $version
 *  Version of browser.
 *
 * @return string
 */
function _tve_errors_clear_version($version) {
  $version = preg_replace('/[^0-9,.,a-z,A-Z-]/', '', $version);
  return substr($version, 0, strpos($version, '.'));
}

/**
 * Implements hook_theme().
 */
function tve_errors_browsers_theme($existing, $type, $theme, $path) {
  // Deprecated module.
  return array();
  return array(
    'tve_error_window' => array(
      'path' => $path . '/theme',
      'template' => 'error-tve-browser-detect--modal',
      'variables' => array(
        'header_title' => '',
        'body_text' => '',
        'firefox_link' => '',
        'safari_link' => '',
        'chrome_link' => '',
        'is_ie9' => FALSE,
        'faq_link' => '',
        'image_path' => '',
      ),
    ),
  );
}
